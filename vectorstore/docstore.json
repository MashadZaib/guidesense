{"docstore/metadata": {"a790d908-8f96-4280-a618-08f69c76e165": {"doc_hash": "b8885d1876d31c96f227379d720f05fa57d35c2a9382fd597cd249ec72cad067"}, "592676f1-da3d-4048-aed5-76f502bd859e": {"doc_hash": "c81d093f2b623120468c7ef8c43c9a2fc8d2baadc2fb0bea0433ea58fb49f345"}, "c8c3353a-e93e-4fd8-b4d4-bca4ab611ecb": {"doc_hash": "5963acde83bef40d98389ad406c63c8f8eadc4be4b1906da6718d341b51b28d7"}, "1673ac47-17bd-4227-9a4e-30e00ddc5ed2": {"doc_hash": "4f82db359fa89d6eb759a3a72964c776b088025baef9a1c77d6eafd62d42ce16", "ref_doc_id": "a790d908-8f96-4280-a618-08f69c76e165"}, "dc1dcd3e-fe81-471d-abec-b489959225ec": {"doc_hash": "dc9c79927ce86d62c59a9f3b1c927360d6b0ad57380b9746346f75b0713739f6", "ref_doc_id": "a790d908-8f96-4280-a618-08f69c76e165"}, "31ff29c1-5d8d-435b-9da2-455211a74234": {"doc_hash": "deb7c826789aced6cc40a67ec35734911b6bdcc933a367bf20e5c8e90b26fbb2", "ref_doc_id": "a790d908-8f96-4280-a618-08f69c76e165"}, "f4fa7973-703d-4375-995b-84a4cdc6b718": {"doc_hash": "b95a8603186bbb1aafd309bc7c1521edbf17fe3c69fb4faf99412b62f5b0a48c", "ref_doc_id": "a790d908-8f96-4280-a618-08f69c76e165"}, "ec94caaf-69f7-4caa-aa59-eb332cd835cf": {"doc_hash": "3b054d27489e7bee7afc75ea3ebd0b143a10627cd0e2c1862ade92c4a0879677", "ref_doc_id": "a790d908-8f96-4280-a618-08f69c76e165"}, "c24ccf3c-9850-41fb-81e0-6ccc15517d90": {"doc_hash": "79fae0ae267c184a565759f28871a90d83763ae44a945487237f41a8c1f0dcf8", "ref_doc_id": "a790d908-8f96-4280-a618-08f69c76e165"}, "ebb08a95-d3bc-44e0-b639-02349f5997a7": {"doc_hash": "873f68bce9142ca4d0a70399a60150fd643e1b41af423c1965349a783700b9dc", "ref_doc_id": "a790d908-8f96-4280-a618-08f69c76e165"}, "1a3f4180-f833-423d-bc78-372260745bbe": {"doc_hash": "ce979d970f9e5639d4fcc918400f8783f595b58ea31390a4a176075817ebdc5b", "ref_doc_id": "a790d908-8f96-4280-a618-08f69c76e165"}, "352a001a-f166-4f43-a3f3-5b547e641e79": {"doc_hash": "5476083b4d2bd782caddb0ad1617c564d444d0012bf6ac9a829159f946ab4e1f", "ref_doc_id": "a790d908-8f96-4280-a618-08f69c76e165"}, "89834ba8-f5da-4a93-8111-1214f056c8d1": {"doc_hash": "7665f0c75cf1931233eb73ef2361678ede53256acb9b4dd4dd52ffb0d4b03195", "ref_doc_id": "a790d908-8f96-4280-a618-08f69c76e165"}, "1c7c8e3e-1c4a-4187-8900-54f096f97d05": {"doc_hash": "082b9ae50e21db832057da86fceeab4881bc9726c08d5e572affabf023b4a9da", "ref_doc_id": "a790d908-8f96-4280-a618-08f69c76e165"}, "b115f542-3656-4e9e-a713-d489728dcba6": {"doc_hash": "8d46180a9819fa35f6d1bc776c32c48ba34f00144c3bf727132f2c8fcbefeedd", "ref_doc_id": "a790d908-8f96-4280-a618-08f69c76e165"}, "9f6ce96b-dffb-4560-81e7-681f8683b892": {"doc_hash": "c7f24200030db0880b7ac12df08e8bea4fd4aba41c0a60366ac135bc09cc769f", "ref_doc_id": "a790d908-8f96-4280-a618-08f69c76e165"}, "ce6bdccd-4b7c-4ad5-8cb2-b10121813896": {"doc_hash": "78622c187824fd66429554df16105caf8318fad0497a121a1b62af282c2537c5", "ref_doc_id": "a790d908-8f96-4280-a618-08f69c76e165"}, "a3d8ea2f-2e8d-43e1-8eab-ed596e1fad64": {"doc_hash": "6cd0a5c5392c5a8134ede23a5da3a3b904269f9345a83402a45910ca4bd2a5d7", "ref_doc_id": "a790d908-8f96-4280-a618-08f69c76e165"}, "13c25e26-a4a6-4502-b807-b0e8aeb8de99": {"doc_hash": "d234e04ea9128cd335ea9d8a57d797dd9bbdfdc2085b1242a6b51d4586c10587", "ref_doc_id": "592676f1-da3d-4048-aed5-76f502bd859e"}, "87f93bdb-06c9-4092-97ea-a8fb2a679be1": {"doc_hash": "037bf86e79154a5e756ae29deb86618629f3028b59aa94d08d1e727c23d6380c", "ref_doc_id": "592676f1-da3d-4048-aed5-76f502bd859e"}, "2e62ba69-e414-4e70-b92c-e8aca3e5c1d8": {"doc_hash": "8c14e0c1fb14ddaada22f5a8e1fc09634726e6c900e9cdd7c733285606aa13cf", "ref_doc_id": "592676f1-da3d-4048-aed5-76f502bd859e"}, "d8d42ace-a1ff-45fa-a186-718b82e68600": {"doc_hash": "25af938f57c1b51403244e19b06ee1111e551ee9313ccb9b040aed1aac8a59ec", "ref_doc_id": "592676f1-da3d-4048-aed5-76f502bd859e"}, "4cc9e588-2437-41e2-8170-fea37e59b31d": {"doc_hash": "bdcdfb1a684a163ac09932260c61f98f5f0a47109bc1c0fcfa5f63cf5d0e8b51", "ref_doc_id": "592676f1-da3d-4048-aed5-76f502bd859e"}, "43890e22-46ea-46db-896e-8d86db6fc871": {"doc_hash": "89794c6671b3e4f1b859de01c2441347a676b7ddf6a2886d425a00fdcf35f119", "ref_doc_id": "592676f1-da3d-4048-aed5-76f502bd859e"}, "a42d2a76-2fde-4c75-8689-23ae6951d93c": {"doc_hash": "6b04e352939508cf588de1b60cc2943718077748949a57f45fd3a6f310df3c42", "ref_doc_id": "592676f1-da3d-4048-aed5-76f502bd859e"}, "bf81fb50-ccb7-4c3c-b826-744749efb754": {"doc_hash": "ae801af7e0f50d356fcd5f52f5136fd1273a6aec252b712ca3a78adaf753a646", "ref_doc_id": "592676f1-da3d-4048-aed5-76f502bd859e"}, "e017bf29-0d31-4bc8-bd3b-901a6e082770": {"doc_hash": "57f9b913d4185e6d7964cdfa8c44683d9b73ad178d641684bf9f35b81f0f8332", "ref_doc_id": "592676f1-da3d-4048-aed5-76f502bd859e"}, "51975ed8-9f0a-4907-8e02-0f74e552a71f": {"doc_hash": "93d6b3e05ac192a1021ccc02043c901c84e836a08b387bf3967197e63d0983dc", "ref_doc_id": "592676f1-da3d-4048-aed5-76f502bd859e"}, "5f460e11-4bfb-42a0-9a38-211a14378faa": {"doc_hash": "1b6a233a24142af51c332d714e10361b9e9c4652bc2777399160d77954b38478", "ref_doc_id": "592676f1-da3d-4048-aed5-76f502bd859e"}, "dd07c0ea-95cb-4fc4-be75-549c1f762e5c": {"doc_hash": "e6e8657952a48bdff57abec20a7176255609ed5187dcac1beb7fc983d7531780", "ref_doc_id": "592676f1-da3d-4048-aed5-76f502bd859e"}, "ddc43f85-5638-4e42-bf00-cc0ca07ac524": {"doc_hash": "92ad772e500adad8b8ff33d828951f5a3ffb5149e5ac14f8f5e42cebf090e8f0", "ref_doc_id": "592676f1-da3d-4048-aed5-76f502bd859e"}, "b87043a4-1421-4320-b346-56b0fe68a882": {"doc_hash": "8f67b531a5026c04bbc1d767bc0ec4602dcf27c7b4147d699bd8befdfbe80852", "ref_doc_id": "592676f1-da3d-4048-aed5-76f502bd859e"}, "95f0d650-492b-4107-b3b2-765971c3127a": {"doc_hash": "fc3a5afa42dfda546b088e9af47e048bf57ce1aac596cb4bdc4f44f85d0dc31b", "ref_doc_id": "592676f1-da3d-4048-aed5-76f502bd859e"}, "d9d17ad3-855b-4a82-b7f0-3b4654f65bf9": {"doc_hash": "2e6cd16ab840f8bf00afd36e4a1d69271a0347b5009fff644e84b395408ce0d6", "ref_doc_id": "c8c3353a-e93e-4fd8-b4d4-bca4ab611ecb"}, "920029f1-a30c-4e8a-bb09-1bb5820d3a76": {"doc_hash": "c72febd2f5d72dff6482cb61e02572e944d0cf219db1ecff0683c0ed33ca7f00", "ref_doc_id": "c8c3353a-e93e-4fd8-b4d4-bca4ab611ecb"}, "d4093388-2ed2-42b3-92b9-d34489916fc7": {"doc_hash": "a1894834f4e556cc79121e3f68c8d8e6f12d1b42192e7e784192bb2a58ead523", "ref_doc_id": "c8c3353a-e93e-4fd8-b4d4-bca4ab611ecb"}, "6b1464ab-ca70-46ad-a6c6-7c189ade3f0f": {"doc_hash": "7454b5052db26b21c2e7792aa929390a96bd56c48e9f1ac617fd1c43bfc4709d", "ref_doc_id": "c8c3353a-e93e-4fd8-b4d4-bca4ab611ecb"}, "edf13373-1d20-41e4-99f5-c09e12b49d40": {"doc_hash": "a184b24026b0188adf02e51eff71473b89189ab368c5a5bb9717cfd233f8bb55", "ref_doc_id": "c8c3353a-e93e-4fd8-b4d4-bca4ab611ecb"}, "86b0db69-6d73-410d-8b7c-539acba74609": {"doc_hash": "186afb2478da15ffa3fa4479946475cc34a5f2c3c821ac88aa84a1203958efdc", "ref_doc_id": "c8c3353a-e93e-4fd8-b4d4-bca4ab611ecb"}, "ed3c9c36-f45e-4196-8d38-32b20fb5928a": {"doc_hash": "d325fba22805e52d7679afd010a5cbaedabc01e9ba2d7469cd0a8ce68a7b1879", "ref_doc_id": "c8c3353a-e93e-4fd8-b4d4-bca4ab611ecb"}, "97e9dc4d-0313-42ff-b112-9132ce32363d": {"doc_hash": "692f268102e1a4908d75245e826df4518f2c70a238100aeccb5df34d93ffd46c", "ref_doc_id": "c8c3353a-e93e-4fd8-b4d4-bca4ab611ecb"}, "b7679a35-f3f4-49a9-85cc-524ee3428a2c": {"doc_hash": "023f75a8d754a58703f743730266c93faeef8db9c777876df9586b986903d976", "ref_doc_id": "c8c3353a-e93e-4fd8-b4d4-bca4ab611ecb"}, "9bdb4247-805c-464a-87a8-d39d4dfc7761": {"doc_hash": "327b389bd9b74610f0b6a5561f98bdfdc538c81a89ee1e6b439fa032ff7d7f4b", "ref_doc_id": "c8c3353a-e93e-4fd8-b4d4-bca4ab611ecb"}, "ce83b58d-97cd-433d-bd7f-c2564d158fe5": {"doc_hash": "49d60c868c2cd32f8af53f33eb99394d5a0687794507bb69c6530166d107d3b4", "ref_doc_id": "c8c3353a-e93e-4fd8-b4d4-bca4ab611ecb"}, "f601d1ab-c873-481c-953d-2c57bc113115": {"doc_hash": "d6a2a7fbe8f06fedba25130124b5f14b933b5aa1d8c429a5fc6930232d8b2515", "ref_doc_id": "c8c3353a-e93e-4fd8-b4d4-bca4ab611ecb"}, "28cb155e-0f77-4f1e-a5ef-edcd289678b2": {"doc_hash": "e4ce2c9d9940282fbe8ebe8bff6f66a7a973c5a3d2b7d1bf57c87ab8332de0f5", "ref_doc_id": "c8c3353a-e93e-4fd8-b4d4-bca4ab611ecb"}}, "docstore/ref_doc_info": {"a790d908-8f96-4280-a618-08f69c76e165": {"node_ids": ["1673ac47-17bd-4227-9a4e-30e00ddc5ed2", "dc1dcd3e-fe81-471d-abec-b489959225ec", "31ff29c1-5d8d-435b-9da2-455211a74234", "f4fa7973-703d-4375-995b-84a4cdc6b718", "ec94caaf-69f7-4caa-aa59-eb332cd835cf", "c24ccf3c-9850-41fb-81e0-6ccc15517d90", "ebb08a95-d3bc-44e0-b639-02349f5997a7", "1a3f4180-f833-423d-bc78-372260745bbe", "352a001a-f166-4f43-a3f3-5b547e641e79", "89834ba8-f5da-4a93-8111-1214f056c8d1", "1c7c8e3e-1c4a-4187-8900-54f096f97d05", "b115f542-3656-4e9e-a713-d489728dcba6", "9f6ce96b-dffb-4560-81e7-681f8683b892", "ce6bdccd-4b7c-4ad5-8cb2-b10121813896", "a3d8ea2f-2e8d-43e1-8eab-ed596e1fad64"], "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\html-css-js.txt", "file_name": "html-css-js.txt", "file_type": "text/plain", "file_size": 49596, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}}, "592676f1-da3d-4048-aed5-76f502bd859e": {"node_ids": ["13c25e26-a4a6-4502-b807-b0e8aeb8de99", "87f93bdb-06c9-4092-97ea-a8fb2a679be1", "2e62ba69-e414-4e70-b92c-e8aca3e5c1d8", "d8d42ace-a1ff-45fa-a186-718b82e68600", "4cc9e588-2437-41e2-8170-fea37e59b31d", "43890e22-46ea-46db-896e-8d86db6fc871", "a42d2a76-2fde-4c75-8689-23ae6951d93c", "bf81fb50-ccb7-4c3c-b826-744749efb754", "e017bf29-0d31-4bc8-bd3b-901a6e082770", "51975ed8-9f0a-4907-8e02-0f74e552a71f", "5f460e11-4bfb-42a0-9a38-211a14378faa", "dd07c0ea-95cb-4fc4-be75-549c1f762e5c", "ddc43f85-5638-4e42-bf00-cc0ca07ac524", "b87043a4-1421-4320-b346-56b0fe68a882", "95f0d650-492b-4107-b3b2-765971c3127a"], "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\mern-stack.txt", "file_name": "mern-stack.txt", "file_type": "text/plain", "file_size": 51574, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}}, "c8c3353a-e93e-4fd8-b4d4-bca4ab611ecb": {"node_ids": ["d9d17ad3-855b-4a82-b7f0-3b4654f65bf9", "920029f1-a30c-4e8a-bb09-1bb5820d3a76", "d4093388-2ed2-42b3-92b9-d34489916fc7", "6b1464ab-ca70-46ad-a6c6-7c189ade3f0f", "edf13373-1d20-41e4-99f5-c09e12b49d40", "86b0db69-6d73-410d-8b7c-539acba74609", "ed3c9c36-f45e-4196-8d38-32b20fb5928a", "97e9dc4d-0313-42ff-b112-9132ce32363d", "b7679a35-f3f4-49a9-85cc-524ee3428a2c", "9bdb4247-805c-464a-87a8-d39d4dfc7761", "ce83b58d-97cd-433d-bd7f-c2564d158fe5", "f601d1ab-c873-481c-953d-2c57bc113115", "28cb155e-0f77-4f1e-a5ef-edcd289678b2"], "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\php.txt", "file_name": "php.txt", "file_type": "text/plain", "file_size": 42456, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}}}, "docstore/data": {"1673ac47-17bd-4227-9a4e-30e00ddc5ed2": {"__data__": {"id_": "1673ac47-17bd-4227-9a4e-30e00ddc5ed2", "embedding": null, "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\html-css-js.txt", "file_name": "html-css-js.txt", "file_type": "text/plain", "file_size": 49596, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a790d908-8f96-4280-a618-08f69c76e165", "node_type": "4", "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\html-css-js.txt", "file_name": "html-css-js.txt", "file_type": "text/plain", "file_size": 49596, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "hash": "b8885d1876d31c96f227379d720f05fa57d35c2a9382fd597cd249ec72cad067", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "dc1dcd3e-fe81-471d-abec-b489959225ec", "node_type": "1", "metadata": {}, "hash": "11f26d3d8472c41b3ab18e0d6272b131094354ea7c8af84dd8a797588aaf654e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "\ufeffVersion: 1.1\r\nDate: July 31, 2023\r\nReference: ArhamSoft (Pvt) Ltd.\r\nDocument Information\r\n\t\r\n\r\nCategory\r\n\tInformation\r\n\tDocument\r\n\tHTML, CSS, and JavaScript Coding Guidelines\r\n\tVersion\r\n\t1.1\r\n\tIdentifier\r\n\tArhamSoft (Pvt) Ltd.\r\n\tStatus\r\n\tIssued\r\n\tAuthor(s)\r\n\tMr. Muhammad Zeeshan Hussain (FED Team Lead)\r\nMr. Humaz Miraj (FED Team Lead)\r\nMr. Shafique Yousaf (FED Team Lead)\r\n\tEditor(s)\r\n\tMr. Umer Surkhail (Technical Project Manager)\r\nMs. Ayesha Shaukat (MERN Team Lead, Code Auditor)\r\n\tReviewer(s)\r\n\tMr. Mahmood Sultan (CIO)\r\n\tApprover(s)\r\n\tMr. Adil Irfan (CEO)\r\n\tCreation Date\r\n\tJuly 31, 2023\r\n\tIssue Date\r\n\tJuly 31, 2023\r\n\tEffective Date\r\n\tJuly 31, 2023\r\n\tControl Status\r\n\tControlled\r\n\tDistribution\r\n\tIT\r\n\tDisclaimer\r\n\tThis document contains confidential information. Do not distribute this document without prior approval from the higher management of ArhamSoft (Pvt) Ltd.\r\n\t________________\r\n\r\n\r\n\r\n\r\nDocument Revision History\r\n\t\r\n\r\nAuthor(s)\r\n\tDate\r\n\tVersion\r\n\tDocument Link\r\n\tDescription\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t________________\r\n\r\n\r\n\r\n\r\nTable of Contents\r\n\tIntroduction:        7\r\nHTML, CSS, JavaScript Coding Guidelines:        7\r\nPre-project Instructions        8\r\n1. Project and Essential File Organization:        8\r\na. Examples:        8\r\ni. Good Practice:        8\r\nii. Bad Practice:        10\r\n2. Folder Structure:        11\r\n3. File Naming Convention:        11\r\n4. Descriptive Naming:        11\r\na. Examples:        12\r\ni. Good Practice:        12\r\nii. Bad Practice:        13\r\n5. SVG Images:        13\r\n6. Indentation For Files:        13\r\n7. Seek Designer Input:        15\r\n8. Avoid Deep Nodes:        15\r\n9. Dynamic Images        15\r\n10. Avoid CDN Links:        15\r\na. Examples:        15\r\ni. Good Practice:        15\r\nii. Bad Practice:        16\r\n11. Title and Favicon:        16\r\n12. Single CSS File:        17\r\nIn-project Instructions        18\r\n1. Meta Tags:        18\r\n2. Path Handling:        18\r\na. Examples:        18\r\n3. CSS Hierarchy:        18\r\n4. JS Hierarchy:        19\r\n5. Body Background Color:        19\r\n6. Semantic Elements for HTML:        19\r\n7. Heading Tags:        20\r\na. Examples:        20\r\ni. Good Practice:        20\r\nii. Bad Practice:        21\r\n8. Self-Closing Tags:        21\r\na. Examples:        21\r\ni. Good Practice:        21\r\nii. Bad Practice:        22\r\n9. Alt of Image:        23\r\n10. Image Styling:        23\r\n11. Minimize Image Usage:        23\r\na. Examples:        23\r\ni. Good Practice:        23\r\n12. Custom Buttons:        24\r\nc. Examples:        25\r\ni. Good Practice:        25\r\nii. Bad Practice:        25\r\n13. Hover Enhancements:        25\r\n14. Seamless Transitions:        25\r\n15. Buttons Vs Anchors:        25\r\ne. Examples:        26\r\ni. Good Practice:        26\r\nii. Bad Practice:        26\r\n16.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3289, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "dc1dcd3e-fe81-471d-abec-b489959225ec": {"__data__": {"id_": "dc1dcd3e-fe81-471d-abec-b489959225ec", "embedding": null, "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\html-css-js.txt", "file_name": "html-css-js.txt", "file_type": "text/plain", "file_size": 49596, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a790d908-8f96-4280-a618-08f69c76e165", "node_type": "4", "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\html-css-js.txt", "file_name": "html-css-js.txt", "file_type": "text/plain", "file_size": 49596, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "hash": "b8885d1876d31c96f227379d720f05fa57d35c2a9382fd597cd249ec72cad067", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1673ac47-17bd-4227-9a4e-30e00ddc5ed2", "node_type": "1", "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\html-css-js.txt", "file_name": "html-css-js.txt", "file_type": "text/plain", "file_size": 49596, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "hash": "4f82db359fa89d6eb759a3a72964c776b088025baef9a1c77d6eafd62d42ce16", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "31ff29c1-5d8d-435b-9da2-455211a74234", "node_type": "1", "metadata": {}, "hash": "c68598722248cf7e012f39a94a7ee0a51c479a36a899cbf6801c2fe9be5b8c89", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Bad Practice:        21\r\n8. Self-Closing Tags:        21\r\na. Examples:        21\r\ni. Good Practice:        21\r\nii. Bad Practice:        22\r\n9. Alt of Image:        23\r\n10. Image Styling:        23\r\n11. Minimize Image Usage:        23\r\na. Examples:        23\r\ni. Good Practice:        23\r\n12. Custom Buttons:        24\r\nc. Examples:        25\r\ni. Good Practice:        25\r\nii. Bad Practice:        25\r\n13. Hover Enhancements:        25\r\n14. Seamless Transitions:        25\r\n15. Buttons Vs Anchors:        25\r\ne. Examples:        26\r\ni. Good Practice:        26\r\nii. Bad Practice:        26\r\n16. Input and Textarea Styling:        27\r\na. Wrapper or Sole Child:        27\r\nb. Width Adjustment:        27\r\nc. Focus Styling:        27\r\nd. Textarea Resizing:        27\r\n17. Table Responsiveness:        27\r\na. Table Wrapping:        27\r\nb. Bootstrap Class (If Using Bootstrap):        27\r\nc. Overflow Property (If Not Using Bootstrap):        28\r\n18. Checkboxes and Radio Buttons Styling:        28\r\n19. Select Tag Styling:        28\r\n20. Direct Tag Styling:        29\r\n21. Container vs. Container Fluid:        29\r\na. Container:        29\r\nb. Container Fluid:        30\r\nc. Purpose of .row:        30\r\n22. Row & Col:        30\r\na. Examples:        30\r\ni. Good Practice:        30\r\nii. Bad Practice:        31\r\n23. Bootstrap Classes:        31\r\n24. Page Linking:        31\r\na. Examples:        31\r\ni. Good Practice:        31\r\nii. Bad Practice:        32\r\n25. Manifest.json        32\r\n26. React/Angular Packages:        32\r\n27. React Bootstrap:        32\r\n28. Responsive:        33\r\na. Examples:        33\r\ni. Good Practice:        33\r\nii. Bad Practice:        33\r\n29. Responsive Breakpoints and Media Queries:        33\r\na. Examples:        34\r\ni. Good Practice:        34\r\nii. Bad Practice:        34\r\n30. Section by Section:        34\r\n31. Extra Lines:        34\r\n32. Custom Classes:        35\r\n33. Avoid !important:        35\r\n34. Avoid Line Break Tags:        35\r\n35. Single Class Rule:        35\r\na. Examples:        35\r\ni. Good Practice:        35\r\nii. Bad Practice:        36\r\n36. Avoid Inline Styling:        36\r\na. Examples:        36\r\ni. Good Practice:        36\r\nii. Bad Practice:        37\r\n37. Hex Color Codes:        37\r\n38. Absolute Positioning:        37\r\n39. Utilize Flexbox:        37\r\n40. Same Units:        38\r\n41. Component-based CSS for Components:        38\r\n42. Global CSS:        38\r\n43. Logical CSS Selector:        38\r\ni. Good Practice:        38\r\nii. Bad Practice:        38\r\n44. Utilize Transform for Animations:        38\r\n45. Serving Images and Static Files via CDN:        39\r\ni. Improved Loading Times:        39\r\nii. Global Availability:        39\r\niii. Reduced Server Load:        39\r\nPost-project Instructions        40\r\n1. Pixel Perfect:        40\r\n2. Auto-compressed Images:        40\r\n3. Optimized CSS:        40\r\na. Examples:        40\r\ni. Good Practice:        40\r\nii. Bad Practice:        40\r\n4. Responsive and Cross-Browser:        41\r\n5. Avoid Extra Files:        41\r\n6. Delivering the Project:        41\r\n7. Build and Upload:        41\r\n8.", "mimetype": "text/plain", "start_char_idx": 2696, "end_char_idx": 5775, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "31ff29c1-5d8d-435b-9da2-455211a74234": {"__data__": {"id_": "31ff29c1-5d8d-435b-9da2-455211a74234", "embedding": null, "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\html-css-js.txt", "file_name": "html-css-js.txt", "file_type": "text/plain", "file_size": 49596, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a790d908-8f96-4280-a618-08f69c76e165", "node_type": "4", "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\html-css-js.txt", "file_name": "html-css-js.txt", "file_type": "text/plain", "file_size": 49596, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "hash": "b8885d1876d31c96f227379d720f05fa57d35c2a9382fd597cd249ec72cad067", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "dc1dcd3e-fe81-471d-abec-b489959225ec", "node_type": "1", "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\html-css-js.txt", "file_name": "html-css-js.txt", "file_type": "text/plain", "file_size": 49596, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "hash": "dc9c79927ce86d62c59a9f3b1c927360d6b0ad57380b9746346f75b0713739f6", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f4fa7973-703d-4375-995b-84a4cdc6b718", "node_type": "1", "metadata": {}, "hash": "1a2decc563707c24903f497840c23b3f8e77555ce69ee2de838803d71222dca3", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Bad Practice:        38\r\n44. Utilize Transform for Animations:        38\r\n45. Serving Images and Static Files via CDN:        39\r\ni. Improved Loading Times:        39\r\nii. Global Availability:        39\r\niii. Reduced Server Load:        39\r\nPost-project Instructions        40\r\n1. Pixel Perfect:        40\r\n2. Auto-compressed Images:        40\r\n3. Optimized CSS:        40\r\na. Examples:        40\r\ni. Good Practice:        40\r\nii. Bad Practice:        40\r\n4. Responsive and Cross-Browser:        41\r\n5. Avoid Extra Files:        41\r\n6. Delivering the Project:        41\r\n7. Build and Upload:        41\r\n8. Code Review:        41\r\nConclusion:        42\r\n________________\r\nIntroduction:\r\nThe HTML, CSS, and JavaScript Coding Standards and Guidelines provide a comprehensive set of rules and best practices for writing code. These standards aim to promote consistency, readability, and maintainability across projects. By adhering to the guidelines, developers can produce high-quality code that is easy to understand and collaborate on. \r\n\r\n\r\nFollowing are a few coding standards and guidelines for code review. We need to enforce them before we get into the more complex ones. The team lead will be responsible for enforcing these standards on every project. Once implemented, we can add some more advanced in the next phases.\r\n\r\n\r\nNote: Any team or project found not implementing these standards, will be penalized along with the team lead.\r\n\r\n\r\nHTML, CSS, JavaScript Coding Guidelines:\r\nTo ensure a seamless journey from project initiation to successful delivery, we have categorized the steps into three distinct phases:\r\n\r\n\r\n1. Pre-project Instructions\r\n2. In-project Instructions\r\n3. Post-project Instructions\r\n________________\r\n\r\n\r\n\r\n\r\nPre-project Instructions\r\n\t\r\n\r\nBefore commencing any project, it is crucial to lay a solid foundation. During this phase, the team should focus on the following instructions:\r\n\r\n\r\n1. Project and Essential File Organization: \r\nWithin the project folder, there must be two distinct directories, namely \u201cinput\u201d and \u201cmarkup\u201d. All materials received from the client, such as PSD files, images, documents, or any relevant content, should be placed within the \u201cinput\u201d folder. On the other hand, our project files should be stored within the \u201cmarkup\u201d folder. This well-structured file organization ensures clarity and ease of access throughout the project development process.\r\n1. Examples:\r\n   1. Good Practice:\r\n  \r\n\r\n  \r\n\r\n\r\n\r\n\r\n\r\n  \r\n\r\nIn the case of the React project, we will not create a markup folder, rather we will create the folder with command npx create-react-app project-name. We will write the project name in the above command. For example, if a project name is mFile we will write command npx create-react-app mFile and the internal structure of the files of react app will be like this\r\n  \r\n\r\n   2. Bad Practice:\r\n  \r\n\r\n2. Folder Structure: \r\nFor optimal organization, we should arrange our project files appropriately. Specifically, CSS files should be placed within the \"css\" folder, JavaScript files in the \"js\" folder, images in the \"images\" folder, and fonts within the \"fonts\" folder. As for HTML files, they should be located at the root level. In the images folder further organize the images like make a separate folder for clients, gallery and product for their respective images. You can refer to the images under the heading Project and Essential File Organization for a visual representation of this recommended folder structure.\r\n\r\n\r\n3. File Naming Convention: \r\nIt is crucial to maintain consistency in our project's folder and file names. To achieve this, all folder and file names should be in lowercase. When a name consists of multiple words, we should connect them with hyphens (-) rather than underscores or dots. This naming pattern also applies to the project's main folder name. For visual examples of this preferred naming convention, kindly refer to the images under the point Project and Essential File Organization. In the case of ReactJS/Angular, the project follows the file name convention followed by the MERN/MEAN team.\r\n\r\n\r\n4. Descriptive Naming: \r\nIt is essential to use meaningful names for images and files. Avoid generic labels like \"big image,\" \"small image,\" \"right image,\" or \"left image.\" When extracting images from XD, be sure to rename them with descriptive titles. Similarly, avoid using vague names like \"Group 1\" or \"Group 2.\"", "mimetype": "text/plain", "start_char_idx": 5170, "end_char_idx": 9595, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f4fa7973-703d-4375-995b-84a4cdc6b718": {"__data__": {"id_": "f4fa7973-703d-4375-995b-84a4cdc6b718", "embedding": null, "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\html-css-js.txt", "file_name": "html-css-js.txt", "file_type": "text/plain", "file_size": 49596, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a790d908-8f96-4280-a618-08f69c76e165", "node_type": "4", "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\html-css-js.txt", "file_name": "html-css-js.txt", "file_type": "text/plain", "file_size": 49596, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "hash": "b8885d1876d31c96f227379d720f05fa57d35c2a9382fd597cd249ec72cad067", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "31ff29c1-5d8d-435b-9da2-455211a74234", "node_type": "1", "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\html-css-js.txt", "file_name": "html-css-js.txt", "file_type": "text/plain", "file_size": 49596, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "hash": "deb7c826789aced6cc40a67ec35734911b6bdcc933a367bf20e5c8e90b26fbb2", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ec94caaf-69f7-4caa-aa59-eb332cd835cf", "node_type": "1", "metadata": {}, "hash": "ddfec2f83a736110dccb0d40a5d33ca80a5979399d02e6f9eaeedb4400b91d48", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "To achieve this, all folder and file names should be in lowercase. When a name consists of multiple words, we should connect them with hyphens (-) rather than underscores or dots. This naming pattern also applies to the project's main folder name. For visual examples of this preferred naming convention, kindly refer to the images under the point Project and Essential File Organization. In the case of ReactJS/Angular, the project follows the file name convention followed by the MERN/MEAN team.\r\n\r\n\r\n4. Descriptive Naming: \r\nIt is essential to use meaningful names for images and files. Avoid generic labels like \"big image,\" \"small image,\" \"right image,\" or \"left image.\" When extracting images from XD, be sure to rename them with descriptive titles. Similarly, avoid using vague names like \"Group 1\" or \"Group 2.\" Providing clear and meaningful names enhances the project's organization and makes it easier for team members to understand and work with the assets. In the case of icons, start every image name with icon- followed by the icon name, for example, we have svg icons for sales and marketing icons we will name them icon-sale.svg and icon-marketing.svg the same as with other categoric images.\r\n1. Examples:\r\n   1. Good Practice:\r\n  \r\n\r\n   2. Bad Practice:\r\n  \r\n\r\n\r\n\r\n5. SVG Images:\r\nSVG images will be utilized specifically for icons and shapes, and for logos, we will employ high-resolution images. This approach ensures that when images are zoomed in, they retain their clarity and do not appear blurred.\r\n\r\n\r\n6. Indentation For Files:\r\nWhen initiating code in HTML and CSS files, it is essential to set the appropriate indentation value. Both HTML and CSS files should be indented with one tab size of 4, ensuring consistent and organized code structure throughout the project. Every child tag should come one tab next to its parent tag\u2019s opening and closing tag.\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n   <meta charset=\"UTF-8\">\r\n   <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n   <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\r\n   <link rel=\"stylesheet\" href=\"css/bootstrap.min.css\">\r\n   <link rel=\"stylesheet\" href=\"css/font-awesome.min.css\">\r\n   <link rel=\"stylesheet\" href=\"css/styles.css\">\r\n   <link rel=\"stylesheet\" href=\"css/responsive.css\">\r\n   <title>Login - TDWL News</title>\r\n</head>\r\n<body>\r\n   <div class=\"login-outer\">\r\n       <div class=\"login-holder\">\r\n           <div class=\"login-logo-holder text-center\">\r\n               <strong class=\"login-logo\">\r\n                  <a href=\"#\">\r\n             <img src=\"images/login-logo.png\" alt=\"TDWL News Logo\"/>\r\n            </a>\r\n          </strong>\r\n           </div>\r\n           <form class=\"login-form tdwl-form\" action=\"index.html\" method=\"POST\">\r\n               <div class=\"form-group\">\r\n                   <input class=\"form-control\" type=\"text\" placeholder=\"username/email\" />\r\n               </div>\r\n               <div class=\"form-group\">\r\n                   <input class=\"form-control\" type=\"password\" placeholder=\"Password\" />\r\n               </div>\r\n               <div class=\"btn-holder\">\r\n                   <button class=\"btn btn-primary\" type=\"submit\">Login</button>\r\n               </div>\r\n               <div class=\"chekbox-holder\">\r\n                   <label class=\"checkbox-label\">Remember me\r\n                       <input type=\"checkbox\" />\r\n                       <span class=\"checkmark\"></span>\r\n                   </label>\r\n               </div>\r\n           </form>\r\n           <div class=\"links-holder\">\r\n               <a class=\"float-left\" href=\"forgot-password.html\">Forgot Password?</a>\r\n               <a class=\"float-right\" href=\"register.html\">Register</a>\r\n           </div>\r\n       </div>\r\n   </div>\r\n   <script src=\"js/jquery.js\"></script>\r\n   <script src=\"js/bootstrap.min.js\"></script>\r\n   <script src=\"js/custom.js\"></script>\r\n</body>\r\n</html>\r\n\r\n\r\n7. Seek Designer Input: \r\nIt is imperative to collaborate closely with the designer responsible for the project's design to discuss animations and transitions. Address any concerns or preferences they might have to ensure we achieve the desired animations and transitions accurately.\r\n8. Avoid Deep Nodes:\r\nWhile designing html, make sure your html does not go to deep nodes i.e nodes inside nodes, it will impact site performance.\r\n\r\n\r\n9. Dynamic Images\r\nWithin the \"images\" directory, create a new subfolder named \"dynamic-images\" and arrange all of the dynamic images within this newly created subfolder. For dynamic images consult with the co-ordinator before starting the project.\r\n\r\n\r\n10.", "mimetype": "text/plain", "start_char_idx": 8776, "end_char_idx": 13376, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ec94caaf-69f7-4caa-aa59-eb332cd835cf": {"__data__": {"id_": "ec94caaf-69f7-4caa-aa59-eb332cd835cf", "embedding": null, "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\html-css-js.txt", "file_name": "html-css-js.txt", "file_type": "text/plain", "file_size": 49596, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a790d908-8f96-4280-a618-08f69c76e165", "node_type": "4", "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\html-css-js.txt", "file_name": "html-css-js.txt", "file_type": "text/plain", "file_size": 49596, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "hash": "b8885d1876d31c96f227379d720f05fa57d35c2a9382fd597cd249ec72cad067", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f4fa7973-703d-4375-995b-84a4cdc6b718", "node_type": "1", "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\html-css-js.txt", "file_name": "html-css-js.txt", "file_type": "text/plain", "file_size": 49596, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "hash": "b95a8603186bbb1aafd309bc7c1521edbf17fe3c69fb4faf99412b62f5b0a48c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c24ccf3c-9850-41fb-81e0-6ccc15517d90", "node_type": "1", "metadata": {}, "hash": "aef0c1917db3d83b87ccfa4b859d3b5ba02b7a2ca61e06f978fa7b722e695f94", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Seek Designer Input: \r\nIt is imperative to collaborate closely with the designer responsible for the project's design to discuss animations and transitions. Address any concerns or preferences they might have to ensure we achieve the desired animations and transitions accurately.\r\n8. Avoid Deep Nodes:\r\nWhile designing html, make sure your html does not go to deep nodes i.e nodes inside nodes, it will impact site performance.\r\n\r\n\r\n9. Dynamic Images\r\nWithin the \"images\" directory, create a new subfolder named \"dynamic-images\" and arrange all of the dynamic images within this newly created subfolder. For dynamic images consult with the co-ordinator before starting the project.\r\n\r\n\r\n10. Avoid CDN Links:\r\nWhenever possible, we should refrain from using CDN links for third-party plugins. Instead, we will opt to download the necessary plugin files and store them in our project folder, calling them locally. This approach promotes better control over the project's dependencies and helps maintain stability and performance.\r\n1. Examples:\r\n   1. Good Practice:\r\n<head>\r\n <meta charset=\"UTF-8\">\r\n <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\r\n <link rel=\"stylesheet\" href=\"css/bootstrap.min.css\">\r\n <link rel=\"stylesheet\" href=\"css/font-awesome.min.css\">\r\n <link rel=\"stylesheet\" href=\"css/styles.css\">\r\n <title>Login - TDWL News</title>\r\n</head>\r\n   2. Bad Practice:\r\n<head>\r\n   <meta charset=\"UTF-8\">\r\n   <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n   <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\r\n   <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.1/js/bootstrap.min.js\">\r\n   <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css\">\r\n   <link rel=\"stylesheet\" href=\"css/styles.css\">\r\n   <title>Login - TDWL News</title>\r\n</head>\r\n11. Title and Favicon:\r\nTo ensure our project has a professional appearance, it is essential to set an appropriate title for the webpage and create a favicon that corresponds to the logo. For generating the favicon (favicon.ico), we can utilize the online tool accessible at Favicon & App Icon Generator. This will help establish a consistent and visually appealing identity for our project across browsers and tabs.\r\n<head>\r\n   <meta charset=\"UTF-8\">\r\n   <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n   <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\r\n   <link rel=\"icon\" href=\"images/favicon.ico\" />\r\n   <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.1/js/bootstrap.min.js\">\r\n   <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css\">\r\n   <link rel=\"stylesheet\" href=\"css/styles.css\">\r\n   <title>Login - TDWL News</title>\r\n</head>\r\n12. Single CSS File: \r\nIn the case of multi-page projects, we will adopt a single CSS file approach. Instead of creating separate CSS files for each page, we will consolidate all the CSS rules into one file. This practice streamlines the management and loading of styles across the project, promoting efficiency and ease of maintenance. Please check the difference between Component-based CSS for Components and Global CSS too under section In-project Instructions.\r\n________________\r\n\r\n\r\n\r\n\r\nIn-project Instructions\r\n\t\r\n\r\nOnce the project is underway, the team must remain dedicated and focused on achieving its objectives. The following instructions should guide the team throughout this phase:\r\n1. Meta Tags: \r\nWe will ensure that our web pages include the necessary meta tag for the viewport, which facilitates proper scaling and user interaction. The meta tag for the viewport should be defined as follows:\r\n<meta name=\"viewport\" content=\"width=device-width, user-scalable=1\">\r\n2. Path Handling:\r\nWhen incorporating paths to images, CSS, or JS files, it's essential to consider your current location and the location of the necessary file. For instance, if you're working within an HTML file and need to specify the image path in the \"src\" attribute of an image tag, the resulting image tag would resemble this.\r\n<img class=\"img-fluid\" src=\"images/logo.svg\" alt=\"Site Logo\" />\r\n1. Examples:\r\n   1.", "mimetype": "text/plain", "start_char_idx": 12685, "end_char_idx": 16975, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c24ccf3c-9850-41fb-81e0-6ccc15517d90": {"__data__": {"id_": "c24ccf3c-9850-41fb-81e0-6ccc15517d90", "embedding": null, "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\html-css-js.txt", "file_name": "html-css-js.txt", "file_type": "text/plain", "file_size": 49596, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a790d908-8f96-4280-a618-08f69c76e165", "node_type": "4", "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\html-css-js.txt", "file_name": "html-css-js.txt", "file_type": "text/plain", "file_size": 49596, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "hash": "b8885d1876d31c96f227379d720f05fa57d35c2a9382fd597cd249ec72cad067", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ec94caaf-69f7-4caa-aa59-eb332cd835cf", "node_type": "1", "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\html-css-js.txt", "file_name": "html-css-js.txt", "file_type": "text/plain", "file_size": 49596, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "hash": "3b054d27489e7bee7afc75ea3ebd0b143a10627cd0e2c1862ade92c4a0879677", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ebb08a95-d3bc-44e0-b639-02349f5997a7", "node_type": "1", "metadata": {}, "hash": "d85bd04619abe61d2ae8804289b35fb24b6a6098d020217455929dee0a6918be", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "________________\r\n\r\n\r\n\r\n\r\nIn-project Instructions\r\n\t\r\n\r\nOnce the project is underway, the team must remain dedicated and focused on achieving its objectives. The following instructions should guide the team throughout this phase:\r\n1. Meta Tags: \r\nWe will ensure that our web pages include the necessary meta tag for the viewport, which facilitates proper scaling and user interaction. The meta tag for the viewport should be defined as follows:\r\n<meta name=\"viewport\" content=\"width=device-width, user-scalable=1\">\r\n2. Path Handling:\r\nWhen incorporating paths to images, CSS, or JS files, it's essential to consider your current location and the location of the necessary file. For instance, if you're working within an HTML file and need to specify the image path in the \"src\" attribute of an image tag, the resulting image tag would resemble this.\r\n<img class=\"img-fluid\" src=\"images/logo.svg\" alt=\"Site Logo\" />\r\n1. Examples:\r\n   1. Adding an image to background of a certain div in CSS the image will be linked as: \r\n.home-banner .banner-lottie-holder{background-image: url(\"../images/yapiee-curve.svg\");}\r\n\r\n\r\nNote: For .NET developers, they must use absolute paths for CSS or JS as ~/foldername/file.js instead of /foldername/file.js.\r\n \r\n3. CSS Hierarchy:\r\nWhen managing multiple CSS files, we will prioritize the organization of our custom styles file (styles.css) by calling it at the last level. This hierarchy should be consistently followed in React or Angular projects, where the styles file must be imported at the end of each component. For a visual guide, please refer to the images under the Title and Favicon heading.\r\n<head>\r\n<meta charset=\"UTF-8\">\r\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n<link rel=\"stylesheet\" type=\"text/css\" href=\"css/bootstrap.min.css\" />\r\n<link rel=\"stylesheet\" type=\"text/css\" href=\"css/all.min.css\" />\r\n<link rel=\"stylesheet\" type=\"text/css\" href=\"css/styles.css\" />\r\n<title>Yapiee</title>\r\n</head>\r\n4. JS Hierarchy:\r\nWhen working with multiple JS files, we will ensure that all JS files are called at the end of the page, just before the closing body tag. Following a specific sequence, we will call jQuery first, followed by other JS libraries, and finally, our custom JS file. This ordering optimizes the loading and execution of scripts. To visualize this arrangement, kindly refer to the images under the Title and Favicon heading.\r\n</div>\r\n<script src=\"js/jquery.js\"></script>\r\n<script src=\"js/bootstrap.min.js\"></script>\r\n<script src=\"js/bootstrap.bundle.min.js\"></script>\r\n<script src=\"js/custom.js\"></script>\r\n</body>\r\n</html>\r\n5. Body Background Color:\r\nSet the body's background color based on the design; if the design features a white background, apply a black background to the body and a white background color to the section.\r\n6. Semantic Elements for HTML: \r\nWe will embrace semantic tags when structuring our HTML, utilizing elements such as Header, Nav, Main, Aside, Footer, Section, Blockquotes, Time, and more. Leveraging these semantic elements enhances the clarity and structure of our HTML code, making it more accessible and SEO-friendly.\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n   <meta charset=\"UTF-8\">\r\n   <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n   <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\r\n   <link rel=\"icon\" href=\"images/favicon.ico\" />\r\n   <link rel=\"stylesheet\" href=\"css/styles.css\">\r\n   <title>Site Title</title>\r\n</head>\r\n<body>\r\n   <div class=\"wrapper\">\r\n       <header id=\"header\">\r\n           <nav id=\"nav\">\r\n             \u2026\r\n           </nav>\r\n       </header>\r\n       <main id=\"main\">\r\n           <aide id=\"sidebar\">\r\n           </aide>\r\n           <section id=\"banner\">\r\n           </section>\r\n           all other sections of the page\r\n       </main>\r\n       <footer id=\"footer\">\r\n                \u2026\r\n       </footer>\r\n   </div>\r\n</body>\r\n</html>\r\n\r\n\r\n7. Heading Tags: \r\nTo create well-structured and accessible content, we will adhere to the proper usage of heading tags. A single page should have only one <h1> tag, which signifies the main heading. However, we are free to utilize other heading tags (h2-h6) multiple times on a single page for appropriate subsections. This approach ensures a clear content hierarchy and assists both users and search engines in understanding the page's structure effectively.", "mimetype": "text/plain", "start_char_idx": 16040, "end_char_idx": 20473, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ebb08a95-d3bc-44e0-b639-02349f5997a7": {"__data__": {"id_": "ebb08a95-d3bc-44e0-b639-02349f5997a7", "embedding": null, "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\html-css-js.txt", "file_name": "html-css-js.txt", "file_type": "text/plain", "file_size": 49596, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a790d908-8f96-4280-a618-08f69c76e165", "node_type": "4", "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\html-css-js.txt", "file_name": "html-css-js.txt", "file_type": "text/plain", "file_size": 49596, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "hash": "b8885d1876d31c96f227379d720f05fa57d35c2a9382fd597cd249ec72cad067", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c24ccf3c-9850-41fb-81e0-6ccc15517d90", "node_type": "1", "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\html-css-js.txt", "file_name": "html-css-js.txt", "file_type": "text/plain", "file_size": 49596, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "hash": "79fae0ae267c184a565759f28871a90d83763ae44a945487237f41a8c1f0dcf8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1a3f4180-f833-423d-bc78-372260745bbe", "node_type": "1", "metadata": {}, "hash": "88aa30d6633180ede67c33882dabb24463d77dbb8573e9badb6464d5444b6ee0", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Heading Tags: \r\nTo create well-structured and accessible content, we will adhere to the proper usage of heading tags. A single page should have only one <h1> tag, which signifies the main heading. However, we are free to utilize other heading tags (h2-h6) multiple times on a single page for appropriate subsections. This approach ensures a clear content hierarchy and assists both users and search engines in understanding the page's structure effectively.\r\nUse W3C validator and document outline.\r\n1. Examples:\r\n   1. Good Practice:\r\n<section>\r\n   <h1>Heading Level 1</h1>\r\n   <section>\r\n       <h2>Heading Level 2</h2>\r\n   </section>\r\n   <section>\r\n       <h2>Heading Level 2</h2>\r\n       <section>\r\n           <h3>Heading Level 3</h3>\r\n       </section>\r\n   </section>\r\n</section>\r\n\r\n\r\n   2. Bad Practice:\r\n<section>\r\n   <h1>Heading Level 1</h1>\r\n   <section>\r\n       <h1>Heading Level 2</h1>\r\n   </section>\r\n   <section>\r\n       <h1>Heading Level 2</h1>\r\n       <section>\r\n           <h1>Heading Level 3</h1>\r\n       </section>\r\n   </section>\r\n</section>\r\n\r\n\r\n8. Self-Closing Tags: \r\nFor self-closing tags, we will ensure to add a forward slash ( / ) at the closing of the tag. For example, in the case of an image tag, we will use the following format:        \r\n<img src=\"path to logo\" alt=\"Site Logo\" />\r\n\r\n\r\nThis practice reinforces consistency and adheres to the correct syntax for self-closing tags, making our code more structured and compliant with HTML standards.\r\n1. Examples:\r\n   1. Good Practice:\r\n<div class=\"login-logo-holder text-center\">\r\n   <strong class=\"login-logo\">\r\n       <a href=\"#\">\r\n           <img src=\"images/login-logo.png\" alt=\"TDWLNews Logo\" />\r\n       </a>\r\n   </strong>\r\n</div>\r\n\r\n\r\n<form class=\"login-form tdwl-form\" action=\"index.html\" method=\"POST\">\r\n   <div class=\"form-group\">\r\n       <input class=\"form-control\" type=\"text\" placeholder=\"username/email\" />\r\n   </div>\r\n   <div class=\"form-group\">\r\n       <input class=\"form-control\" type=\"password\" placeholder=\"Password\" />\r\n   </div>\r\n   <div class=\"btn-holder\">\r\n       <button class=\"btn btn-primary\" type=\"submit\">Login</button>\r\n   </div>\r\n   <div class=\"chekbox-holder\">\r\n       <label class=\"checkbox-label\">Remember me\r\n           <input type=\"checkbox\" />\r\n           <span class=\"checkmark\"></span>\r\n       </label>\r\n   </div>\r\n</form>\r\n\r\n\r\n   2. Bad Practice:\r\n<div class=\"login-logo-holder text-center\">\r\n   <strong class=\"login-logo\">\r\n       <a href=\"#\">\r\n           <img src=\"images/login-logo.png\" alt=\"TDWLNews Logo\">\r\n       </a>\r\n   </strong>\r\n</div>\r\n\r\n\r\n<form class=\"login-form tdwl-form\" action=\"index.html\" method=\"POST\">\r\n   <div class=\"form-group\">\r\n       <input class=\"form-control\" type=\"text\" placeholder=\"username/email\">\r\n   </div>\r\n   <div class=\"form-group\">\r\n       <input class=\"form-control\" type=\"password\" placeholder=\"Password\">\r\n   </div>\r\n   <div class=\"btn-holder\">\r\n       <button class=\"btn btn-primary\" type=\"submit\">Login</button>\r\n   </div>\r\n   <div class=\"chekbox-holder\">\r\n       <label class=\"checkbox-label\">Remember me\r\n           <input type=\"checkbox\">\r\n           <span class=\"checkmark\"></span>\r\n       </label>\r\n   </div>\r\n</form>\r\n9. Alt of Image:\r\nWe must add an alt attribute to the image tag and it should contain the text defining the image (see the images under heading Self-Closing Tags).\r\n<img src=\"path to logo\" alt=\"Site Logo\" />\r\n\r\n\r\n10. Image Styling:\r\n1. When dealing with images, we will ensure they are appropriately wrapped within a div element or positioned as the sole child of their parent. \r\n2. For responsive images, we will apply the properties width: 100% and height: auto to the image while setting the desired width for the parent div.\r\n3. In cases where images are part of a grid structure, we will set the width and height for the parent div, while applying width: 100% and height: 100% to the image itself.", "mimetype": "text/plain", "start_char_idx": 20016, "end_char_idx": 23899, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "1a3f4180-f833-423d-bc78-372260745bbe": {"__data__": {"id_": "1a3f4180-f833-423d-bc78-372260745bbe", "embedding": null, "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\html-css-js.txt", "file_name": "html-css-js.txt", "file_type": "text/plain", "file_size": 49596, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a790d908-8f96-4280-a618-08f69c76e165", "node_type": "4", "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\html-css-js.txt", "file_name": "html-css-js.txt", "file_type": "text/plain", "file_size": 49596, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "hash": "b8885d1876d31c96f227379d720f05fa57d35c2a9382fd597cd249ec72cad067", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ebb08a95-d3bc-44e0-b639-02349f5997a7", "node_type": "1", "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\html-css-js.txt", "file_name": "html-css-js.txt", "file_type": "text/plain", "file_size": 49596, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "hash": "873f68bce9142ca4d0a70399a60150fd643e1b41af423c1965349a783700b9dc", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "352a001a-f166-4f43-a3f3-5b547e641e79", "node_type": "1", "metadata": {}, "hash": "670a25e0e1e36a556bf846999bfafc454c7ba06c969dc172b06ecd51c5ba82fb", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Alt of Image:\r\nWe must add an alt attribute to the image tag and it should contain the text defining the image (see the images under heading Self-Closing Tags).\r\n<img src=\"path to logo\" alt=\"Site Logo\" />\r\n\r\n\r\n10. Image Styling:\r\n1. When dealing with images, we will ensure they are appropriately wrapped within a div element or positioned as the sole child of their parent. \r\n2. For responsive images, we will apply the properties width: 100% and height: auto to the image while setting the desired width for the parent div.\r\n3. In cases where images are part of a grid structure, we will set the width and height for the parent div, while applying width: 100% and height: 100% to the image itself. Additionally, we will utilize the object-fit property with the values cover or contain on the parent div to achieve the desired display. \r\n4. For a visual representation, kindly refer to the images under the Self-Closing Tags heading.\r\n\r\n\r\n11. Minimize Image Usage:\r\nTo optimize our project's performance, we aim to reduce the reliance on images wherever possible. We will endeavor to implement as much as we can using CSS, leveraging its capabilities to achieve the desired visual elements. In particular, we will avoid using images for social icons, opting instead to create them using CSS. By adopting this approach, we can enhance loading times and overall efficiency, contributing to a smoother and faster user experience.\r\n1. Examples:\r\n   1. Good Practice:\r\n<ul class=\"contact-details list-unstyled\">\r\n   <li>\r\n       <i class=\"fa fa-phone\"></i>\r\n       <a href=\"callto:+923333333333\">+92 333 3333 333</a>\r\n   </li>\r\n   <li>\r\n       <i class=\"fa fa-envelope\"></i>\r\n       <a href=\"mailto:contact@companyName.com\">contact@companyname.com</a>\r\n   </li>\r\n   <li>\r\n       <i class=\"fa fa-map-marker\"></i>\r\n       <span>lorem ipsum dolor set ammet, lorem sed ut perspiciatis</span>\r\n   </li>\r\n</ul>\r\n\r\n\r\n  \r\n\r\n\r\n\r\n12. Custom Buttons:\r\n1. In our project, we will avoid utilizing Bootstrap's predefined classes like btn-primary or btn-secondary for buttons. Instead, we will create our custom classes, such as btn-filled and btn-outlined, tailored to our specific design needs. These custom classes will be declared at the top of the styles.css or App.css file under the comment \u201ccustom classes\u201d.\r\n2. Moreover, when working on a React project, we will take special care to define the hover, focus, and active states for these custom buttons.\r\n3. Examples:\r\n   1. Good Practice:\r\n<div class=\"d-flex justify-content-center btn-holder\">\r\n   <button type=\"submit\" class=\"btn btn-filled\"></button>\r\n</div>\r\n\r\n\r\n   2. Bad Practice:\r\n<div class=\"d-flex justify-content-center btn-holder\">\r\n   <button type=\"submit\" class=\"btn btn-primary\"></button>\r\n</div>\r\n\r\n\r\n13. Hover Enhancements:\r\n1. To make our project more interactive and user-friendly, we will add hover effects to every clickable element.\r\n2. Must add the styles for active states for links.\r\n3. Only the necessary style changes will be applied on hover while leaving other properties unchanged in the default element style.\r\n\r\n\r\n14. Seamless Transitions:\r\n1. To enhance the overall user experience, we will incorporate smooth transitions for all animated elements and hovers in our project. \r\n2. These transitions will be added to the default styles, ensuring that the effects are consistently applied, not limited to hover styles.\r\n\r\n\r\n15. Buttons Vs Anchors:\r\n1. Buttons are utilized when an action is triggered upon clicking, but the page remains unchanged.\r\n   1. Examples include slider navigation arrows, newsletter subscription submit buttons and sign-up forms.\r\n   2. In the case of a successful login, developers may redirect the route programmatically.\r\n2. On the other hand, anchors are used when the intention is to navigate to a different page or external domain.\r\n   1. For instance, links in the main menu, and footer links like \"about us,\" \"contact us,\" \"services,\" \"gallery,\" and \"blogs\" would be implemented as anchors.\r\n3. Additionally, when linking to external domains, consider adding the target=\"_blank\" attribute to ensure the link opens in a new tab or window.\r\n4. It is essential to adhere to proper syntax guidelines and must avoid:\r\n   1. Nesting anchors inside anchors\r\n   2. Buttons inside anchors\r\n   3. Anchors inside buttons\r\n   4. Buttons inside buttons\r\n5.", "mimetype": "text/plain", "start_char_idx": 23200, "end_char_idx": 27545, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "352a001a-f166-4f43-a3f3-5b547e641e79": {"__data__": {"id_": "352a001a-f166-4f43-a3f3-5b547e641e79", "embedding": null, "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\html-css-js.txt", "file_name": "html-css-js.txt", "file_type": "text/plain", "file_size": 49596, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a790d908-8f96-4280-a618-08f69c76e165", "node_type": "4", "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\html-css-js.txt", "file_name": "html-css-js.txt", "file_type": "text/plain", "file_size": 49596, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "hash": "b8885d1876d31c96f227379d720f05fa57d35c2a9382fd597cd249ec72cad067", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1a3f4180-f833-423d-bc78-372260745bbe", "node_type": "1", "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\html-css-js.txt", "file_name": "html-css-js.txt", "file_type": "text/plain", "file_size": 49596, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "hash": "ce979d970f9e5639d4fcc918400f8783f595b58ea31390a4a176075817ebdc5b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "89834ba8-f5da-4a93-8111-1214f056c8d1", "node_type": "1", "metadata": {}, "hash": "a2672ba65968b0559631715e6e11de7153291958615de450114f9854b105099b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "1. Examples include slider navigation arrows, newsletter subscription submit buttons and sign-up forms.\r\n   2. In the case of a successful login, developers may redirect the route programmatically.\r\n2. On the other hand, anchors are used when the intention is to navigate to a different page or external domain.\r\n   1. For instance, links in the main menu, and footer links like \"about us,\" \"contact us,\" \"services,\" \"gallery,\" and \"blogs\" would be implemented as anchors.\r\n3. Additionally, when linking to external domains, consider adding the target=\"_blank\" attribute to ensure the link opens in a new tab or window.\r\n4. It is essential to adhere to proper syntax guidelines and must avoid:\r\n   1. Nesting anchors inside anchors\r\n   2. Buttons inside anchors\r\n   3. Anchors inside buttons\r\n   4. Buttons inside buttons\r\n5. Examples:\r\n   1. Good Practice:\r\n<div class=\"btn-holder text-center\">\r\n   <a class=\"btn btn-filled\" href=\"#\">\r\n       text\r\n   </a>\r\n   <a class=\"btn btn-filled\" href=\"#\">\r\n       <span>text</span>\r\n   </a>\r\n   <button class=\"btn btn-filled\">\r\n       text\r\n   </button>\r\n   <button class=\"btn btn-filled\">\r\n       <span>text</span>\r\n   </button>\r\n</div>\r\n\r\n\r\n   2. Bad Practice:\r\n<div class=\"btn-holder text-center\">\r\n   <a class=\"btn btn-filled\" href=\"#\">\r\n       <button>text</button>\r\n   </a>\r\n   <a class=\"btn btn-filled\" href=\"#\">\r\n       <a href=\"#\">text</a>\r\n   </a>\r\n   <button class=\"btn btn-filled\">\r\n       <button>text</button>\r\n   </button>\r\n   <button class=\"btn btn-filled\">\r\n       <a href=\"#\">text</a>\r\n   </button>\r\n</div>\r\n16. Input and Textarea Styling:\r\nTo ensure a consistent and visually appealing design, we will follow these guidelines for input and textarea elements:\r\n\r\n\r\n1. Wrapper or Sole Child:\r\nWe will either wrap the input/textarea within a div element or make it the only child of its parent. This helps maintain a clean and organized code structure.\r\n\r\n\r\n2. Width Adjustment:\r\nWe will apply width: 100% to the input/textarea to ensure it occupies the entire available space. Additionally, we will set the width of the parent element according to the design requirements.\r\n\r\n\r\n3. Focus Styling:\r\nTo enhance user experience, we will define the focus state for input and textarea elements. This includes adjusting the input's placeholder text color and setting focus styles to make the elements more visually engaging when interacted with.\r\n        \r\n4. Textarea Resizing:\r\nFor textarea elements, we will set the resize property to none to prevent users from resizing the textarea manually.\r\n\r\n\r\nBy following these guidelines, our input and textarea elements will be styled consistently and contribute to an aesthetically pleasing and user-friendly interface. For a visual reference, please refer to the images under the Self-Closing Tags heading.\r\n\r\n\r\n17. Table Responsiveness:\r\nTo ensure our tables adapt well to various screen sizes, we will follow these steps:\r\n\r\n\r\n1. Table Wrapping:\r\nWe will wrap the table within a div element to provide a container.\r\n                \r\n2. Bootstrap Class (If Using Bootstrap):\r\nIf our project uses Bootstrap, we will apply the \"table-responsive\" class to the parent div. This class ensures that the table becomes horizontally scrollable on smaller screens, preventing content overflow.\r\n\r\n\r\n3. Overflow Property (If Not Using Bootstrap):\r\nIf we are not utilizing Bootstrap, we will apply \"overflow-x: auto\" to the parent div. This CSS property creates a horizontal scrollbar when the table's content exceeds the available width, making it accessible on smaller devices.\r\n\r\n\r\nBy implementing these approaches, we can make our tables responsive, enabling users to view the data comfortably across different devices and screen sizes.\r\n\r\n\r\n<div class=\"table-responsive\">\r\n   <table class=\"table\">\r\n       <thead>\r\n           <tr>\r\n               <th></th>\r\n               <th></th>\r\n           </tr>\r\n       </thead>\r\n       <tbody>\r\n           <tr>\r\n               <td></td>\r\n               <td></td>\r\n           </tr>\r\n       </tbody>\r\n   </table>\r\n</div>\r\n\r\n\r\n18. Checkboxes and Radio Buttons Styling:\r\n1. To achieve a consistent and visually appealing design, we will style checkboxes and radio buttons using CSS. They should not remain in their default appearance.\r\n2. We can refer to tutorials like How to Create a Custom Checkbox and a Radio Button to learn how to implement custom styles for these form elements. \r\n3.", "mimetype": "text/plain", "start_char_idx": 26720, "end_char_idx": 31140, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "89834ba8-f5da-4a93-8111-1214f056c8d1": {"__data__": {"id_": "89834ba8-f5da-4a93-8111-1214f056c8d1", "embedding": null, "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\html-css-js.txt", "file_name": "html-css-js.txt", "file_type": "text/plain", "file_size": 49596, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a790d908-8f96-4280-a618-08f69c76e165", "node_type": "4", "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\html-css-js.txt", "file_name": "html-css-js.txt", "file_type": "text/plain", "file_size": 49596, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "hash": "b8885d1876d31c96f227379d720f05fa57d35c2a9382fd597cd249ec72cad067", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "352a001a-f166-4f43-a3f3-5b547e641e79", "node_type": "1", "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\html-css-js.txt", "file_name": "html-css-js.txt", "file_type": "text/plain", "file_size": 49596, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "hash": "5476083b4d2bd782caddb0ad1617c564d444d0012bf6ac9a829159f946ab4e1f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1c7c8e3e-1c4a-4187-8900-54f096f97d05", "node_type": "1", "metadata": {}, "hash": "bee2d60ee4351a2ce6f4c08116e77ad9ccb8e74437c05ba6db188f8f709118a1", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "By implementing these approaches, we can make our tables responsive, enabling users to view the data comfortably across different devices and screen sizes.\r\n\r\n\r\n<div class=\"table-responsive\">\r\n   <table class=\"table\">\r\n       <thead>\r\n           <tr>\r\n               <th></th>\r\n               <th></th>\r\n           </tr>\r\n       </thead>\r\n       <tbody>\r\n           <tr>\r\n               <td></td>\r\n               <td></td>\r\n           </tr>\r\n       </tbody>\r\n   </table>\r\n</div>\r\n\r\n\r\n18. Checkboxes and Radio Buttons Styling:\r\n1. To achieve a consistent and visually appealing design, we will style checkboxes and radio buttons using CSS. They should not remain in their default appearance.\r\n2. We can refer to tutorials like How to Create a Custom Checkbox and a Radio Button to learn how to implement custom styles for these form elements. \r\n3. By customizing their appearance, we can enhance the user experience and ensure checkboxes and radio buttons seamlessly blend with our project's overall design.\r\n\r\n\r\n19. Select Tag Styling:\r\n1. We will always style select tag, when we do a simple HTML/CSS project style the select using selec2.js.\r\n2. When we are doing a ReactJS project we have to use the react-select package. While using the select from a react-select package, must assign a custom class to it and style it with respect to that custom class. A custom class should be custom-select and assigned it like classNamePrefix=\u201ccustom-select\u201d (if the select is the same throughout the project). If select is not having the same styles throughout the project, then use custom classes with respect to form, for the contact form the select should have the class contact-custom-select. Assign these custom classes on the top of the styles.css/App.css file under the comment custom classes.\r\n3. Note: there should be only one class in classNamePrefix. Writing like classNamePrefix=\u201ccustom-select contact-select\u201d is wrong.\r\n\r\n\r\n20. Direct Tag Styling:\r\nWe will avoid styling tags directly, such as img, input, button, span, form, and table. Instead, we will always utilize custom classes for these tags to maintain a consistent and organized approach to our styling.\r\nul {\r\n font-size: 14px;\r\n line-height: 18px;\r\n color: #000;\r\n margin: 0 0 30px;\r\n}\r\nul li {\r\n padding: 0 0 0 30px;\r\n margin: 0 0 15px;\r\n}\r\nul a {\r\n color: #f00;\r\n text-transform: uppercase;\r\n}\r\n\r\n\r\n21. Container vs. Container Fluid:\r\nIt is crucial to understand the distinction between \"container\" and \"container-fluid\" and how to use them effectively in our projects.\r\n\r\n\r\n1. Container: \r\n   1. The \"container\" class in Bootstrap creates \"vaiable width container\" in terms of max-width, that vary with respect to each breakpoint defined by bootstrap along with right and left paddings.\r\n   2. The \"container\" class is typically used for a contained layout where content is constrained within a specific width.\r\n\r\n\r\n2. Container Fluid:\r\n   1. On the other hand \"container-fluid\" class in Bootstrap creates a \"full width container\", on all breakpoints along with right and left paddings. This class will take the full width of its parent wherever it is called.\r\n3. Purpose of .row:\r\n   1. In both \"container\" and \"container-fluid\" we use the \".row\" class to create horizontal rows for content placement.\r\n   2. The \".row\" class applies the necessary margins and negative margins to properly align and space out the columns inside it.\r\n   3. Columns within a \".row\" are designed to work with the 12-column grid system in Bootstrap, allowing us to create responsive layouts with various column configurations.\r\n\r\n\r\n22. Row & Col:\r\nWhile using Bootstrap we will never use .row without .col, and never use .col inside .col as a direct child, for .col inside .col we will use .row in between .col.\r\n1. Examples:\r\n   1.", "mimetype": "text/plain", "start_char_idx": 30294, "end_char_idx": 34075, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "1c7c8e3e-1c4a-4187-8900-54f096f97d05": {"__data__": {"id_": "1c7c8e3e-1c4a-4187-8900-54f096f97d05", "embedding": null, "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\html-css-js.txt", "file_name": "html-css-js.txt", "file_type": "text/plain", "file_size": 49596, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a790d908-8f96-4280-a618-08f69c76e165", "node_type": "4", "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\html-css-js.txt", "file_name": "html-css-js.txt", "file_type": "text/plain", "file_size": 49596, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "hash": "b8885d1876d31c96f227379d720f05fa57d35c2a9382fd597cd249ec72cad067", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "89834ba8-f5da-4a93-8111-1214f056c8d1", "node_type": "1", "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\html-css-js.txt", "file_name": "html-css-js.txt", "file_type": "text/plain", "file_size": 49596, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "hash": "7665f0c75cf1931233eb73ef2361678ede53256acb9b4dd4dd52ffb0d4b03195", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b115f542-3656-4e9e-a713-d489728dcba6", "node_type": "1", "metadata": {}, "hash": "8c7ac239d8a0ad0b6c6b809848ffca6c3de0789ffeb4e2a30a35569fbdc5c30c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "This class will take the full width of its parent wherever it is called.\r\n3. Purpose of .row:\r\n   1. In both \"container\" and \"container-fluid\" we use the \".row\" class to create horizontal rows for content placement.\r\n   2. The \".row\" class applies the necessary margins and negative margins to properly align and space out the columns inside it.\r\n   3. Columns within a \".row\" are designed to work with the 12-column grid system in Bootstrap, allowing us to create responsive layouts with various column configurations.\r\n\r\n\r\n22. Row & Col:\r\nWhile using Bootstrap we will never use .row without .col, and never use .col inside .col as a direct child, for .col inside .col we will use .row in between .col.\r\n1. Examples:\r\n   1. Good Practice:\r\n<header id=\"header\">\r\n   <div class=\"container\">\r\n       <div class=\"row\">\r\n           <div class=\"col\">\r\n               <h2>This is heading</h2>\r\n           </div>\r\n           <div class=\"row\">\r\n               <div class=\"col\">\r\n                   <h2>This is heading</h2>\r\n               </div>\r\n               <div class=\"col\">\r\n                   <div class=\"row\">\r\n                       <div class=\"col\">\r\n                           <h2>This is heading</h2>\r\n                       </div>\r\n                       <div class=\"col\">\r\n                           <h2>this is heading</h2>\r\n                       </div>\r\n                   </div>\r\n               </div>\r\n           </div>\r\n       </div>\r\n   </div>\r\n</header>\r\n\r\n\r\n   2. Bad Practice:\r\n<header id=\"header\">\r\n   <div class=\"container\">\r\n       <div class=\"row\">\r\n           <h2>This is heading</h2>\r\n       </div>\r\n   </div>\r\n   <div class=\"row\">\r\n       <h2>This is heading</h2>\r\n   </div>\r\n   <div class=\"container\">\r\n       <div class=\"col\">\r\n           <h2>This is heading</h2>\r\n       </div>\r\n   </div>\r\n</header>\r\n\r\n\r\n23. Bootstrap Classes:\r\nWe should know the difference between different versions of Bootstrap. We will use a maximum of bootstrap classes, we will not re-declare the styles in our css like d-flex, d-sm-flex, text-uppercase, text-center, etc.\r\n\r\n\r\n24. Page Linking:\r\nWhile doing a multiple-page project we have to link the pages where required.\r\n1. Examples:\r\n   1. Good Practice:\r\n<ul class=\"navbar-nav\">\r\n   <li class=\"nav-item\"><a class=\"nav-link\" href=\"index.html\">Home</a></li>\r\n   <li class=\"nav-item\"><a class=\"nav-link\" href=\"index.html\">Home2</a></li>\r\n   <li class=\"nav-item\"><a class=\"nav-link\" href=\"advertisers.html\">Advertisers</a></li>\r\n   <li class=\"nav-item\"><a class=\"nav-link\" href=\"publishers.html\">Publishers</a></li>\r\n   <li class=\"nav-item\"><a class=\"nav-link\" href=\"resource.html\">Resource</a></li>\r\n   <li class=\"nav-item\"><a class=\"nav-link\" href=\"contact-us.html\">Contact Us</a></li>\r\n</ul>\r\n\r\n\r\n   2. Bad Practice:\r\n<ul class=\"navbar-nav\">\r\n   <li class=\"nav-item\"><a class=\"nav-link\" href=\"#\">Home</a></li>\r\n   <li class=\"nav-item\"><a class=\"nav-link\" href=\"#\">Home2</a></li>\r\n   <li class=\"nav-item\"><a class=\"nav-link\" href=\"#\">Advertisers</a></li>\r\n   <li class=\"nav-item\"><a class=\"nav-link\" href=\"#\">Publishers</a></li>\r\n   <li class=\"nav-item\"><a class=\"nav-link\" href=\"@\">Resource</a></li>\r\n   <li class=\"nav-item\"><a class=\"nav-link\" href=\"#\">Contact Us</a></li>\r\n</ul>\r\n\r\n\r\n25. Manifest.json\r\nWhen working with any JavaScript framework, ensure to initially modify the Manifest.json file. Adjust the values of short_name, name, and icons accordingly.\r\n\r\n\r\n26. React/Angular Packages:\r\nWhen we are doing HTML/CSS for React/Angular projects, we will not use third-party js libraries, instead we will consult with our respective developers and will always use packages supported by react.js and angular.js.\r\n\r\n\r\n27. React Bootstrap:\r\nWhile doing HTML/CSS for React projects we will use \u201cReact Bootstrap\u201d, and when React Bootstrap is used, we will use the maximum of its components and we will not copy code from Bootstrap\u2019s website in that case.", "mimetype": "text/plain", "start_char_idx": 33350, "end_char_idx": 37260, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b115f542-3656-4e9e-a713-d489728dcba6": {"__data__": {"id_": "b115f542-3656-4e9e-a713-d489728dcba6", "embedding": null, "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\html-css-js.txt", "file_name": "html-css-js.txt", "file_type": "text/plain", "file_size": 49596, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a790d908-8f96-4280-a618-08f69c76e165", "node_type": "4", "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\html-css-js.txt", "file_name": "html-css-js.txt", "file_type": "text/plain", "file_size": 49596, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "hash": "b8885d1876d31c96f227379d720f05fa57d35c2a9382fd597cd249ec72cad067", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1c7c8e3e-1c4a-4187-8900-54f096f97d05", "node_type": "1", "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\html-css-js.txt", "file_name": "html-css-js.txt", "file_type": "text/plain", "file_size": 49596, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "hash": "082b9ae50e21db832057da86fceeab4881bc9726c08d5e572affabf023b4a9da", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9f6ce96b-dffb-4560-81e7-681f8683b892", "node_type": "1", "metadata": {}, "hash": "fff9afeb653eb6f1d33d6f2f63bafe5272c0d03ba4bee62eeb8108aeec1da046", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Manifest.json\r\nWhen working with any JavaScript framework, ensure to initially modify the Manifest.json file. Adjust the values of short_name, name, and icons accordingly.\r\n\r\n\r\n26. React/Angular Packages:\r\nWhen we are doing HTML/CSS for React/Angular projects, we will not use third-party js libraries, instead we will consult with our respective developers and will always use packages supported by react.js and angular.js.\r\n\r\n\r\n27. React Bootstrap:\r\nWhile doing HTML/CSS for React projects we will use \u201cReact Bootstrap\u201d, and when React Bootstrap is used, we will use the maximum of its components and we will not copy code from Bootstrap\u2019s website in that case.\r\n<div class=\"col-12\">\r\n   <div class=\"page-banner-text d-none d-md-block\">\r\n       <h1 class=\"d-flex justify-content-center align-items-center py-2 py-md-4 mb-3 mb-md-5\">Let's Talk</h1>\r\n       <p>Lorem ipsum dolor sit amet, set du Ascension jake</p>\r\n   </div>\r\n</div>\r\n\r\n\r\n28. Responsive:\r\nWhile doing responsive we will write only those properties in media queries which need to be changed; we will not write all the properties of a certain selector.\r\n1. Examples:\r\n   1. Good Practice:\r\nh1 {\r\n font-size: 24px;\r\n line-height: 28px;\r\n color: #ec4545;\r\n text-transform: uppercase;\r\n}\r\n@media (max-width: 767px) {\r\n h1 {\r\n   font-size: 20px;\r\n   line-height: 24px;\r\n }\r\n}\r\n\r\n\r\n   2. Bad Practice:\r\nh1 {\r\n font-size: 24px;\r\n line-height: 28px;\r\n color: #ec4545;\r\n text-transform: uppercase;\r\n}\r\n@media (max-width: 767px) {\r\n h1 {\r\n   font-size: 20px;\r\n   line-height: 24px;\r\n   color: #ec4545;\r\n   text-transform: uppercase;\r\n }\r\n}\r\n\r\n\r\n29. Responsive Breakpoints and Media Queries:\r\nWhen implementing responsive design, it is a common practice to set the media query one pixel less than the desired breakpoint. This approach ensures that the styles defined within the media query take effect just before the actual breakpoint is reached.\r\n1. Examples:\r\nIf we want a breakpoint at 768 pixels, we will set the media query at 767 pixels. This ensures that the responsive styles within the media query will be applied as soon as the screen size reaches 767 pixels, making the transition smoother and avoiding any potential layout issues.\r\n   1. Good Practice:\r\n@media (max-width: 1399px) {\r\n}\r\n@media (max-width: 1199px) {\r\n}\r\n@media (max-width: 991px) {\r\n}\r\n@media (max-width: 767px) {\r\n}\r\n@media (max-width: 575px) {\r\n}\r\n\r\n\r\n   2. Bad Practice:\r\n@media (max-width: 1400px) {\r\n}\r\n@media (max-width: 1200px) {\r\n}\r\n@media (max-width: 992px) {\r\n}\r\n@media (max-width: 768px) {\r\n}\r\n@media (max-width: 576px) {\r\n}\r\n\r\n\r\n30. Section by Section:\r\nWhile doing responsive we have to make responsive section by section not page by page. When we make a header for the desktop, we will make it responsive up to 280px, then go for a banner, and so on.\r\n\r\n\r\n31. Extra Lines:\r\nThere should not be extra lines or extra comments in any of our files whether it is css or html file.\r\n\r\n\r\n32. Custom Classes:\r\nIn the styles file, at the top make custom classes for font families with font family names like \u201cff-open sans\u201d, and ff-roboto. and for font weights use bootstrap classes like font-weight-bold and font-weight-light. If Bootstrap is not being used, use other frameworks classes or define your custom classes for weight like Bootstrap weight classes.\r\n\r\n\r\n33. Avoid !important:\r\nThe use of !important in our CSS is strictly prohibited, except in specific cases where it is necessary to override styles coming from JavaScript libraries. In all other situations, we should avoid using !important.\r\n\r\n\r\nIf we need to use !important, we should reevaluate our CSS rules and selectors to make them stronger and more specific. By creating more robust and targeted rules, we can achieve the desired styling without relying on !important, ensuring a cleaner and more maintainable codebase.\r\n\r\n\r\n34. Avoid Line Break Tags:\r\nIt is recommended to refrain from using the line break (<br />) tag to break lines in our content. Instead, we should adopt a more structured approach by wrapping the text in a block-level element and assigning it a specific width.", "mimetype": "text/plain", "start_char_idx": 36597, "end_char_idx": 40690, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "9f6ce96b-dffb-4560-81e7-681f8683b892": {"__data__": {"id_": "9f6ce96b-dffb-4560-81e7-681f8683b892", "embedding": null, "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\html-css-js.txt", "file_name": "html-css-js.txt", "file_type": "text/plain", "file_size": 49596, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a790d908-8f96-4280-a618-08f69c76e165", "node_type": "4", "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\html-css-js.txt", "file_name": "html-css-js.txt", "file_type": "text/plain", "file_size": 49596, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "hash": "b8885d1876d31c96f227379d720f05fa57d35c2a9382fd597cd249ec72cad067", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b115f542-3656-4e9e-a713-d489728dcba6", "node_type": "1", "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\html-css-js.txt", "file_name": "html-css-js.txt", "file_type": "text/plain", "file_size": 49596, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "hash": "8d46180a9819fa35f6d1bc776c32c48ba34f00144c3bf727132f2c8fcbefeedd", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ce6bdccd-4b7c-4ad5-8cb2-b10121813896", "node_type": "1", "metadata": {}, "hash": "17f4bbc9c2c24ffa5c5546821071aba65007dfb5d07134302835b30db19859be", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "If Bootstrap is not being used, use other frameworks classes or define your custom classes for weight like Bootstrap weight classes.\r\n\r\n\r\n33. Avoid !important:\r\nThe use of !important in our CSS is strictly prohibited, except in specific cases where it is necessary to override styles coming from JavaScript libraries. In all other situations, we should avoid using !important.\r\n\r\n\r\nIf we need to use !important, we should reevaluate our CSS rules and selectors to make them stronger and more specific. By creating more robust and targeted rules, we can achieve the desired styling without relying on !important, ensuring a cleaner and more maintainable codebase.\r\n\r\n\r\n34. Avoid Line Break Tags:\r\nIt is recommended to refrain from using the line break (<br />) tag to break lines in our content. Instead, we should adopt a more structured approach by wrapping the text in a block-level element and assigning it a specific width.\r\n\r\n\r\nUsing block-level elements and setting their width appropriately allows us to control the text layout and ensure proper line breaks without relying on line break tags.\r\n\r\n\r\n35. Single Class Rule: \r\nNever use a single class rule (the following screenshot shows the wrong rule structure), instead inherit it with its parent class/id.\r\n1. Examples:\r\n   1. Good Practice:\r\n.contact-form .upload {\r\n display: block;\r\n}\r\n.contact-form .email-error {\r\n font-size: 14px;\r\n}\r\n.contact-form .success {\r\n color: #00ff00;\r\n}\r\n.contact-form .error {\r\n color: #ff0000;\r\n}\r\n\r\n\r\n   2. Bad Practice:\r\n.upload {\r\n display: block;\r\n}\r\n.email-error {\r\n font-size: 14px;\r\n}\r\n.success {\r\n color: #00ff00;\r\n}\r\n.error {\r\n color: #ff0000;\r\n}\r\n36. Avoid Inline Styling:\r\nAs a best practice, we will refrain from using inline styling in our projects. Instead, we will utilize external CSS files or internal styles within the head section of the HTML document to apply styles to our elements. This separation of styles from the HTML structure improves code organization, maintainability, and reusability.\r\n1. Examples:\r\n   1. Good Practice:\r\n<div class=\"login-logo-holder text-center\">\r\n   <strong class=\"login-logo\">\r\n       <img src=\"images/logo.png\" alt=\"Site Logo\" />\r\n   </strong>\r\n</div>\r\n\r\n\r\n.login-logo {\r\n width: 120px;\r\n}\r\n.login-logo img {\r\n width: 100%;\r\n height: auto;\r\n}\r\n\r\n\r\n   2. Bad Practice:\r\n<div class=\"login-logo-holder text-center\">\r\n   <strong class=\"login-logo\">\r\n       <img src=\"images/logo.png\" alt=\"Site Logo\" style=\"width:126px;height:30px\" />\r\n   </strong>\r\n</div>\r\n\r\n\r\n37. Hex Color Codes:\r\nIn our CSS, we should primarily use hex value color codes for specifying colors. The hex format represents colors using a combination of six characters, typically digits (0-9) and letters (A-F), preceded by a hashtag (#). This format offers a wide range of color options and is widely supported across browsers.\r\n\r\n\r\nHowever, there may be instances where we need to use the rgba format, especially when transparency or opacity is required for a specific element. The rgba format allows us to specify the red, green, blue, and alpha (transparency) values of a color.\r\n\r\n\r\nIn general, sticking to hex color codes ensures consistency and simplicity in our CSS.\r\n\r\n\r\n38. Absolute Positioning:\r\nWe should not use an unnecessary position absolute, until or unless it is required.\r\n\r\n\r\n39. Utilize Flexbox:\r\nTo create a well-structured and flexible layout for our page, we will make maximum use of the \"display: flex\" property.\r\n\r\n\r\nFlexbox is a powerful CSS layout model that enables us to efficiently arrange and align elements within containers, adjusting dynamically to different screen sizes.\r\n\r\n\r\nBy employing Flexbox, we can easily achieve:\r\n1. Horizontal and vertical alignment of elements within containers.\r\n2. Equal distribution of space among multiple elements.\r\n3. Flexible resizing and reordering of elements based on screen size.\r\n4. Creating responsive designs with minimal media queries.\r\n\r\n\r\nFlexbox is a valuable tool for modern web development, allowing us to build complex layouts while maintaining simplicity and readability in our CSS code.\r\n\r\n\r\n40. Same Units:\r\nUse the same unit for the whole project mostly px, for example, all the paddings, margins, positioning offsets, width, and heights will be in px.\r\n\r\n\r\n41. Component-based CSS for Components:\r\nWe should write css on the base of each section like all css of the header should be at one place, while dealing with react, angular, or other js framework based projects, then write css component-based, for example, the css for header should be in header.css and this file should be on header folder along with header.js file.\r\n                                   \r\n42.", "mimetype": "text/plain", "start_char_idx": 39763, "end_char_idx": 44430, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ce6bdccd-4b7c-4ad5-8cb2-b10121813896": {"__data__": {"id_": "ce6bdccd-4b7c-4ad5-8cb2-b10121813896", "embedding": null, "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\html-css-js.txt", "file_name": "html-css-js.txt", "file_type": "text/plain", "file_size": 49596, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a790d908-8f96-4280-a618-08f69c76e165", "node_type": "4", "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\html-css-js.txt", "file_name": "html-css-js.txt", "file_type": "text/plain", "file_size": 49596, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "hash": "b8885d1876d31c96f227379d720f05fa57d35c2a9382fd597cd249ec72cad067", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9f6ce96b-dffb-4560-81e7-681f8683b892", "node_type": "1", "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\html-css-js.txt", "file_name": "html-css-js.txt", "file_type": "text/plain", "file_size": 49596, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "hash": "c7f24200030db0880b7ac12df08e8bea4fd4aba41c0a60366ac135bc09cc769f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a3d8ea2f-2e8d-43e1-8eab-ed596e1fad64", "node_type": "1", "metadata": {}, "hash": "9902bb9dae295778856e7c6c1854c23a3d4202a7b88f6cf7aa6e6ce83f82266f", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Horizontal and vertical alignment of elements within containers.\r\n2. Equal distribution of space among multiple elements.\r\n3. Flexible resizing and reordering of elements based on screen size.\r\n4. Creating responsive designs with minimal media queries.\r\n\r\n\r\nFlexbox is a valuable tool for modern web development, allowing us to build complex layouts while maintaining simplicity and readability in our CSS code.\r\n\r\n\r\n40. Same Units:\r\nUse the same unit for the whole project mostly px, for example, all the paddings, margins, positioning offsets, width, and heights will be in px.\r\n\r\n\r\n41. Component-based CSS for Components:\r\nWe should write css on the base of each section like all css of the header should be at one place, while dealing with react, angular, or other js framework based projects, then write css component-based, for example, the css for header should be in header.css and this file should be on header folder along with header.js file.\r\n                                   \r\n42. Global CSS:\r\nGlobal CSS means the styles which are common throughout the project and not related to any specific section. \r\n\r\n\r\nIn the case of ReactJS/Angular, when we have to write the global styles, write them on the top of styles.css or write them in the App.css file.\r\n\r\n\r\nFor .NET, the project should contain only one CSS file (i.e. style.css)\r\n\r\n\r\n43. Logical CSS Selector:\r\nWe have to write the logical selectors which means we should not write the lengthy selectors unnecessarily.\r\n   1. Good Practice:\r\n#header .social-links a{color:#fff;}\r\n   2. Bad Practice:\r\n#header div.header-top ul.social-links li a{color:#fff;}\r\n\r\n\r\n44. Utilize Transform for Animations:\r\nWhen implementing hover animations or transitioning values like width, height, top, right, and others, it is advisable to use transform properties instead. Transform properties, such as translate, scale, rotate, and skew, offer smoother and more efficient animations compared to directly animating width, height, and position properties.\r\n\r\n\r\nTransform-based animations not only provide smoother visuals but also ensure better compatibility across various browsers and devices.\r\n\r\n\r\n45. Serving Images and Static Files via CDN:\r\n1. To optimize the performance and availability of our website, we will serve images and static files through a Content Delivery Network (CDN).\r\n1. By utilizing a CDN for images and static files, we can benefit from the following advantages:\r\n   1. Improved Loading Times:\r\n      1. CDNs deliver content from servers closer to the user's location, reducing latency and improving the loading speed of images and static files.\r\n   2. Global Availability:\r\n      1. Content is replicated and cached across multiple servers worldwide, ensuring global availability and resilience.\r\n   3. Reduced Server Load:\r\n      1. Offloading image and file serving to a CDN reduces the burden on our web server, resulting in better overall performance.\r\n________________\r\n\r\n\r\n\r\n\r\n\r\n\r\nPost-project Instructions\r\n\t\r\n\r\nAs the project nears its completion, the team must focus on wrapping up all loose ends and delivering a successful outcome. The following instructions are crucial for this phase:\r\n\r\n\r\n1. Pixel Perfect:\r\nPrior to closing the project, it is essential to ensure that our design aligns perfectly with the original design provided. Aim for 100% accuracy in matching the pixel dimensions and visual elements.\r\n2. Auto-compressed Images:\r\nAll images used in the project should undergo automatic compression to optimize their size and reduce loading times. We can utilize an online compression tool available at tinyPNG to achieve this.\r\n3. Optimized CSS:\r\nOur CSS code should be optimized to ensure efficient loading and rendering of styles. Follow best practices and avoid any unnecessary code or redundancies.\r\n1. Examples:\r\n   1. Good Practice:\r\n.stats-section span{display:block;font-family: 'Courier New', Courier, monospace;}\r\n.stats-section .stat-name{font-size:20px;line-height:24px;margin:0 0 15px;}\r\n\r\n\r\n   2. Bad Practice:\r\n.stats-section span {\r\n display: block;\r\n font-family: \"Courier New\", Courier, monospace;\r\n}\r\n.stats-section .stat-name {\r\n font-size: 20px;\r\n line-height: 24px;\r\n margin: 0 0 15px;\r\n}\r\n4. Responsive and Cross-Browser:\r\nBefore final delivery, we must thoroughly test the project on various browsers such as Chrome, Firefox, Opera, Microsoft Edge, and Safari. Additionally, test on different operating systems, including Windows and Mac, and verify responsiveness across various mobile resolutions.\r\n\r\n\r\n5. Avoid Extra Files:\r\nThe project folder should not contain any extraneous files, such as additional images or fonts. Keeping the folder clean and focused enhances its organization.\r\n\r\n\r\n6.", "mimetype": "text/plain", "start_char_idx": 43435, "end_char_idx": 48152, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a3d8ea2f-2e8d-43e1-8eab-ed596e1fad64": {"__data__": {"id_": "a3d8ea2f-2e8d-43e1-8eab-ed596e1fad64", "embedding": null, "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\html-css-js.txt", "file_name": "html-css-js.txt", "file_type": "text/plain", "file_size": 49596, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a790d908-8f96-4280-a618-08f69c76e165", "node_type": "4", "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\html-css-js.txt", "file_name": "html-css-js.txt", "file_type": "text/plain", "file_size": 49596, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "hash": "b8885d1876d31c96f227379d720f05fa57d35c2a9382fd597cd249ec72cad067", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ce6bdccd-4b7c-4ad5-8cb2-b10121813896", "node_type": "1", "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\html-css-js.txt", "file_name": "html-css-js.txt", "file_type": "text/plain", "file_size": 49596, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "hash": "78622c187824fd66429554df16105caf8318fad0497a121a1b62af282c2537c5", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Bad Practice:\r\n.stats-section span {\r\n display: block;\r\n font-family: \"Courier New\", Courier, monospace;\r\n}\r\n.stats-section .stat-name {\r\n font-size: 20px;\r\n line-height: 24px;\r\n margin: 0 0 15px;\r\n}\r\n4. Responsive and Cross-Browser:\r\nBefore final delivery, we must thoroughly test the project on various browsers such as Chrome, Firefox, Opera, Microsoft Edge, and Safari. Additionally, test on different operating systems, including Windows and Mac, and verify responsiveness across various mobile resolutions.\r\n\r\n\r\n5. Avoid Extra Files:\r\nThe project folder should not contain any extraneous files, such as additional images or fonts. Keeping the folder clean and focused enhances its organization.\r\n\r\n\r\n6. Delivering the Project:\r\nWhen asked to send or upload project files, provide only the zipped folder containing the content from the \"markup\" folder. Design files should be included in a separate zipped folder and not shared unless specifically requested.\r\n7. Build and Upload:\r\nFor React projects, learn how to upload files on a server using FTP and how to create builds. To build a React project, run the command \"npm run build --prod\" in the root terminal, which generates a build folder at the root of the project.\r\n8. Code Review:\r\nBe aware that our code may undergo review at any stage of the project. With this in mind, be meticulous in writing every line of code to maintain a high standard of quality.\r\n________________\r\n\r\n\r\nConclusion:\r\nIn conclusion, adhering to the established guidelines and best practices is paramount in ensuring the successful execution of our projects. By maintaining a pixel-perfect approach, optimizing images, and using a consolidated CSS file, we can create polished and efficient web solutions. Thoroughly testing the project's responsiveness and compatibility across browsers and platforms guarantees a seamless user experience. We must always prioritize clean folder structures, avoiding unnecessary files and sharing only the required content. Moreover, continuous code review and attention to detail ensure a high standard of code quality.\r\n\r\n\r\nThank You!", "mimetype": "text/plain", "start_char_idx": 47444, "end_char_idx": 49550, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "13c25e26-a4a6-4502-b807-b0e8aeb8de99": {"__data__": {"id_": "13c25e26-a4a6-4502-b807-b0e8aeb8de99", "embedding": null, "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\mern-stack.txt", "file_name": "mern-stack.txt", "file_type": "text/plain", "file_size": 51574, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "592676f1-da3d-4048-aed5-76f502bd859e", "node_type": "4", "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\mern-stack.txt", "file_name": "mern-stack.txt", "file_type": "text/plain", "file_size": 51574, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "hash": "c81d093f2b623120468c7ef8c43c9a2fc8d2baadc2fb0bea0433ea58fb49f345", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "87f93bdb-06c9-4092-97ea-a8fb2a679be1", "node_type": "1", "metadata": {}, "hash": "900eabd35b8a8b1a209276bcb22ec13f53ddad7685b8de1ae818660e7c71b4bf", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "\ufeffVersion: 1.0\r\nDate: July 25, 2023\r\nReference: ArhamSoft (Pvt) Ltd.\r\n\r\n\r\nDocument Information\r\n\t\r\n\r\nCategory\r\n\tInformation\r\n\tDocument\r\n\tMERN Coding Standards & Guidelines\r\n\tVersion\r\n\t1.0\r\n\tIdentifier\r\n\tArhamSoft (Pvt) Ltd.\r\n\tStatus\r\n\tIssued\r\n\tAuthor(s)\r\n\tMr. Umer Surkhail (Technical Project Manager)\r\nMs. Ayesha Shaukat (MERN Team Lead)\r\n\tReviewer(s)\r\n\tMr. Mahmood Sultan (CIO)\r\n\tApprover(s)\r\n\tMr. Adil Irfan (CEO)\r\n\tCreation Date\r\n\tJuly 25, 2023\r\n\tIssue Date\r\n\tJuly 25, 2023\r\n\tEffective Date\r\n\tJuly 25, 2023\r\n\tControl Status\r\n\tControlled\r\n\tDistribution\r\n\tIT\r\n\tDisclaimer\r\n\tThis document contains confidential information. Do not distribute this document without prior approval from the higher management of ArhamSoft (Pvt) Ltd.\r\n\t________________\r\n\r\n\r\n\r\n\r\nDocument Revision History\r\n\t\r\n\r\nAuthor(s)\r\n\tDate\r\n\tVersion\r\n\tDocument Link\r\n\tDescription\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\nTable of Contents\r\n\t\r\n\r\nIntroduction:        6\r\nMERN Coding Standards & Guidelines:        6\r\nGeneral        7\r\n1. Project Structure:        7\r\n2. README.md File:        7\r\n3. Static Default Values:        7\r\n4. Package.json:        8\r\n6. Secret Keys & Environmental Variables:        8\r\n7. Npm Packages and Versions:        8\r\n8. Dependencies Vs DevDependencies:        10\r\n9. Common Functions in Helper Folder:        11\r\n10. No Duplicate Code:        11\r\n11. Consistent and Meaningful Naming:        11\r\nc. Guidelines for Variables/Functions Naming:        11\r\nd. Examples:        12\r\nCodeStyle        13\r\n1. Commenting:        13\r\ne. Bad Commenting Examples:        13\r\nf. Good Commenting Examples:        13\r\n2. No Commented Out Code:        16\r\n3. Switches for Conditional Rendering:        16\r\nb. Example without switch:        16\r\nc. Example with switch:        17\r\nJavascript ES6/7        20\r\n1. Variables:        20\r\n2. Destructive Properties:        20\r\n3. Arrow Functions:        21\r\n4. Template Literals:        21\r\nc. Examples:        21\r\ni. Without string literals:        21\r\nii. With string literals:        22\r\n5. Promises and async/await:        22\r\nReactJS        23\r\n1. React Components:        23\r\n2. Routing:        23\r\n3. Minimized Logic in the Render Method:        23\r\nc. Example:        24\r\nNode.js        26\r\n1. Proper HTTP Methods:        26\r\n2. Input Validation:        26\r\n3. User Authentication and Authorization:        26\r\nc. Example:        26\r\n4. Auto-compress Images:        28\r\nMongoDB        29\r\n1. Database Models/Collections:        29\r\na. Model/Collection Name:        29\r\nb. Proper Data Types:        29\r\nc. Document Validation:        29\r\nd. Default Value:        29\r\ne. Proper Data References:        29\r\nf. Proper Developer-defined Values:        29\r\niii. Model/Collection Example:        29\r\n2. Optimized Queries:        30\r\nb. Bad Example Code:        30\r\nc. Good Example Code:        31\r\n3. Aggregation Pipelines:        31\r\nd. Example:        32\r\na. Bad Practice:        32\r\nb. Good Practice:        33\r\n4. Project Required Fields:        33\r\n5.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3498, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "87f93bdb-06c9-4092-97ea-a8fb2a679be1": {"__data__": {"id_": "87f93bdb-06c9-4092-97ea-a8fb2a679be1", "embedding": null, "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\mern-stack.txt", "file_name": "mern-stack.txt", "file_type": "text/plain", "file_size": 51574, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "592676f1-da3d-4048-aed5-76f502bd859e", "node_type": "4", "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\mern-stack.txt", "file_name": "mern-stack.txt", "file_type": "text/plain", "file_size": 51574, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "hash": "c81d093f2b623120468c7ef8c43c9a2fc8d2baadc2fb0bea0433ea58fb49f345", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "13c25e26-a4a6-4502-b807-b0e8aeb8de99", "node_type": "1", "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\mern-stack.txt", "file_name": "mern-stack.txt", "file_type": "text/plain", "file_size": 51574, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "hash": "d234e04ea9128cd335ea9d8a57d797dd9bbdfdc2085b1242a6b51d4586c10587", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2e62ba69-e414-4e70-b92c-e8aca3e5c1d8", "node_type": "1", "metadata": {}, "hash": "c96d5715f872ddb3aa55bff1b488299a14e4f5baf19f2ee622ed197a40217a1f", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Auto-compress Images:        28\r\nMongoDB        29\r\n1. Database Models/Collections:        29\r\na. Model/Collection Name:        29\r\nb. Proper Data Types:        29\r\nc. Document Validation:        29\r\nd. Default Value:        29\r\ne. Proper Data References:        29\r\nf. Proper Developer-defined Values:        29\r\niii. Model/Collection Example:        29\r\n2. Optimized Queries:        30\r\nb. Bad Example Code:        30\r\nc. Good Example Code:        31\r\n3. Aggregation Pipelines:        31\r\nd. Example:        32\r\na. Bad Practice:        32\r\nb. Good Practice:        33\r\n4. Project Required Fields:        33\r\n5. Indexes in Databases:        34\r\nc. For Example:        34\r\ni. Single Field Indexes:        34\r\nii. Compound Indexes:        34\r\nESLint        35\r\n1. Application Console Warnings:        35\r\nc. Example:        35\r\ni. Console with warnings:        35\r\nii. Console without warnings:        35\r\n2. Logs:        36\r\nc. Bad Practice Logs:        36\r\nCode Documentation        38\r\n1. Developer Docs. (dev-instructions.md):        38\r\ne. Sample dev-instructions.md file:        38\r\nOther        40\r\n1. Try-catch Statements:        40\r\nb. Try:        40\r\nc. Catch:        40\r\n2. Error & Exception Handling:        40\r\n3. Time/Space Complexity:        40\r\nf. Program Requirements:        40\r\n4. Git Necessities:        47\r\nConclusion:        48\r\n\r\n\r\n________________\r\nIntroduction:\r\nMERN Coding Standards ensure excellence in software development by providing a set of best practices and guidelines for projects using MongoDB, Express, React, and Node.js. These standards promote consistent code formatting, modular organization, and meaningful variable naming to enhance readability and maintainability. These MERN Coding Standards ensure robustness and reliability by emphasizing error handling, security measures, and asynchronous operations.\r\n\r\n\r\nFollowing are a few MERN coding standards and guidelines for code review. We need to enforce them before we get into the more complex ones. The team lead will be responsible for enforcing these standards on every project. Once implemented, we can add some more advanced in the next phases.\r\n\r\n\r\nNote: Any team or project found not implementing these standards, will be penalized along with the team lead.\r\n\r\n\r\nMERN Coding Standards & Guidelines:\r\nTo improve the readability of the Coding Standard Document and to apply the coding standards effectively, we have organized the entire content and included supplementary examples. The document is divided into several sections, each catering to specific aspects:\r\n\r\n\r\n1. General\r\n2. CodeStyle\r\n3. Javascript ES6/7\r\n4. ReactJS\r\n5. Node.js\r\n6. MongoDB\r\n7. Code Documentation\r\n8. Other\r\n________________\r\n\r\n\r\n\r\n\r\nGeneral\r\n\t\r\n\r\nWhen conducting code reviews for MERN projects, here are some general coding standards and best practices to consider:\r\n1. Project Structure:\r\n   1. Split stuff into multiple layers and tiers as per requirements.\r\n   2. Separate presentation/UI, database & business logic, etc.\r\n   3. For example, all the assets are in a separate directory, business logic like reducers & actions are kept in other folders, and controllers have their own place, similar to the models.\r\n   4. An example project structure will be shared soon.\r\n\r\n\r\n2. README.md File:\r\n   1. This file should include brief and clear project details (e.g. title, purpose, build status, tech stack/framework) and other instructions like configuring and running the project on local machines.\r\n   2. This file should also include the required software/dependencies and the required version.\r\n3. Static Default Values:\r\n   1. All the static/constant default/hard-coded values must be stored in a single file instead of being used directly in the code.\r\n   2.", "mimetype": "text/plain", "start_char_idx": 2886, "end_char_idx": 6630, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "2e62ba69-e414-4e70-b92c-e8aca3e5c1d8": {"__data__": {"id_": "2e62ba69-e414-4e70-b92c-e8aca3e5c1d8", "embedding": null, "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\mern-stack.txt", "file_name": "mern-stack.txt", "file_type": "text/plain", "file_size": 51574, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "592676f1-da3d-4048-aed5-76f502bd859e", "node_type": "4", "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\mern-stack.txt", "file_name": "mern-stack.txt", "file_type": "text/plain", "file_size": 51574, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "hash": "c81d093f2b623120468c7ef8c43c9a2fc8d2baadc2fb0bea0433ea58fb49f345", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "87f93bdb-06c9-4092-97ea-a8fb2a679be1", "node_type": "1", "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\mern-stack.txt", "file_name": "mern-stack.txt", "file_type": "text/plain", "file_size": 51574, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "hash": "037bf86e79154a5e756ae29deb86618629f3028b59aa94d08d1e727c23d6380c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d8d42ace-a1ff-45fa-a186-718b82e68600", "node_type": "1", "metadata": {}, "hash": "9e8baa5bf3cbf080ef04c8650ba889ceead60c4cdce71a44f891f20e91f711cc", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Project Structure:\r\n   1. Split stuff into multiple layers and tiers as per requirements.\r\n   2. Separate presentation/UI, database & business logic, etc.\r\n   3. For example, all the assets are in a separate directory, business logic like reducers & actions are kept in other folders, and controllers have their own place, similar to the models.\r\n   4. An example project structure will be shared soon.\r\n\r\n\r\n2. README.md File:\r\n   1. This file should include brief and clear project details (e.g. title, purpose, build status, tech stack/framework) and other instructions like configuring and running the project on local machines.\r\n   2. This file should also include the required software/dependencies and the required version.\r\n3. Static Default Values:\r\n   1. All the static/constant default/hard-coded values must be stored in a single file instead of being used directly in the code.\r\n   2. A glimpse of the sample file is attached below:\r\nmodule.exports = {\r\n   env: process.env.NODE_ENV,\r\n   port: process.env.PORT,\r\n   mongo: {\r\n       uri: process.env.MONGO_URI,\r\n   },\r\n   mailgunPrivateKey: process.env.MAILGUN_PRIVATE_KEY,\r\n   mailgunDomain: process.env.MAILGUN_DOMAIN,\r\n   pwdSaltRounds: process.env.PWD_SALT_ROUNDS,\r\n   tokenNameToValue: {\r\n       'MYNT': 1,\r\n       'WBNB': 2,\r\n       'WETH': 2\r\n   },\r\n   extendAuctionTimeBy: 10, // in minutes\r\n   myntMaxDecimals: 100000000,\r\n   BToMB: 0.000001, // 1 Byte (B) = 0.000001 Megabytes (MB)\r\n   fileSizeLimit: 100, // file size can be up to 100 MB only\r\n   notifications: [\r\n       {\r\n           type: 1,\r\n           name: 'feedback'\r\n       },\r\n       {\r\n           type: 2,\r\n           name: 'bid-placed'\r\n       },\r\n       {\r\n           type: 3,\r\n           name: 'offer-placed'\r\n       },\r\n   ]\r\n}\r\n\r\n\r\n4. Package.json:\r\n   1. There should not be any package that is not being used in the project.\r\n   2. A package.json should not have any unwanted details added to the file.\r\n\r\n\r\n5. Clean, Clear & Formatted Code:\r\n   1. Code should be clear, clean, readable, properly formatted, and indented.\r\n   2. More instructions on code formatting can be seen in the document attached below with the point Git Necessities, explained below.\r\n\r\n\r\n6. Secret Keys & Environmental Variables:\r\n   1. If the project has any kind of credentials, these must be stored in the .env file.\r\n   2. All the .env files must have an example (e.g. .env.example) file with the sample values.\r\n   3. Do not push the .env to remote repos. More instructions in Git Necessities point.\r\n\r\n\r\n7. Npm Packages and Versions:\r\n   1. While starting any project use the latest stable version of Node, npm, and all the packages being used in the project.\r\n   2. Keep updating the package versions, while the project is in the development state.\r\n   3. Please make sure the packages being used have enough downloads and are secure to use.\r\n   4. Npm-check-updates is a package that you can use to identify the upgradable packages and upgrade them. npm-check-updates\r\n      1. As JS is evolving very fast and there are major changes coming up every other day. So, keep checking the upgradable packages and upgrade them. \r\n      2. Once you have installed the npm-check-updates package, you can check the upgradable packages in any project by running the command ncu. It will list upgradable packages with the currently installed and latest available version.\r\n  \r\n\r\n      3. Running ncu -u will update the packages with the latest versions in the package.json file. So, it will require npm install to update all the latest versions listed in the package.json.\r\n  \r\n\r\n8. Dependencies Vs DevDependencies:\r\n   1. There are a lot of packages we install in our project, which do not directly relate to the flow or functioning of the project, but provide different options to run or optimize the projects. For example, the package nodemon is used to run the Node.js in watch mode, the eslint package is used to integrate the linting rules, and prettier is used to define the rules for formatting. These packages are not dependencies of the project, but dependencies of the development.", "mimetype": "text/plain", "start_char_idx": 5734, "end_char_idx": 9837, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d8d42ace-a1ff-45fa-a186-718b82e68600": {"__data__": {"id_": "d8d42ace-a1ff-45fa-a186-718b82e68600", "embedding": null, "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\mern-stack.txt", "file_name": "mern-stack.txt", "file_type": "text/plain", "file_size": 51574, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "592676f1-da3d-4048-aed5-76f502bd859e", "node_type": "4", "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\mern-stack.txt", "file_name": "mern-stack.txt", "file_type": "text/plain", "file_size": 51574, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "hash": "c81d093f2b623120468c7ef8c43c9a2fc8d2baadc2fb0bea0433ea58fb49f345", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2e62ba69-e414-4e70-b92c-e8aca3e5c1d8", "node_type": "1", "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\mern-stack.txt", "file_name": "mern-stack.txt", "file_type": "text/plain", "file_size": 51574, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "hash": "8c14e0c1fb14ddaada22f5a8e1fc09634726e6c900e9cdd7c733285606aa13cf", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4cc9e588-2437-41e2-8170-fea37e59b31d", "node_type": "1", "metadata": {}, "hash": "c69d18615a7a5761ac76f1d98a70dd1b0da221c3db31cd80d691467af4fd85af", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Once you have installed the npm-check-updates package, you can check the upgradable packages in any project by running the command ncu. It will list upgradable packages with the currently installed and latest available version.\r\n  \r\n\r\n      3. Running ncu -u will update the packages with the latest versions in the package.json file. So, it will require npm install to update all the latest versions listed in the package.json.\r\n  \r\n\r\n8. Dependencies Vs DevDependencies:\r\n   1. There are a lot of packages we install in our project, which do not directly relate to the flow or functioning of the project, but provide different options to run or optimize the projects. For example, the package nodemon is used to run the Node.js in watch mode, the eslint package is used to integrate the linting rules, and prettier is used to define the rules for formatting. These packages are not dependencies of the project, but dependencies of the development.\r\n   2. npm provides a completely separate directive for these development-related dependencies which is devDependencies. All the packages used for development purposes should be installed in the devDependencies, but not in the dependencies. \r\n   3. Installing devDependencies in the dependencies have some major drawbacks, and greater-sized/un-optimized applications are one of them.\r\n   4. When we install the development-related packages separately, it benefits us. For example, while creating a build on the ReactJS side, the devDependencies will be ignored by the builder and will not be included in the build, thus saving us a lot of files and size. On the other hand, if devDependencies are installed in the dependencies section, all the code of these packages will be included in the build, thus greater size with useless code.\r\n{\r\n   ...\r\n   \"dependencies\": {\r\n       \"axios\": \"^1.4.0\",\r\n       \"bluebird\": \"^3.7.2\",\r\n       \"cloudinary\": \"^1.37.3\",\r\n       \"compression\": \"^1.7.4\",\r\n       ...\r\n       \"mongoose\": \"^7.4.0\",\r\n       \"socket.io\": \"^4.7.1\"\r\n   },\r\n   \"devDependencies\": {\r\n       \"eslint\": \"^8.45.0\",\r\n       \"eslint-config-prettier\": \"^8.8.0\",\r\n       \"eslint-plugin-prettier\": \"^5.0.0\",\r\n       \"husky\": \"^8.0.3\",\r\n       \"lint-staged\": \"^13.2.3\",\r\n       \"prettier\": \"^3.0.0\",\r\n       \"pretty-quick\": \"^3.1.3\"\r\n   },\r\n   ...\r\n}\r\n9. Common Functions in Helper Folder:\r\n   1. Common functions should be in utils or some helper folder.\r\n   2. The screenshot attached below shows that inside the utils folder, there is a file named functions.js which contains all the common functions e.g. ipfsToUrl is the common function used many times in the project but its definition is written once only.\r\n  \r\n\r\n10. No Duplicate Code:\r\n   1. Continuing with the previous point, there should not be any duplicated code. For example, the developer can define the same function in 2 different files, and use it in the respective file. But, there should not be any such case, and all the repeating codes should be defined once.\r\n   2. Note: We encourage you to practice this point for both Node.js & ReactJS apps but to make things easier, for now, we\u2019ve added this clause for Node.js only.\r\n\r\n\r\n11. Consistent and Meaningful Naming:\r\n   1. The naming scheme for the methods, classes, variables, files, and folders should be consistent throughout the project. No matter how many developers are working on a project.\r\n   2. Clear and meaningful names make code more readable and understandable and act as self-documentation within code.\r\n   3. Guidelines for Variables/Functions Naming:\r\n      1. Use descriptive names that convey the purpose, meaning, or role of the variable/function.\r\n      2. Follow a consistent naming convention throughout the codebase.\r\n      3. Choose names that are concise but still descriptive.\r\n      4. Use camel case (e.g., myVariableName) or underscore-separated (e.g., my_variable_name) naming conventions based on the programming language or style guide you are following. In JS, camel case is preferred so better opt for this convention.\r\n   4. Examples:\r\n      1. If a variable is named as camelCase, all the variables should be camelCased in the project.\r\n      2. If a function\u2019s name is defined as separated_by_underscores, all the function names in the whole project should be separated_by_underscores.\r\n      3.", "mimetype": "text/plain", "start_char_idx": 8889, "end_char_idx": 13197, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4cc9e588-2437-41e2-8170-fea37e59b31d": {"__data__": {"id_": "4cc9e588-2437-41e2-8170-fea37e59b31d", "embedding": null, "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\mern-stack.txt", "file_name": "mern-stack.txt", "file_type": "text/plain", "file_size": 51574, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "592676f1-da3d-4048-aed5-76f502bd859e", "node_type": "4", "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\mern-stack.txt", "file_name": "mern-stack.txt", "file_type": "text/plain", "file_size": 51574, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "hash": "c81d093f2b623120468c7ef8c43c9a2fc8d2baadc2fb0bea0433ea58fb49f345", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d8d42ace-a1ff-45fa-a186-718b82e68600", "node_type": "1", "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\mern-stack.txt", "file_name": "mern-stack.txt", "file_type": "text/plain", "file_size": 51574, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "hash": "25af938f57c1b51403244e19b06ee1111e551ee9313ccb9b040aed1aac8a59ec", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "43890e22-46ea-46db-896e-8d86db6fc871", "node_type": "1", "metadata": {}, "hash": "ca93c7a5a6e5b03a282a4c3510bd3406b990258dd542f87f59faa2edfe42d717", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "3. Guidelines for Variables/Functions Naming:\r\n      1. Use descriptive names that convey the purpose, meaning, or role of the variable/function.\r\n      2. Follow a consistent naming convention throughout the codebase.\r\n      3. Choose names that are concise but still descriptive.\r\n      4. Use camel case (e.g., myVariableName) or underscore-separated (e.g., my_variable_name) naming conventions based on the programming language or style guide you are following. In JS, camel case is preferred so better opt for this convention.\r\n   4. Examples:\r\n      1. If a variable is named as camelCase, all the variables should be camelCased in the project.\r\n      2. If a function\u2019s name is defined as separated_by_underscores, all the function names in the whole project should be separated_by_underscores.\r\n      3. A class/component\u2019s name is defined as InitialCapital, all the classes/components in the project should be InitialCapital\r\n      4. A collection/model name should be singular and InitialCapital. More details are added for this in Database Models/Collections.\r\nconst Item = (props) => {\r\n // Item = Name of component, InitialsCapital\r\n const publishItem = async () => {\r\n   // publishItem = Name of method/function, camelCase\r\n   props.publishItem(props._id);\r\n };\r\n const renderLi = (type) => {\r\n   // renderLi = Name of method/function, camelCase\r\n   const { end_time, bidder, start_time } = props; // variables names separated_by_underscore\r\n   // implementation\r\n   return <>...</>;\r\n };\r\n const renderLink = (type) => {\r\n   // renderLink = Name of method/function, camelCase\r\n   // implementation\r\n   return <>...</>;\r\n };\r\n return (\r\n   // implementation\r\n   <>...</>\r\n );\r\n};\r\n________________\r\n\r\n\r\n\r\n\r\nCodeStyle\r\n\t\r\n\r\n1. Commenting:\r\n   1. Add proper comments in the code.\r\n   2. The comments should be meaningful.\r\n   3. Avoid unnecessary and obvious comments.\r\n   4. Comments should be brief, and relevant.\r\n   5. Bad Commenting Examples:\r\n/**\r\n* positiveNumbersLength function\r\n*/\r\n\r\n\r\nfunction positiveNumbersLength(data = []) {\r\n // If array's length is 0                       <---- This is obvious\r\n if (!data.length) {\r\n   return 0;\r\n }\r\n let positiveLength;\r\n // Loop for all numbers in the array            <---- This is obvious\r\n for (let i = 0; i < data.length; i++) {\r\n   if (data[0] > 0) {\r\n     positiveLength++;\r\n   }\r\n }\r\n return positiveLength;\r\n}\r\n   6. Good Commenting Examples:\r\n      1. Initial function definition\r\n/**\r\n* Returns the length of positive numbers from a given array @data passed\r\n* as param\r\n* Author: Umer Surkhail\r\n* Date: 23 Jan, 2023\r\n*/\r\n\r\n\r\nfunction positiveNumbersLength(data) {\r\n let positiveLength;\r\n for (let i = 0; i < data.length; i++) {\r\n   if (data[0] > 0) {\r\n     positiveLength++;\r\n   }\r\n }\r\n return positiveLength;\r\n}\r\n\r\n\r\n      2. Comments after update 1\r\n/**\r\n* Returns the length of positive numbers from a given array @data passed as param\r\n* Author: Umer Surkhail\r\n* Date: 23 Jan, 2023\r\n* Update 1 (24 Jan, 2023): Check the length of the array before the loop, * and return 0 if the array is empty.\r\n*/\r\n\r\n\r\nfunction positiveNumbersLength(data) {\r\n if (!data.length) {\r\n   return 0;\r\n }\r\n let positiveLength;\r\n for (let i = 0; i < data.length; i++) {\r\n   if (data[0] > 0) {\r\n     positiveLength++;\r\n   }\r\n }\r\n return positiveLength;\r\n}\r\n\r\n\r\n      3. Comments after update 2\r\n/**\r\n* Returns the length of positive numbers from a given array @data passed as param\r\n* Author: Umer Surkhail\r\n* Date: 23 Jan, 2023\r\n* Update 1 (24 Jan, 2023): Check the length of array before loop, and \r\n* return 0 if the array is empty.\r\n* Update 2 (24 Jan, 2023): Assign default value to the param, an empty array, in case the argument is not passed.\r\n*/\r\n\r\n\r\nfunction positiveNumbersLength(data = []) {\r\n if (!data.length) {\r\n   return 0;\r\n }\r\n let positiveLength;\r\n for (let i = 0; i < data.length; i++) {\r\n   if (data[0] > 0) {\r\n     positiveLength++;\r\n   }\r\n }\r\n return positiveLength;\r\n}\r\n\r\n\r\n      4.", "mimetype": "text/plain", "start_char_idx": 12386, "end_char_idx": 16350, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "43890e22-46ea-46db-896e-8d86db6fc871": {"__data__": {"id_": "43890e22-46ea-46db-896e-8d86db6fc871", "embedding": null, "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\mern-stack.txt", "file_name": "mern-stack.txt", "file_type": "text/plain", "file_size": 51574, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "592676f1-da3d-4048-aed5-76f502bd859e", "node_type": "4", "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\mern-stack.txt", "file_name": "mern-stack.txt", "file_type": "text/plain", "file_size": 51574, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "hash": "c81d093f2b623120468c7ef8c43c9a2fc8d2baadc2fb0bea0433ea58fb49f345", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4cc9e588-2437-41e2-8170-fea37e59b31d", "node_type": "1", "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\mern-stack.txt", "file_name": "mern-stack.txt", "file_type": "text/plain", "file_size": 51574, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "hash": "bdcdfb1a684a163ac09932260c61f98f5f0a47109bc1c0fcfa5f63cf5d0e8b51", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a42d2a76-2fde-4c75-8689-23ae6951d93c", "node_type": "1", "metadata": {}, "hash": "d253d6075a5caa4f20e4b8cc37eab2c120220847f44baac2e633b523b8de25ed", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Comments after update 2\r\n/**\r\n* Returns the length of positive numbers from a given array @data passed as param\r\n* Author: Umer Surkhail\r\n* Date: 23 Jan, 2023\r\n* Update 1 (24 Jan, 2023): Check the length of array before loop, and \r\n* return 0 if the array is empty.\r\n* Update 2 (24 Jan, 2023): Assign default value to the param, an empty array, in case the argument is not passed.\r\n*/\r\n\r\n\r\nfunction positiveNumbersLength(data = []) {\r\n if (!data.length) {\r\n   return 0;\r\n }\r\n let positiveLength;\r\n for (let i = 0; i < data.length; i++) {\r\n   if (data[0] > 0) {\r\n     positiveLength++;\r\n   }\r\n }\r\n return positiveLength;\r\n}\r\n\r\n\r\n      4. Comments after update 3\r\n/**\r\n* Returns the length of positive numbers from a given array @data passed as param\r\n* Author: Umer Surkhail\r\n* Date: 23 Jan, 2023\r\n* Update 1 (24 Jan, 2023): Check the length of the array before the loop, \r\n* and return 0 if the array is empty.\r\n* Update 2 (24 Jan, 2023): Assign default value to the param, an empty \r\n* array, in case the argument is not passed.\r\n* Update 3 (24 Jan, 2023): Modified the function to find the positive numbers count in the first half of the array.\r\n*/\r\n\r\n\r\nfunction positiveNumbersLength(data = []) {\r\n if (!data.length) {\r\n   return 0;\r\n }\r\n let positiveLength;\r\n // Looping through the first half, because we need to find the positive numbers in the 1st half of the array.\r\n for (let i = 0; i < data.length / 2; i++) {\r\n   if (data[0] > 0) {\r\n     positiveLength++;\r\n   }\r\n }\r\n return positiveLength;\r\n}\r\n\r\n\r\n2. No Commented Out Code:\r\n   1. Code that is disabled or excluded from execution in the app should be removed.\r\n   2. Leaving commented-out code in source code is bad practice, as it takes up space, causes confusion, and leads to maintenance issues if it's not removed. Therefore, the commented-out code should be removed from the project.\r\n\r\n\r\n3. Switches for Conditional Rendering:\r\n   1. While working with conditional rendering on JS projects, specifically on the frontend side, we often see the rendering of components in the ternary conditions in the same render, which makes code look very complex to see and understand. In cases like these, we should use switch statements to render condition-based components, which makes code look more easy to understand.\r\n   2. Example without switch:\r\nconst Item = (props) => {\r\n const publishItem = async () => {\r\n   props.publishItem(props._id);\r\n };\r\n return (\r\n   <div className=\"item-holder mb-4\">\r\n     <h3 className=\"item-name d-block mb-2\">\r\n       <Link to={`/item-detail/${props._id}`}>{props.name}</Link>\r\n     </h3>\r\n     <ul className=\"list-unstyled\">\r\n       {props.type === 1 ? (\r\n         <li>\r\n           <strong>Earned By: </strong>\r\n           <span>\r\n             {props.bidder ? props.bidder : \"None\"}\r\n           </span>\r\n         </li>\r\n       ) : props.type === 2 ? (\r\n         <li>\r\n           <strong>Ends In: </strong>\r\n           <span>\r\n             {moment(new Date(props.endTime)).(\"MM/DD/YY\")}\r\n           </span>\r\n         </li>\r\n       ) : props.type === 3 || props.type === 4 ? (\r\n         <>\r\n           <li className=\"mb-2\">\r\n             <strong className=\"d-block mb-1\">Start Time: </strong>\r\n             <span>\r\n               {moment(new Date(props.startTime)).format(\"MM/DD/YY\")}\r\n             </span>\r\n           </li>\r\n           <li>\r\n             <strong className=\"d-block mb-1\">End Time: </strong>\r\n             <span>\r\n               {moment(new Date(props.endTime)).format(\"MM/DD/YY\")}\r\n             </span>\r\n           </li>\r\n         </>\r\n       ) : (\r\n         \"\"\r\n       )}\r\n     </ul>\r\n     {props.type === 2 ? (\r\n       <Link to={`/item-detail/${props._id}`} className=\"btn btn-primary\">\r\n         Bid\r\n       </Link>\r\n     ) : props.type === 3 ? (\r\n       <Button variant=\"primary\" onClick={() => publishItem()}>\r\n         Publish\r\n       </Button>\r\n     ) : (\r\n       \"\"\r\n     )}\r\n   </div>\r\n );\r\n}\r\n\r\n\r\n   3.", "mimetype": "text/plain", "start_char_idx": 15714, "end_char_idx": 19639, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a42d2a76-2fde-4c75-8689-23ae6951d93c": {"__data__": {"id_": "a42d2a76-2fde-4c75-8689-23ae6951d93c", "embedding": null, "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\mern-stack.txt", "file_name": "mern-stack.txt", "file_type": "text/plain", "file_size": 51574, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "592676f1-da3d-4048-aed5-76f502bd859e", "node_type": "4", "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\mern-stack.txt", "file_name": "mern-stack.txt", "file_type": "text/plain", "file_size": 51574, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "hash": "c81d093f2b623120468c7ef8c43c9a2fc8d2baadc2fb0bea0433ea58fb49f345", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "43890e22-46ea-46db-896e-8d86db6fc871", "node_type": "1", "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\mern-stack.txt", "file_name": "mern-stack.txt", "file_type": "text/plain", "file_size": 51574, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "hash": "89794c6671b3e4f1b859de01c2441347a676b7ddf6a2886d425a00fdcf35f119", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "bf81fb50-ccb7-4c3c-b826-744749efb754", "node_type": "1", "metadata": {}, "hash": "b3fbb22901619109d5acefdbcbf7706dbca4dc8580e2ce7c861a00f32109bfca", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "(\r\n       <Link to={`/item-detail/${props._id}`} className=\"btn btn-primary\">\r\n         Bid\r\n       </Link>\r\n     ) : props.type === 3 ? (\r\n       <Button variant=\"primary\" onClick={() => publishItem()}>\r\n         Publish\r\n       </Button>\r\n     ) : (\r\n       \"\"\r\n     )}\r\n   </div>\r\n );\r\n}\r\n\r\n\r\n   3. Example with switch:\r\n      1. This might have added up some additional lines of code but has made the code more readable and easy to understand.\r\nconst Item = (props: ItemData) => {\r\n const publishItem = async () => {\r\n   props.publishItem(props._id);\r\n };\r\n const renderLi = (type: number) => {\r\n   switch (type) {\r\n     case 1:\r\n       return (\r\n         <li>\r\n           <strong>Earned By: </strong>\r\n           <span>\r\n             {props.bidder ? props.bidder : \"None\"}\r\n           </span>\r\n         </li>\r\n       );\r\n     case 2:\r\n       return (\r\n         <li>\r\n           <strong>Ends In: </strong>\r\n           <span>\r\n             {moment(new Date(props.endTime)).format(\"MM/DD/YY\")}\r\n           </span>\r\n         </li>\r\n       );\r\n     case 3:\r\n     case 4:\r\n       return (\r\n         <>\r\n           <li className=\"mb-2\">\r\n             <strong className=\"d-block mb-1\">Start Time: </strong>\r\n             <span>\r\n               {moment(new Date(props.startTime)).format(\"MM/DD/YY\")}\r\n             </span>\r\n           </li>\r\n           <li>\r\n             <strong className=\"d-block mb-1\">End Time: </strong>\r\n             <span>\r\n               {moment(new Date(props.endTime)).format(\"MM/DD/YY\")}\r\n             </span>\r\n           </li>\r\n         </>\r\n       );\r\n     default:\r\n       return \"\";\r\n   }\r\n };\r\n const renderLink = (type: number) => {\r\n   switch (type) {\r\n     case 2:\r\n       return (\r\n         <Link to={`/item-detail/${props._id}`} className=\"btn btn-primary\">\r\n           Bid\r\n         </Link>\r\n       );\r\n     case 3:\r\n       return (\r\n         <Button variant=\"primary\" onClick={() => publishItem()}>\r\n           Publish\r\n         </Button>\r\n       );\r\n     default:\r\n       return \"\";\r\n   }\r\n };\r\n return (\r\n   <div className=\"item-holder mb-4\">\r\n     <h3 className=\"item-name d-block mb-2\">\r\n       <Link to={`/item-detail/${props._id}`}>{props.name}</Link>\r\n     </h3>\r\n     <ul className=\"list-unstyled\">{renderLi(props.type)}</ul>\r\n     {renderLink(props.type)}\r\n   </div>\r\n );\r\n};\r\n________________\r\n\r\n\r\n\r\n\r\nJavascript ES6/7\r\n\t1. Variables:\r\n   1. In JS, we can define variables using var, let, or const.\r\n   2. If the variable\u2019s value is not going to change, it is necessary to use it as const, otherwise, use it as let.\r\n   3. Avoid var:\r\n      1. Use var if and only if it is really necessary.\r\n\r\n\r\n1. Destructive Properties:\r\n   1. We frequently work with objects and arrays to perform different actions based on the data stored in these. And often we need to extract properties from objects and assign them to new variables.\r\n   2. Destructuring is a very useful feature to extract properties from objects and assign them to variables.\r\n   3. We should use destructive properties instead of old methods.\r\n   4. Please see some examples below for better explanations.\r\n// We need to extract some properties from the object and need to set it in a variable.\r\nconst student = {\r\n name: \"Umer Surkhail\",\r\n grade: \"A\",\r\n id: 1,\r\n section: \"A\",\r\n};\r\n\r\n\r\n// One way is to access the properties one by one and assign them in the variable.\r\nconst section = student.section;\r\nconst name = student.name;\r\nconst id = student.id;\r\nconst grade = student.grade;\r\n\r\n\r\n// Object destructuring makes it possible to get required properties and assign them to variables in one line.\r\nconst { section, name, id, grade } = student;\r\n\r\n\r\n// We need to extract some properties from the object and need to set it in a variable.\r\nconst student = {\r\n name: \"Umer Surkhail\",\r\n grade: \"A\",\r\n id: 1,\r\n section: \"A\",\r\n};\r\n\r\n\r\n// One way is to access the properties one by one and assign them in the variable.\r\nconst section = student.section;\r\nconst name = student.name;\r\nconst id = student.id;\r\nconst grade = student.grade;\r\n\r\n\r\n// Object destructuring makes it possible to get required properties and assign them to variables in one line.\r\nconst { section, name, id, grade } = student;\r\n\r\n\r\n   5.", "mimetype": "text/plain", "start_char_idx": 19338, "end_char_idx": 23548, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "bf81fb50-ccb7-4c3c-b826-744749efb754": {"__data__": {"id_": "bf81fb50-ccb7-4c3c-b826-744749efb754", "embedding": null, "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\mern-stack.txt", "file_name": "mern-stack.txt", "file_type": "text/plain", "file_size": 51574, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "592676f1-da3d-4048-aed5-76f502bd859e", "node_type": "4", "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\mern-stack.txt", "file_name": "mern-stack.txt", "file_type": "text/plain", "file_size": 51574, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "hash": "c81d093f2b623120468c7ef8c43c9a2fc8d2baadc2fb0bea0433ea58fb49f345", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a42d2a76-2fde-4c75-8689-23ae6951d93c", "node_type": "1", "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\mern-stack.txt", "file_name": "mern-stack.txt", "file_type": "text/plain", "file_size": 51574, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "hash": "6b04e352939508cf588de1b60cc2943718077748949a57f45fd3a6f310df3c42", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e017bf29-0d31-4bc8-bd3b-901a6e082770", "node_type": "1", "metadata": {}, "hash": "9a69d763e37cdc5d5c489fac7cf4e72f29df33469c0cee8a708d1284688dfcd7", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "const section = student.section;\r\nconst name = student.name;\r\nconst id = student.id;\r\nconst grade = student.grade;\r\n\r\n\r\n// Object destructuring makes it possible to get required properties and assign them to variables in one line.\r\nconst { section, name, id, grade } = student;\r\n\r\n\r\n// We need to extract some properties from the object and need to set it in a variable.\r\nconst student = {\r\n name: \"Umer Surkhail\",\r\n grade: \"A\",\r\n id: 1,\r\n section: \"A\",\r\n};\r\n\r\n\r\n// One way is to access the properties one by one and assign them in the variable.\r\nconst section = student.section;\r\nconst name = student.name;\r\nconst id = student.id;\r\nconst grade = student.grade;\r\n\r\n\r\n// Object destructuring makes it possible to get required properties and assign them to variables in one line.\r\nconst { section, name, id, grade } = student;\r\n\r\n\r\n   5. You may go through this link to discover Destructive Properties in detail:\r\n      1. Destructuring assignment - JavaScript | MDN\r\n      2. How to Use Object Destructuring in JavaScript\r\n\r\n\r\n2. Arrow Functions:\r\n   1. It is preferred to use arrow functions because of some important reasons:\r\n      1. Arrow functions reduce the size of the code. \r\n      2. Make code more structured and readable.\r\n      3. The return statement and functional braces are optional for single-line functions.\r\n\r\n\r\n3. Template Literals:\r\n   1. There are many cases when we need to use a string in our project. We should use template strings because it makes the code more readable.\r\n   2. It makes it easy to concat strings and variables and provides a clear view of the code.\r\n   3. Examples:\r\n      1. Without string literals:\r\nconst strLiteral = () => {\r\n const str2 = \"This is a string 2 concatenated to be with string 1\";\r\n return \"This is a string 1\" + str2;\r\n};\r\n\r\n\r\n      2. With string literals:\r\nconst strLiteral = () => {\r\n const str2 = `This is a string 2 concatenated to be with string 1`;\r\n return `This is a string 1 ${str2}`;\r\n};\r\n\r\n\r\n4. Promises and async/await:\r\n   1. Use promises or async/await along with handled rejection.\r\n________________\r\n\r\n\r\n\r\n\r\nReactJS\r\n\t\r\n\r\n1. React Components:\r\n   1. Design your application as a collection of reusable React components. Plan the component hierarchy and responsibilities.\r\n   2. Components in React must be small\r\n\r\n\r\n2. Routing:\r\n   1. If your app requires multiple pages or views, implement a routing solution like react-router.\r\n\r\n\r\n3. Minimized Logic in the Render Method:\r\n   1. Use minimum logic in the render method to make things more simple, clear, and readable.\r\n   2. When we have simple logic, think logic that is easy to read and understand, we can put it in our render function. If instead, we have logic that we would not want to be re-created each time the render function is called, or logic that is harder to read/understand, etc. we should put that logic in helper methods or in redux actions (if used).\r\n   3. Example:\r\n  \r\n\r\n   2. From line # 2 to 19 it\u2019s simpler logic so, leaving it as it is whereas, from line # 21 to onward things could have been made nicer if this above code was written in some helper function such as:\r\n  \r\n\r\n  \r\n________________\r\n\r\n\r\n\r\nNode.js\r\n\t\r\n\r\n1. Proper HTTP Methods: \r\n   1. In Express, routes are used to handle different types of requests to the server, such as GET, POST, PUT, DELETE, etc. Each route is associated with a specific HTTP method, and it\u2019s important to ensure that the correct method is being used for each route.\r\n   2. For example, a route that is used to retrieve data from the server should be associated with the GET method, while a route that is used to create new data should be associated with the POST method.\r\n   3. Using the wrong HTTP method for a route can lead to unexpected behavior and security issues. For example, if a route associated with the GET method is used to delete data, it could be possible for an attacker to craft a malicious request that could delete data from the server without proper authorization.\r\n\r\n\r\n2. Input Validation:\r\n   1. Input validation is the process of checking that the data received by the server is valid and meets certain criteria before it is processed. This is an important step in ensuring the security and stability of the application, as well as preventing malicious actors from injecting unwanted or harmful data.\r\n   2.", "mimetype": "text/plain", "start_char_idx": 22713, "end_char_idx": 27039, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e017bf29-0d31-4bc8-bd3b-901a6e082770": {"__data__": {"id_": "e017bf29-0d31-4bc8-bd3b-901a6e082770", "embedding": null, "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\mern-stack.txt", "file_name": "mern-stack.txt", "file_type": "text/plain", "file_size": 51574, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "592676f1-da3d-4048-aed5-76f502bd859e", "node_type": "4", "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\mern-stack.txt", "file_name": "mern-stack.txt", "file_type": "text/plain", "file_size": 51574, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "hash": "c81d093f2b623120468c7ef8c43c9a2fc8d2baadc2fb0bea0433ea58fb49f345", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "bf81fb50-ccb7-4c3c-b826-744749efb754", "node_type": "1", "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\mern-stack.txt", "file_name": "mern-stack.txt", "file_type": "text/plain", "file_size": 51574, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "hash": "ae801af7e0f50d356fcd5f52f5136fd1273a6aec252b712ca3a78adaf753a646", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "51975ed8-9f0a-4907-8e02-0f74e552a71f", "node_type": "1", "metadata": {}, "hash": "34b3d235d9dbc58f9cee98d9e7a02d8316722a8d14a2a511d691f4891316b346", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "2. For example, a route that is used to retrieve data from the server should be associated with the GET method, while a route that is used to create new data should be associated with the POST method.\r\n   3. Using the wrong HTTP method for a route can lead to unexpected behavior and security issues. For example, if a route associated with the GET method is used to delete data, it could be possible for an attacker to craft a malicious request that could delete data from the server without proper authorization.\r\n\r\n\r\n2. Input Validation:\r\n   1. Input validation is the process of checking that the data received by the server is valid and meets certain criteria before it is processed. This is an important step in ensuring the security and stability of the application, as well as preventing malicious actors from injecting unwanted or harmful data.\r\n   2. It\u2019s also important to check for the presence of required fields, for example, if a form requires a name, email, and password fields, it\u2019s important to check that these fields are present and not empty in the request body.\r\n   3. You must use input validation to check that the required fields are present.\r\n\r\n\r\n3. User Authentication and Authorization:\r\n   1. In the Node.js app, the authentication process should use secure methods such as hashing and salting passwords. The authorization process should use role-based access control (RBAC) or other similar methods to ensure that a user can only perform actions that they are authorized to do.\r\n   2. Create a middleware to enforce authentication and authorization.\r\n   3. Example:\r\nexports.userValidation = async (req, res, next) => {\r\n let flag = true;\r\n req.user = 0;\r\n if (req.headers[\"x-access-token\"]) {\r\n   await jwt.verify(\r\n     req.headers[\"x-access-token\"],\r\n     pwEncryptionKey,\r\n     async (err, authorizedData) => {\r\n       if (err) {\r\n         flag = false;\r\n         const message = \"Session expired!\";\r\n         return res.send({ success: false, userDisabled: true, message, err });\r\n       } else {\r\n         const reqPlatform = Number(req.headers[\"user-platform\"]);\r\n         req.user = authorizedData.sub;\r\n\r\n\r\n         if (reqPlatform === 2) {\r\n           let admin = await Admin.findById({ _id: req.user }).lean();\r\n           if (!admin) {\r\n             flag = false;\r\n             return res.send({\r\n               success: false,\r\n               user404: true,\r\n               message: \"There is no account linked to that address\",\r\n               notExist: 1,\r\n             });\r\n           }\r\n         } else {\r\n           let user = await User.findById({ _id: req.user }).lean();\r\n           if (!user) {\r\n             flag = false;\r\n             return res.send({\r\n               success: false,\r\n               user404: true,\r\n               message: \"There is no account linked to that address\",\r\n               notExist: 1,\r\n             });\r\n           }\r\n         }\r\n       }\r\n     }\r\n   );\r\n } else if (req.method.toLocaleLowerCase() !== \"options\") {\r\n   req.user = 0;\r\n }\r\n\r\n\r\n if (flag) next();\r\n};\r\n\r\n\r\n4. Auto-compress Images:\r\n1. In most of the projects, we integrate the feature for users to upload images (profile images, product images, etc). We should create a method to automatically compress the images before storing them on the server. One way is to integrate some packages and take the images through that method for compressing them.\r\n2. An example package that can be integrated with Node.js is tinypng - npm\r\n3. Compressing the images will help reduce the size of the images, and hence optimize the applications.\r\n________________\r\n\r\n\r\nMongoDB\r\n\t\r\n\r\n   1. Database Models/Collections:\r\n\r\n\r\n   1. Model/Collection Name:\r\n   1. The model/collection name must be singular and Initial Capital.\r\n\r\n\r\n   2. Proper Data Types:\r\n   1. It must have proper data types defined for all fields.\r\n   2. For example: If a field is some flag then its data type must be a boolean.\r\n   3. Document Validation:\r\n   1. Document validation should be applied where necessary. \r\n   2. For example: If a field is required then must add required: true.\r\n   4. Default Value:\r\n   1. A field should have a default value where it can be defined. \r\n   2. For example: If a field is some flag then its default value must be true or false (as per requirement).\r\n   5. Proper Data References:\r\n   1. Proper data references/relationships should be defined.\r\n   6. Proper Developer-defined Values:\r\n   1.", "mimetype": "text/plain", "start_char_idx": 26179, "end_char_idx": 30615, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "51975ed8-9f0a-4907-8e02-0f74e552a71f": {"__data__": {"id_": "51975ed8-9f0a-4907-8e02-0f74e552a71f", "embedding": null, "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\mern-stack.txt", "file_name": "mern-stack.txt", "file_type": "text/plain", "file_size": 51574, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "592676f1-da3d-4048-aed5-76f502bd859e", "node_type": "4", "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\mern-stack.txt", "file_name": "mern-stack.txt", "file_type": "text/plain", "file_size": 51574, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "hash": "c81d093f2b623120468c7ef8c43c9a2fc8d2baadc2fb0bea0433ea58fb49f345", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e017bf29-0d31-4bc8-bd3b-901a6e082770", "node_type": "1", "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\mern-stack.txt", "file_name": "mern-stack.txt", "file_type": "text/plain", "file_size": 51574, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "hash": "57f9b913d4185e6d7964cdfa8c44683d9b73ad178d641684bf9f35b81f0f8332", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "5f460e11-4bfb-42a0-9a38-211a14378faa", "node_type": "1", "metadata": {}, "hash": "eca95b697e07fd1dc9caa4f2a5df1fda5cf4b07d57e200b3118f362213e6c9c6", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "The model/collection name must be singular and Initial Capital.\r\n\r\n\r\n   2. Proper Data Types:\r\n   1. It must have proper data types defined for all fields.\r\n   2. For example: If a field is some flag then its data type must be a boolean.\r\n   3. Document Validation:\r\n   1. Document validation should be applied where necessary. \r\n   2. For example: If a field is required then must add required: true.\r\n   4. Default Value:\r\n   1. A field should have a default value where it can be defined. \r\n   2. For example: If a field is some flag then its default value must be true or false (as per requirement).\r\n   5. Proper Data References:\r\n   1. Proper data references/relationships should be defined.\r\n   6. Proper Developer-defined Values:\r\n   1. If there is a field inside the model like some status having different values then add a comment for all values in the model to let other developers know the values.\r\n   2. For example, we have a field named status with type Number.\r\nstatus: { type: Number, default: 1 }, // 1 = Pending, 2 = Transferred\r\n\r\n\r\n   3. Model/Collection Example:\r\nconst mongoose = require('mongoose')\r\n\r\n\r\n/**\r\n* Earning Schema - This schema is to get owner earnings etc.\r\n* @private\r\n*/\r\nconst EarningSchema = new mongoose.Schema({\r\n userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },\r\n nftId: { type: mongoose.Schema.Types.ObjectId, ref: 'NFT', required: true },\r\n collectionId: { type: mongoose.Schema.Types.ObjectId, ref: 'Collection', required: true },\r\n price: {  // fee earned by owner\r\n   type: Object,\r\n   default: {\r\n     currency: {\r\n       type: String, default: ''\r\n     },\r\n     amount: {\r\n       type: Number, default: 0\r\n     }\r\n   },\r\n   required: true\r\n },\r\n status: { type: Number, default: 1 }, // 1 = Pending, 2 = Transferred\r\n}, { timestamps: true }\r\n);\r\n\r\n\r\n/**\r\n* @typedef Earning\r\n*/\r\n\r\n\r\nmodule.exports = mongoose.model('Earning', EarningSchema);\r\n\r\n\r\n   2. Optimized Queries:\r\n   1. It is seen that for performing different actions on the backend, multiple queries are being used, which also involve looping through data and applying queries in the loops. This is considered a very bad practice which will work with only small databases, and will eventually hang up the application even with a medium-sized database.\r\n   2. Bad Example Code:\r\n/**\r\n* Update users isBlocked and blockDate field in DB\r\n* This loop looks for a given user in a DB and updates user\u2019s isBlocked \r\n* and blockDate field in DB\r\n* \"users\" is an array of desired users, which are needed to be blocked\r\n* \"User\" is a model/collection of users of a system\r\n*/\r\nfor (const user of users) {\r\n User.findByIdAndUpdate({ _id: ObjectId(user._id) }, {\r\n   $set: {\r\n     isBlocked: true,\r\n     blockDate: new Date()\r\n   }\r\n }).exec()\r\n};\r\n\r\n\r\n   3. Good Example Code:\r\n/**\r\n* Update users isBlocked and blockDate field in DB\r\n* \"userIds\" is an array of desired users Id, which are needed to be\r\n* blocked\r\n* \"User\" is a model/collection of users of a system\r\n*/\r\n\r\n\r\nconst userId = [\r\n ObjectId(\"64bfacae7be35827834d2f57\"),\r\n ObjectId(\"64c0ec674631babb261aabe8\"),\r\n ObjectId(\"6448f0418af6e33d474252a5\"),\r\n];\r\n\r\n\r\nawait User.update({ _id: { $in: userIds } }, {\r\n $set: {\r\n   isBlocked: true,\r\n   blockDate: new Date()\r\n }\r\n});\r\n\r\n\r\n   3. Aggregation Pipelines:\r\n   1. MongoDB provides a very powerful tool to manage complex queries. You should learn how to write complex queries using MongoDB aggregate.\r\n   2. An aggregation pipeline can return results for groups of documents. For example, return the total, average, maximum, and minimum values.\r\n   3. An aggregation pipeline prevents you from writing queries/logic in loops. \r\n   4. Example: \r\n   1. This section shows how aggregation pipelines can help in writing optimized queries.\r\n   2. Consider a simple scenario, that we have the following collection named orders:\r\n  \r\n\r\n   1. Now we need to calculate the total quantity of medium-sized pizzas only.\r\n   2.", "mimetype": "text/plain", "start_char_idx": 29871, "end_char_idx": 33828, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "5f460e11-4bfb-42a0-9a38-211a14378faa": {"__data__": {"id_": "5f460e11-4bfb-42a0-9a38-211a14378faa", "embedding": null, "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\mern-stack.txt", "file_name": "mern-stack.txt", "file_type": "text/plain", "file_size": 51574, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "592676f1-da3d-4048-aed5-76f502bd859e", "node_type": "4", "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\mern-stack.txt", "file_name": "mern-stack.txt", "file_type": "text/plain", "file_size": 51574, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "hash": "c81d093f2b623120468c7ef8c43c9a2fc8d2baadc2fb0bea0433ea58fb49f345", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "51975ed8-9f0a-4907-8e02-0f74e552a71f", "node_type": "1", "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\mern-stack.txt", "file_name": "mern-stack.txt", "file_type": "text/plain", "file_size": 51574, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "hash": "93d6b3e05ac192a1021ccc02043c901c84e836a08b387bf3967197e63d0983dc", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "dd07c0ea-95cb-4fc4-be75-549c1f762e5c", "node_type": "1", "metadata": {}, "hash": "9ab710b89ea39e89a45731150803f76e7f2b4681a3d54ff8050d2d80457e8ee1", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Aggregation Pipelines:\r\n   1. MongoDB provides a very powerful tool to manage complex queries. You should learn how to write complex queries using MongoDB aggregate.\r\n   2. An aggregation pipeline can return results for groups of documents. For example, return the total, average, maximum, and minimum values.\r\n   3. An aggregation pipeline prevents you from writing queries/logic in loops. \r\n   4. Example: \r\n   1. This section shows how aggregation pipelines can help in writing optimized queries.\r\n   2. Consider a simple scenario, that we have the following collection named orders:\r\n  \r\n\r\n   1. Now we need to calculate the total quantity of medium-sized pizzas only.\r\n   2. See the following query comparisons made for the same example and notice the difference in how aggregation pipelines enhance query performance.\r\n   1. Bad Practice:\r\nconst calculateTotalQty = async (size = \"medium\") => {\r\n   try {\r\n       // Stage 1: Filter pizza order documents by pizza size\r\n       const orders = await db.orders.find({ size: size });\r\n       // Stage 2: Calculate total quantity\r\n       let totalQuantity = 0;\r\n       for (let i = 0; i < orders.length; i++)\r\n           totalQuantity += orders[i].quantity;\r\n\r\n\r\n       return totalQuantity;\r\n   } catch (error) {\r\n       return false;\r\n   }\r\n};\r\n\r\n\r\n   2. Good Practice:\r\nconst calculateTotalQty = async (size = \"medium\") => {\r\n   try {\r\n       const orders = await db.orders.aggregate([\r\n           // Stage 1: Filter pizza order documents by pizza size\r\n           {\r\n               $match: { size: size }\r\n           },\r\n           // Stage 2: Calculate total quantity\r\n           {\r\n               $group: { _id: null, totalQuantity: { $sum: \"$quantity\" } }\r\n           }\r\n       ]);\r\n\r\n\r\n       if (orders?.length)\r\n           return orders[0].totalQuantity;\r\n\r\n\r\n       return 0;\r\n   } catch (error) {\r\n       return false\r\n   }\r\n};\r\n\r\n\r\n   3. Both examples return the same result but using an aggregation pipeline made things better performance-wise.\r\n   4. For more details check ref. Aggregation Operations\r\n\r\n\r\n   4. Project Required Fields:\r\n   1. The results of the Database queries must only have required and desired fields.\r\n   2. Exclude all the unwanted or unneeded fields from the result of the Database queries.\r\n   3. This practice should be followed for all types of Databases.\r\n   4. Manual on how to use projection in MongoDB pipelines: $project (aggregation)\r\n\r\n\r\n   5. Indexes in Databases:\r\n   1. Indexes support the efficient execution of queries in any Database.\r\n   2. Therefore, we must create indexes for the fields which are frequently used to access the records.\r\n   3. For Example:\r\n   1. Single Field Indexes:\r\n  \r\n\r\n\r\n\r\n   2. Compound Indexes:\r\n  \r\n\r\n   4. For more details check ref.  Index\r\n________________\r\n\r\n\r\nESLint\r\n\t      1. Application Console Warnings:\r\n      1. The consoles of the applications should not have any errors or warnings. When we start a react-based application, it shows warnings and errors in the console. Most of the time, the warnings are ignored, but these should not be ignored as these can help a lot in optimizing the applications.\r\n      2. This should not only be restricted to the terminal console but also the browser\u2019s console.\r\n      3. Example:\r\n      1. Console with warnings:\r\n  \r\n\r\n\r\n\r\n      2. Console without warnings:\r\n      1. Make sure you don\u2019t have any warnings in the console.\r\n  \r\n\r\n\r\n\r\n      2. Logs:\r\n      1. All the logs added to the code for debugging purposes should be removed before committing/pushing the code.\r\n      2. Sometimes there can be scenarios where we need to debug use cases on the live site and have to push the logs. Those logs should be removed after the error is tracked and fixed.\r\n      3. Bad Practice Logs:\r\n      1. We often see these kinds of logs in the live application, which is a bad practice and should be removed before pushing the code.\r\n  \r\n\r\n  \r\n\r\n  \r\n\r\n(Application Logs)\r\n________________\r\n\r\n\r\nCode Documentation\r\n\t      1. Developer Docs. (dev-instructions.md):\r\n      1. Continuing with the point of Consistent and Meaningful Naming, we can write all the instructions in a file.\r\n      2. The purpose of this file is to keep all the developers working on a project on board for the naming convention and project structure-related things.\r\n      3. Team leads will be responsible for creating this file, and all the developers will follow the instructions.\r\n      4.", "mimetype": "text/plain", "start_char_idx": 33149, "end_char_idx": 37596, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "dd07c0ea-95cb-4fc4-be75-549c1f762e5c": {"__data__": {"id_": "dd07c0ea-95cb-4fc4-be75-549c1f762e5c", "embedding": null, "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\mern-stack.txt", "file_name": "mern-stack.txt", "file_type": "text/plain", "file_size": 51574, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "592676f1-da3d-4048-aed5-76f502bd859e", "node_type": "4", "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\mern-stack.txt", "file_name": "mern-stack.txt", "file_type": "text/plain", "file_size": 51574, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "hash": "c81d093f2b623120468c7ef8c43c9a2fc8d2baadc2fb0bea0433ea58fb49f345", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "5f460e11-4bfb-42a0-9a38-211a14378faa", "node_type": "1", "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\mern-stack.txt", "file_name": "mern-stack.txt", "file_type": "text/plain", "file_size": 51574, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "hash": "1b6a233a24142af51c332d714e10361b9e9c4652bc2777399160d77954b38478", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ddc43f85-5638-4e42-bf00-cc0ca07ac524", "node_type": "1", "metadata": {}, "hash": "0995332ffc3c143dea06387eac0aa65133edce1207f6fd0d028e92552c357848", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "2. Sometimes there can be scenarios where we need to debug use cases on the live site and have to push the logs. Those logs should be removed after the error is tracked and fixed.\r\n      3. Bad Practice Logs:\r\n      1. We often see these kinds of logs in the live application, which is a bad practice and should be removed before pushing the code.\r\n  \r\n\r\n  \r\n\r\n  \r\n\r\n(Application Logs)\r\n________________\r\n\r\n\r\nCode Documentation\r\n\t      1. Developer Docs. (dev-instructions.md):\r\n      1. Continuing with the point of Consistent and Meaningful Naming, we can write all the instructions in a file.\r\n      2. The purpose of this file is to keep all the developers working on a project on board for the naming convention and project structure-related things.\r\n      3. Team leads will be responsible for creating this file, and all the developers will follow the instructions.\r\n      4. This file should be well-documented and must include instructions for developers like naming convention schemes and other coding techniques being used in the project.\r\n      5. Sample dev-instructions.md file:\r\n# Introduction\r\n\r\n\r\nThis document serves as the complete definition of the application's coding standards for source code in JavaScript.\r\n\r\n\r\n# Collection/model names:\r\n\r\n\r\nCollection/model names must be singular and initial capital.\r\n\r\n\r\n# Variable or function names\r\n\r\n\r\nAll variable or function names must be short and camel case.\r\n\r\n\r\n# Folder or file names\r\n\r\n\r\nAll folder or file names must be all lowercase, short, and may include underscores (\\_) or dashes (-), but no additional punctuation.\r\n\r\n\r\n# Imports\r\n\r\n\r\n## Import paths\r\n\r\n\r\nES module files must use the import statement to import other ES module files.\r\n\r\n\r\n# Use destructive properties\r\n\r\n\r\nRef:\r\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\r\nhttps://dmitripavlutin.com/javascript-object-destructuring/\r\n\r\n\r\n# Use arrow functions\r\n\r\n\r\n# Use template literals\r\n\r\n\r\n# Use promises or async/await along with handled rejection\r\n\r\n\r\n# Coding standards ref.\r\n\r\n\r\nMUST READ THIS DOCUMENT: https://docs.google.com/document/d/16oTbh6MAV8YcZFUEi75syZf6mfRDBIjwIcp4Ro2T-Oo/edit\r\n\r\n\r\n# Super/private admin\r\n\r\n\r\n## How to make a super/private admin\r\n\r\n\r\nRun the following URL in browser and register a super/private admin in database:\r\n\r\n\r\nAPP_BASE_URL/v1/admin/staff/private-admin\r\n________________\r\n\r\n\r\n\r\n\r\nOther\r\n\t      1. Try-catch Statements:\r\n      1. Try-catch statements are used in JS to handle unwanted errors during the execution of a program.\r\n      2. Try:\r\n      1. The code block to be tested for errors while the program is being executed is written in the try block.\r\n      3. Catch: \r\n      1. The code block that is executed when an error occurs in the try block is written in the catch block.\r\ntry {\r\n   // write code here\r\n} catch (error) {\r\n   // write code here\r\n}\r\n\r\n\r\n      2. Error & Exception Handling:\r\n      1. In any application, there will be situations where something goes wrong, such as an external API call returning an error, a database query failing, or input validation failing. It\u2019s important to properly handle these errors to ensure that the application remains stable and the user is informed of the problem.\r\n      2. Handle exceptions carefully.\r\n      3. In case of exceptions, return appropriate error messages to the user along with the error so that it can be fixed or corrected later.\r\n\r\n\r\n      3. Time/Space Complexity:\r\n      1. Writing optimized code is the most important thing for any application. Reducing the time and space complexity will make the application more optimized. \r\n      2. On a very basic level, writing more loops increases the time complexity.\r\n      3. Writing more lines of code increases space complexity.\r\n      4. We should try to reduce the time and space complexity wherever possible.\r\n      5. An example is explained below to better understand this thing.\r\n      6. Program Requirements:\r\n      1. Webstats JSON API\r\n      2. The endpoint above returns the chats stats collected against unique website ids.\r\n      3. Each entry contains:\r\n      1. Website Id\r\n      2. Date\r\n      3. A total number of chats\r\n      4. A total of missed chats \r\n      5. There will only be one entry for a website per day.\r\n      4. For example, if there are a total of 5 websites for 14 days, there will be 70 entries in the file.\r\n      5.", "mimetype": "text/plain", "start_char_idx": 36714, "end_char_idx": 41126, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ddc43f85-5638-4e42-bf00-cc0ca07ac524": {"__data__": {"id_": "ddc43f85-5638-4e42-bf00-cc0ca07ac524", "embedding": null, "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\mern-stack.txt", "file_name": "mern-stack.txt", "file_type": "text/plain", "file_size": 51574, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "592676f1-da3d-4048-aed5-76f502bd859e", "node_type": "4", "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\mern-stack.txt", "file_name": "mern-stack.txt", "file_type": "text/plain", "file_size": 51574, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "hash": "c81d093f2b623120468c7ef8c43c9a2fc8d2baadc2fb0bea0433ea58fb49f345", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "dd07c0ea-95cb-4fc4-be75-549c1f762e5c", "node_type": "1", "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\mern-stack.txt", "file_name": "mern-stack.txt", "file_type": "text/plain", "file_size": 51574, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "hash": "e6e8657952a48bdff57abec20a7176255609ed5187dcac1beb7fc983d7531780", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b87043a4-1421-4320-b346-56b0fe68a882", "node_type": "1", "metadata": {}, "hash": "1d5c133793955300b486bd697b45854ab00f962f92935e3c507cc0b0b6e56ec1", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "2. On a very basic level, writing more loops increases the time complexity.\r\n      3. Writing more lines of code increases space complexity.\r\n      4. We should try to reduce the time and space complexity wherever possible.\r\n      5. An example is explained below to better understand this thing.\r\n      6. Program Requirements:\r\n      1. Webstats JSON API\r\n      2. The endpoint above returns the chats stats collected against unique website ids.\r\n      3. Each entry contains:\r\n      1. Website Id\r\n      2. Date\r\n      3. A total number of chats\r\n      4. A total of missed chats \r\n      5. There will only be one entry for a website per day.\r\n      4. For example, if there are a total of 5 websites for 14 days, there will be 70 entries in the file.\r\n      5. We need to write a program that will retrieve data from the provided URL and output the sum of chats and missed chats per website Id for a given date range. Date filtering is optional. If date filters are not provided, the entire dataset needs to be aggregated. Partial date filtering should also be supported i.e. If only a start date is provided - data is filtered from a given start date without end date filtering.\r\n      6. Example: Without date range function call\r\n      1. processStatistics()\r\n      7. Example: With date range function call\r\n      1. processStatistics(\u20182019-04-05\u2019, '2019-04-12')\r\n      2. processStatistics(\u20182019-04-05\u2019)\r\n      3. processStatistics(\u2018\u2019, '2019-04-12')\r\n      8. Below is the code that is completely working fine for the requirements:\r\nconst axios = require('axios');\r\nconst processStatistics = async function (startDate, endDate) {\r\n   let response = await fetchAllRecords()\r\n   if (response && response.data) {\r\n       const websiteStats = response.data;\r\n       let processedStats;\r\n       // Fetch data without date filters\r\n       if (!startDate && !endDate) {\r\n           const aggregate = {};\r\n           websiteStats.forEach((website) => {\r\n               if (aggregate[website.websiteId]) {\r\n                   aggregate[website.websiteId].chats += website.chats;\r\n                   aggregate[website.websiteId].missedChats += website.missedChats;\r\n                   delete aggregate[website.websiteId].date\r\n               } else {\r\n                   aggregate[website.websiteId] = website;\r\n                   delete aggregate[website.websiteId].date\r\n               }\r\n           });\r\n           processedStats = Object.values(aggregate);\r\n           console.log(processedStats);\r\n           return processedStats;\r\n       }\r\n       // Fetch data with date filters\r\n       let start = startDate ? new Date(startDate) : ''\r\n       let end = endDate ? new Date(endDate) : ''\r\n       let filterWebsites = {}\r\n       let filteredData;\r\n       if (start && end) {\r\n           filteredData = websiteStats.filter(item => new Date(item.date) >= start && new Date(item.date) <= end)\r\n       }\r\n       else if (start && !end) {\r\n           filteredData = websiteStats.filter(item => new Date(item.date) >= start)\r\n       }\r\n       else if (!start && end) {\r\n           filteredData = websiteStats.filter(item => new Date(item.date) <= end)\r\n       }\r\n       filteredData.forEach((website) => {\r\n           if (filterWebsites[website.websiteId]) {\r\n               filterWebsites[website.websiteId].chats += website.chats;\r\n               filterWebsites[website.websiteId].missedChats += website.missedChats;\r\n\r\n\r\n\r\n\r\n           } else {\r\n               filterWebsites[website.websiteId] = website;\r\n               delete filterWebsites[website.websiteId].date\r\n           }\r\n       });\r\n       processedStats = Object.values(filterWebsites);\r\n       console.log(processedStats);\r\n       return processedStats;\r\n   }\r\n   else {\r\n       return [];\r\n   }\r\n}\r\nconst fetchAllRecords = async () => {\r\n   try {\r\n       const response = await axios.get('https://bitbucket.org/!api/2.0/snippets/tawkto/aA8zqE/4f62624a75da6d1b8dd7f70e53af8d36a1603910/files/webstats.json');\r\n       return response;\r\n   }\r\n   catch (e) {\r\n       return false;\r\n   }\r\n}\r\nprocessStatistics();\r\n\r\n\r\n\r\n\r\n      7. This code gives the desired results, but in terms of optimizations, this is not a good code.\r\n      8. The code manages the conditions for with dates and without dates separately. Which is adding up additional lines of code, thus increasing the utilized space.\r\n      9.", "mimetype": "text/plain", "start_char_idx": 40362, "end_char_idx": 44724, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b87043a4-1421-4320-b346-56b0fe68a882": {"__data__": {"id_": "b87043a4-1421-4320-b346-56b0fe68a882", "embedding": null, "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\mern-stack.txt", "file_name": "mern-stack.txt", "file_type": "text/plain", "file_size": 51574, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "592676f1-da3d-4048-aed5-76f502bd859e", "node_type": "4", "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\mern-stack.txt", "file_name": "mern-stack.txt", "file_type": "text/plain", "file_size": 51574, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "hash": "c81d093f2b623120468c7ef8c43c9a2fc8d2baadc2fb0bea0433ea58fb49f345", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ddc43f85-5638-4e42-bf00-cc0ca07ac524", "node_type": "1", "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\mern-stack.txt", "file_name": "mern-stack.txt", "file_type": "text/plain", "file_size": 51574, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "hash": "92ad772e500adad8b8ff33d828951f5a3ffb5149e5ac14f8f5e42cebf090e8f0", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "95f0d650-492b-4107-b3b2-765971c3127a", "node_type": "1", "metadata": {}, "hash": "c996ecd837f81f02b54b1583557f03f6b11df47817675676850fb6f964a67739", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "This code gives the desired results, but in terms of optimizations, this is not a good code.\r\n      8. The code manages the conditions for with dates and without dates separately. Which is adding up additional lines of code, thus increasing the utilized space.\r\n      9. The part where it manages the stats for the condition without date ranges.\r\n// Fetch data without date filters\r\nif (!startDate && !endDate) {\r\n   const aggregate = {};\r\n   websiteStats.forEach((website) => {\r\n       if (aggregate[website.websiteId]) {\r\n           aggregate[website.websiteId].chats += website.chats;\r\n           aggregate[website.websiteId].missedChats += website.missedChats;\r\n           delete aggregate[website.websiteId].date\r\n       } else {\r\n           aggregate[website.websiteId] = website;\r\n           delete aggregate[website.websiteId].date\r\n       }\r\n   });\r\n   processedStats = Object.values(aggregate);\r\n   return processedStats;\r\n}\r\n\r\n\r\n      10. The part where it is managing the stats for the condition with date ranges.\r\n// Fetch data with date filters\r\nconst start = startDate ? new Date(startDate) : ''\r\nconst end = endDate ? new Date(endDate) : ''\r\nlet filterWebsites = {}\r\nlet filteredData;\r\n\r\n\r\nif (start && end) {\r\n   filteredData = websiteStats.filter(item => new Date(item.date) >= start && new Date(item.date) <= end)\r\n}\r\nelse if (start && !end) {\r\n   filteredData = websiteStats.filter(item => new Date(item.date) >= start)\r\n}\r\nelse if (!start && end) {\r\n   filteredData = websiteStats.filter(item => new Date(item.date) <= end)\r\n}\r\n\r\n\r\nfilteredData.forEach((website) => {\r\n   if (filterWebsites[website.websiteId]) {\r\n       filterWebsites[website.websiteId].chats += website.chats;\r\n       filterWebsites[website.websiteId].missedChats += website.missedChats;\r\n\r\n\r\n\r\n\r\n   } else {\r\n       filterWebsites[website.websiteId] = website;\r\n       delete filterWebsites[website.websiteId].date\r\n   }\r\n});\r\nprocessedStats = Object.values(filterWebsites);\r\nreturn processedStats;\r\n\r\n\r\n      11. Every character takes 1 byte, and if there are let's say 200 characters that are additional, they are adding up 200 bytes of additional space to the program. Which is definitely not the optimized way in terms of space utilized.\r\n      12. Let\u2019s optimize this solution to reduce the space complexity.\r\nconst axios = require(\"axios\");\r\nconst fetchAllRecords = async () => {\r\n   try {\r\n       const response = await axios.get(\r\n           \"https://bitbucket.org/!api/2.0/snippets/tawkto/aA8zqE/4f62624a75da6d1b8dd7f70e53af8d36a1603910/files/webstats.json\"\r\n       );\r\n       return response;\r\n   } catch (e) {\r\n       return false;\r\n   }\r\n};\r\nconst filterData = (start = \"\", end = \"\", data) => {\r\n   start = start ? new Date(start) : \"\"\r\n   end = end ? new Date(end) : \"\";\r\n   if (start && end) {\r\n       return data.filter(\r\n           (item) => new Date(item.date) >= start && new Date(item.date) <= end\r\n       );\r\n   } else if (start && !end) {\r\n       return data.filter(\r\n           (item) => new Date(item.date) >= start\r\n       );\r\n   } else if (!start && end) {\r\n       return data.filter((item) => new Date(item.date) <= end);\r\n   }\r\n   else\r\n       return data;\r\n}\r\nconst processStatistics = async function (startDate, endDate) {\r\n   let response = await fetchAllRecords();\r\n   if (response && response.data) {\r\n       let filteredData = filterData(startDate, endDate, response.data);\r\n       const aggregate = {};\r\n       filteredData.forEach((website) => {\r\n           if (aggregate[website.websiteId]) {\r\n               aggregate[website.websiteId].chats += website.chats;\r\n               aggregate[website.websiteId].missedChats += website.missedChats;\r\n               delete aggregate[website.websiteId].date;\r\n           } else {\r\n               aggregate[website.websiteId] = website;\r\n               delete aggregate[website.websiteId].date;\r\n           }\r\n       });\r\n       console.log(aggregate);\r\n       return Object.values(aggregate);\r\n   } else {\r\n       return [];\r\n   }\r\n};\r\nprocessStatistics();\r\n\r\n\r\n      13. Initially, this program was taking around 65 lines and is now reduced to 50. This has optimized the program for the space complexity.\r\n      14. Now we need to optimize the program for time complexity. This program currently has 2 loops. We need to reduce the loops to improve the performance of the code.", "mimetype": "text/plain", "start_char_idx": 44454, "end_char_idx": 48800, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "95f0d650-492b-4107-b3b2-765971c3127a": {"__data__": {"id_": "95f0d650-492b-4107-b3b2-765971c3127a", "embedding": null, "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\mern-stack.txt", "file_name": "mern-stack.txt", "file_type": "text/plain", "file_size": 51574, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "592676f1-da3d-4048-aed5-76f502bd859e", "node_type": "4", "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\mern-stack.txt", "file_name": "mern-stack.txt", "file_type": "text/plain", "file_size": 51574, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "hash": "c81d093f2b623120468c7ef8c43c9a2fc8d2baadc2fb0bea0433ea58fb49f345", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b87043a4-1421-4320-b346-56b0fe68a882", "node_type": "1", "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\mern-stack.txt", "file_name": "mern-stack.txt", "file_type": "text/plain", "file_size": 51574, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "hash": "8f67b531a5026c04bbc1d767bc0ec4602dcf27c7b4147d699bd8befdfbe80852", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Initially, this program was taking around 65 lines and is now reduced to 50. This has optimized the program for the space complexity.\r\n      14. Now we need to optimize the program for time complexity. This program currently has 2 loops. We need to reduce the loops to improve the performance of the code.\r\nreturn data.filter(\r\n   (item) => new Date(item.date) >= start && new Date(item.date) <= end\r\n);\r\nfilteredData.forEach((website) => {\r\n\r\n\r\n      15. In the code below we have optimized it enough to remove one loop. It has also reduced a little more space as well.\r\nconst axios = require(\"axios\");\r\nconst fetchAllRecords = async () => {\r\n   try {\r\n       const response = await axios.get(\"https://bitbucket.org/!api/2.0/snippets/tawkto/aA8zqE/4f62624a75da6d1b8dd7f70e53af8d36a1603910/files/webstats.json\"\r\n       );\r\n       return response;\r\n   } catch (e) {\r\n       return false;\r\n   }\r\n};\r\nfunction isWithinFilterRange(start, end, websiteDate) {\r\n   if (start && end)\r\n       return websiteDate >= start && websiteDate <= end;\r\n   if (start && !end)\r\n       return websiteDate >= start;\r\n   if (!start && end)\r\n       return websiteDate <= end;\r\n   return false;\r\n}\r\nconst processStatistics = async function (startDate, endDate) {\r\n   let response = await fetchAllRecords();\r\n   if (response && response.data) {\r\n       const websiteStats = response.data;\r\n       startDate = startDate ? new Date(startDate) : \"\"\r\n       endDate = endDate ? new Date(endDate) : \"\";\r\n       const aggregate = {};\r\n       websiteStats.forEach((website) => {\r\n           if (isWithinFilterRange(startDate, endDate, new Date(website.date))) {\r\n               if (aggregate[website.websiteId]) {\r\n                   aggregate[website.websiteId].chats += website.chats;\r\n                   aggregate[website.websiteId].missedChats += website.missedChats;\r\n                   delete aggregate[website.websiteId].date;\r\n               } else {\r\n                   aggregate[website.websiteId] = website;\r\n                   delete aggregate[website.websiteId].date;\r\n               }\r\n           }\r\n       });\r\n       return Object.values(aggregate);\r\n   } else {\r\n       return [];\r\n   }\r\n};\r\nprocessStatistics('2019-04-05', '2019-04-12');\r\n\r\n\r\n      16. The program is now 45 lines, with 1 loop.\r\n      17. We should try to reduce the space and time wherever it is possible.\r\n\r\n\r\n      4. Git Necessities:\r\n      1. We should configure and use Git properly with our project. Required actions are listed in the ArhamSoft official document Git Standards, Instructions & Guidelines - V1\r\n________________\r\nConclusion:\r\nIn summary, adhering to the above MERN coding standards and guidelines ensures the development of high-quality, maintainable, and efficient applications. By following these best practices, we create a solid foundation for successful MERN projects. Emphasizing clean code and efficient testing leads to improved collaboration and a seamless development process, resulting in robust and reliable applications for our users. \r\n\r\n\r\nThank You!", "mimetype": "text/plain", "start_char_idx": 48495, "end_char_idx": 51534, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d9d17ad3-855b-4a82-b7f0-3b4654f65bf9": {"__data__": {"id_": "d9d17ad3-855b-4a82-b7f0-3b4654f65bf9", "embedding": null, "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\php.txt", "file_name": "php.txt", "file_type": "text/plain", "file_size": 42456, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c8c3353a-e93e-4fd8-b4d4-bca4ab611ecb", "node_type": "4", "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\php.txt", "file_name": "php.txt", "file_type": "text/plain", "file_size": 42456, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "hash": "5963acde83bef40d98389ad406c63c8f8eadc4be4b1906da6718d341b51b28d7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "920029f1-a30c-4e8a-bb09-1bb5820d3a76", "node_type": "1", "metadata": {}, "hash": "b79293cd51126197e8c6a9ce92087a2f23065e97a8fb541ef8eef1cb12f0d7c8", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "\ufeffVersion: 1.0\r\nDate: July 27, 2023\r\nReference: ArhamSoft (Pvt) Ltd.\r\n\r\n\r\nDocument Information\r\n\t\r\n\r\nCategory\r\n\tInformation\r\n\tDocument\r\n\tPHP Coding Standards & Guidelines\r\n\tVersion\r\n\t1.0\r\n\tIdentifier\r\n\tArhamSoft (Pvt) Ltd.\r\n\tStatus\r\n\tIssued\r\n\tAuthor(s)\r\n\tMr. Saeed Ullah Khan (PHP Project Manager)\r\n\tEditor(s)\r\n\tMs. Ayesha Shaukat (MERN Team Lead)\r\n\tReviewer(s)\r\n\tMr. Mahmood Sultan (CIO)\r\n\tApprover(s)\r\n\tMr. Adil Irfan (CEO)\r\n\tCreation Date\r\n\tJuly 27, 2023\r\n\tIssue Date\r\n\tJuly 27, 2023\r\n\tEffective Date\r\n\tJuly 27, 2023\r\n\tControl Status\r\n\tControlled\r\n\tDistribution\r\n\tIT\r\n\tDisclaimer\r\n\tThis document contains confidential information. Do not distribute this document without prior approval from the higher management of ArhamSoft (Pvt) Ltd.\r\n\t________________\r\n\r\n\r\n\r\n\r\nDocument Revision History\r\n\t\r\n\r\nAuthor(s)\r\n\tDate\r\n\tVersion\r\n\tDocument Link\r\n\tDescription\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\nTable of Contents\r\n\t\r\n\r\nIntroduction:        6\r\nPHP Coding Standards & Guidelines:        6\r\nGeneral        7\r\n1. Project Structure:        7\r\n2. README.md File:        7\r\n3. Static Default Values:        7\r\n4. Package.json:        7\r\n6. Secret Keys & Environmental Variables:        7\r\n7. Composer / Npm Packages and Versions:        8\r\n8. Dependencies Vs DevDependencies:        8\r\na. Require:        8\r\nb. Require_dev:        8\r\n9. Common Functions in Helper Folder:        10\r\n10. No Duplicate Code:        10\r\n11. Consistent and Meaningful Naming:        10\r\nc. Guidelines for Variables/Functions Naming:        10\r\nd. Examples:        11\r\ni. Controller:        11\r\nii. Route:        12\r\n1. Route Url:        12\r\n2. Route Name:        12\r\niii. Database Related:        12\r\n1. Migration:        12\r\n2. Table:        13\r\n3. Pivot Table:        13\r\n4. Table Columns:        13\r\n5. Foreign Key:        13\r\n6. Primary Key:        14\r\n7. Model:        14\r\n8. Model Single relations [Has One, Belongs To]:        14\r\n9. Model all other relations and methods [Has Many, Other]:        14\r\n10. Functions:        14\r\n11. Methods in Resources Controller:        14\r\n12. Variable Types:        15\r\nCodeStyle        16\r\n1. Commenting:        16\r\ne. Bad Commenting Examples:        16\r\nf. Good Commenting Examples:        16\r\n2. No Commented Out Code:        19\r\n3. Switches for Conditional Rendering:        19\r\nJavascript ES6/7        20\r\n1. Variables:        20\r\n2. Destructive Properties:        20\r\n3. Arrow Functions:        21\r\n4. Template Literals:        21\r\nc. Examples:        21\r\ni. Without string literals:        21\r\nii. With string literals:        22\r\n5. Promises and async/await:        22\r\nPHP - Laravel        23\r\n1. Use of Route Model Binding:        23\r\n2. Use Eloquent ORM:        23\r\n3. Follow PSR Standards:        23\r\n4. Use Blade Templating Engine:        23\r\n5. Use Dependency Injection:        23\r\n6. Use Service Providers:        23\r\n7. Use Middleware:        23\r\n8. Use Queues:        23\r\n9. Proper HTTP Methods:        23\r\n10.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3460, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "920029f1-a30c-4e8a-bb09-1bb5820d3a76": {"__data__": {"id_": "920029f1-a30c-4e8a-bb09-1bb5820d3a76", "embedding": null, "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\php.txt", "file_name": "php.txt", "file_type": "text/plain", "file_size": 42456, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c8c3353a-e93e-4fd8-b4d4-bca4ab611ecb", "node_type": "4", "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\php.txt", "file_name": "php.txt", "file_type": "text/plain", "file_size": 42456, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "hash": "5963acde83bef40d98389ad406c63c8f8eadc4be4b1906da6718d341b51b28d7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d9d17ad3-855b-4a82-b7f0-3b4654f65bf9", "node_type": "1", "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\php.txt", "file_name": "php.txt", "file_type": "text/plain", "file_size": 42456, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "hash": "2e6cd16ab840f8bf00afd36e4a1d69271a0347b5009fff644e84b395408ce0d6", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d4093388-2ed2-42b3-92b9-d34489916fc7", "node_type": "1", "metadata": {}, "hash": "e97351bc0d310bf02256e5b128b85fd997331b782d5f3afeee67216b27818879", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Variables:        20\r\n2. Destructive Properties:        20\r\n3. Arrow Functions:        21\r\n4. Template Literals:        21\r\nc. Examples:        21\r\ni. Without string literals:        21\r\nii. With string literals:        22\r\n5. Promises and async/await:        22\r\nPHP - Laravel        23\r\n1. Use of Route Model Binding:        23\r\n2. Use Eloquent ORM:        23\r\n3. Follow PSR Standards:        23\r\n4. Use Blade Templating Engine:        23\r\n5. Use Dependency Injection:        23\r\n6. Use Service Providers:        23\r\n7. Use Middleware:        23\r\n8. Use Queues:        23\r\n9. Proper HTTP Methods:        23\r\n10. Input Validation:        24\r\nESLint        25\r\n1. Application Console Warnings:        25\r\n2. Logs:        25\r\nc. Bad Practice Logs:        25\r\nCode Documentation        27\r\n1. Developer Docs. (dev-instructions.md):        27\r\ne. Sample dev-instructions.md file:        27\r\nSecurity        29\r\n1. SQL Injection Prevention:        29\r\nc. Example:        29\r\n2. Avoid using ids in URLs:        29\r\nb. Example:        29\r\n3. Securely Upload Files:        29\r\n4. Use Secure Plugins, Themes, and Extensions:        29\r\n5. Use Tokens, IP-based white listings, and rate limiting:        29\r\nWeb Optimization        30\r\n1. Minify and Compress HTML, CSS, and JavaScript:        30\r\n2. Use CSS and JavaScript Bundling:        30\r\n3. Optimize Images:        30\r\n4. Implement Caching:        30\r\n5. Optimize Database Queries:        30\r\n6. Implement HTTP/2:        30\r\n7. Use Server-Side Caching:        30\r\nOther        31\r\n1. Try-catch Statements:        31\r\n1. Error & Exception Handling:        31\r\ni. Creating Our Own Exception Class:        33\r\n2. Time / Space Complexity:        36\r\n3. Git Necessities:        36\r\nConclusion:        37\r\n\r\n\r\n________________\r\nIntroduction:\r\nThe PHP Coding Standards and Guidelines provide a comprehensive set of rules and best practices for writing PHP code. These standards aim to promote consistency, readability, and maintainability across projects. By adhering to the guidelines, developers can produce high-quality code that is easy to understand and collaborate on. \r\n\r\n\r\nFollowing are a few PHP coding standards and guidelines for code review. We need to enforce them before we get into the more complex ones. The team lead will be responsible for enforcing these standards on every project. Once implemented, we can add some more advanced in the next phases.\r\n\r\n\r\nNote: Any team or project found not implementing these standards, will be penalized along with the team lead.\r\n\r\n\r\nPHP Coding Standards & Guidelines:\r\nTo improve the readability of the Coding Standard Document and to apply the coding standards effectively, we have organized the entire content and included supplementary examples. The document is divided into several sections, each catering to specific aspects:\r\n\r\n\r\n1. General\r\n2. CodeStyle\r\n3. Javascript ES6/7\r\n4. PHP - Laravel\r\n5. ESLint\r\n6. Code Documentation\r\n7. Security\r\n8. Web Optimization\r\n9. Other\r\n________________\r\n\r\n\r\n\r\n\r\nGeneral\r\n\t\r\n\r\nWhen conducting code reviews for PHP projects, here are some general coding standards and best practices to consider:\r\n1. Project Structure:\r\n   1. Split stuff into multiple layers and tiers as per requirements.\r\n   2. Separate presentation/UI, database & business logic, etc.\r\n   3. For example, all the assets are in a separate directory, business logic like reducers & actions are kept in other folders, and controllers have their own place, similar to the models.\r\n   4. An example project structure will be shared soon.\r\n1. README.md File:\r\n   1. This file should include brief and clear project details (e.g. title, purpose, build status, tech stack/framework) and other instructions like configuring and running the project on local machines.\r\n   2. This file should also include the required software/dependencies and the required version.\r\n2. Static Default Values:\r\n   1.", "mimetype": "text/plain", "start_char_idx": 2847, "end_char_idx": 6743, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d4093388-2ed2-42b3-92b9-d34489916fc7": {"__data__": {"id_": "d4093388-2ed2-42b3-92b9-d34489916fc7", "embedding": null, "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\php.txt", "file_name": "php.txt", "file_type": "text/plain", "file_size": 42456, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c8c3353a-e93e-4fd8-b4d4-bca4ab611ecb", "node_type": "4", "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\php.txt", "file_name": "php.txt", "file_type": "text/plain", "file_size": 42456, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "hash": "5963acde83bef40d98389ad406c63c8f8eadc4be4b1906da6718d341b51b28d7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "920029f1-a30c-4e8a-bb09-1bb5820d3a76", "node_type": "1", "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\php.txt", "file_name": "php.txt", "file_type": "text/plain", "file_size": 42456, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "hash": "c72febd2f5d72dff6482cb61e02572e944d0cf219db1ecff0683c0ed33ca7f00", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6b1464ab-ca70-46ad-a6c6-7c189ade3f0f", "node_type": "1", "metadata": {}, "hash": "8f712554eef149b1270388d5472c93c18272c33cb483d5f724a9b3b3d7c468b8", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Other\r\n________________\r\n\r\n\r\n\r\n\r\nGeneral\r\n\t\r\n\r\nWhen conducting code reviews for PHP projects, here are some general coding standards and best practices to consider:\r\n1. Project Structure:\r\n   1. Split stuff into multiple layers and tiers as per requirements.\r\n   2. Separate presentation/UI, database & business logic, etc.\r\n   3. For example, all the assets are in a separate directory, business logic like reducers & actions are kept in other folders, and controllers have their own place, similar to the models.\r\n   4. An example project structure will be shared soon.\r\n1. README.md File:\r\n   1. This file should include brief and clear project details (e.g. title, purpose, build status, tech stack/framework) and other instructions like configuring and running the project on local machines.\r\n   2. This file should also include the required software/dependencies and the required version.\r\n2. Static Default Values:\r\n   1. All the static/constant default/hard-coded values must be stored in a single file instead of being used directly in the code.\r\n\r\n\r\n3. Package.json:\r\n   1. There should not be any package that is not being used in the project.\r\n   2. A package.json should not have any unwanted details added to the file.\r\n\r\n\r\n4. Clean, Clear & Formatted Code:\r\n   1. Code should be clear, clean, readable, properly formatted, and indented.\r\n   2. More instructions on code formatting can be seen in the document attached below with the point Git Necessities, explained below.\r\n\r\n\r\n5. Secret Keys & Environmental Variables:\r\n   1. If the project has any kind of credentials, these must be stored in the .env file.\r\n   2. All the .env files must have an example (e.g. .env.example) file with the sample values.\r\n   3. Do not push the .env to remote repos. More instructions in Git Necessities point.\r\n\r\n\r\n6. Composer / Npm Packages and Versions:\r\n   1. While starting any project use the latest stable version of the framework, and all the packages being used in the project.\r\n   2. Keep updating the package versions, while the project is in the development state.\r\n   3. Please make sure the packages being used have enough downloads and are secure to use.\r\n   4. Composer update / Npm-check-updates is a package that you can use to identify the upgradable packages and upgrade them. \r\n      1. Packagist\r\n      2. npm-check-updates\r\n      3. Once you have installed the npm-check-updates package, you can check the upgradable packages in any project by running the command ncu. It will list upgradable packages with the currently installed and latest available version.\r\n      4. For Composer, use the composer show \u2013latest command to get the latest versions.\r\n  \r\n\r\n\r\n\r\n7. Dependencies Vs DevDependencies:\r\n   1. Require:\r\n      1. It defines actual dependency as well as the package version.\r\n      2. The require lists the package required by this package.\r\n      3. The package will not be installed unless those requirements can be met.\r\n\r\n\r\n   2. Require_dev:\r\n      1. It defines the packages necessary for developing a project.\r\n      2. The require_dev lists packages required for developing this package, or running tests, etc.\r\n      3. The dev requirements of the root package are installed by default. Both install and update support the \u201c\u2013no-dev\u201d option that prevents dev dependencies from being installed.\r\n      4. On the other hand, if devDependencies are installed in the dependencies section, all the code of these packages will be included in the build, thus greater size with useless code.\r\n  \r\n\r\n8. Common Functions in Helper Folder:\r\n   1. Common functions should be in utils or some helper folder.\r\n   2. The screenshot attached below shows that inside the utils folder, there is a file named functions.js which contains all the common functions e.g. ipfsToUrl is the common function used many times in the project but its definition is written once only.\r\n  \r\n\r\n9. No Duplicate Code:\r\n   1. Continuing with the previous point, there should not be any duplicated code. For example, the developer can define the same function in 2 different files, and use it in the respective file. But, there should not be any such case, and all the repeating codes should be defined once.\r\n   2. Note: We encourage you to practice this point for both Node.js & ReactJS apps but to make things easier, for now, we\u2019ve added this clause for Node.js only.\r\n\r\n\r\n10. Consistent and Meaningful Naming:\r\n   1.", "mimetype": "text/plain", "start_char_idx": 5815, "end_char_idx": 10238, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "6b1464ab-ca70-46ad-a6c6-7c189ade3f0f": {"__data__": {"id_": "6b1464ab-ca70-46ad-a6c6-7c189ade3f0f", "embedding": null, "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\php.txt", "file_name": "php.txt", "file_type": "text/plain", "file_size": 42456, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c8c3353a-e93e-4fd8-b4d4-bca4ab611ecb", "node_type": "4", "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\php.txt", "file_name": "php.txt", "file_type": "text/plain", "file_size": 42456, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "hash": "5963acde83bef40d98389ad406c63c8f8eadc4be4b1906da6718d341b51b28d7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d4093388-2ed2-42b3-92b9-d34489916fc7", "node_type": "1", "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\php.txt", "file_name": "php.txt", "file_type": "text/plain", "file_size": 42456, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "hash": "a1894834f4e556cc79121e3f68c8d8e6f12d1b42192e7e784192bb2a58ead523", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "edf13373-1d20-41e4-99f5-c09e12b49d40", "node_type": "1", "metadata": {}, "hash": "8e79c26b5599274b5490f124ec7475afb2db3153850fe81192e1a6b319fe2daf", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Common functions should be in utils or some helper folder.\r\n   2. The screenshot attached below shows that inside the utils folder, there is a file named functions.js which contains all the common functions e.g. ipfsToUrl is the common function used many times in the project but its definition is written once only.\r\n  \r\n\r\n9. No Duplicate Code:\r\n   1. Continuing with the previous point, there should not be any duplicated code. For example, the developer can define the same function in 2 different files, and use it in the respective file. But, there should not be any such case, and all the repeating codes should be defined once.\r\n   2. Note: We encourage you to practice this point for both Node.js & ReactJS apps but to make things easier, for now, we\u2019ve added this clause for Node.js only.\r\n\r\n\r\n10. Consistent and Meaningful Naming:\r\n   1. The naming scheme for the methods, classes, variables, files, and folders should be consistent throughout the project. No matter how many developers are working on a project.\r\n   2. Clear and meaningful names make code more readable and understandable and act as self-documentation within code.\r\n   3. Guidelines for Variables/Functions Naming:\r\n      1. Use descriptive names that convey the purpose, meaning, or role of the variable/function.\r\n      2. Follow a consistent naming convention throughout the codebase.\r\n      3. Choose names that are concise but still descriptive.\r\n      4. Use camel case (e.g., myVariableName) or underscore-separated (e.g., my_variable_name) naming conventions based on the programming languages or style guide you are following. In JS, camel case is preferred so better opt for this convention.\r\n   4. Examples:\r\n      1. If a variable is named as camelCase, all the variables should be camelCased in the project.\r\n      2. If a function\u2019s name is defined as separated_by_underscores, all the function names in the whole project should be separated_by_underscores.\r\n      3. If a class/component\u2019s name is defined as InitialCapital, all the classes/components in the project should be InitialCapital\r\n      4. Schemas should be: Controller/Model/Library or any Helper class name will be singular and Initial Capital and also the name of the file will be same, which throws an error on the server if a file name first letter is in lower case.\r\n 1. <?php\r\n2. class  ClassName { // <----- Name of component, InitialsCapital\r\n3.     public function __construct()\r\n4.     {\r\n5.  \r\n6.     }\r\n7.     public function publish_item() { // <----- Name of method/function, camelCase or snake_case\r\n8.         // implementation\r\n9.     }\r\n10.     \r\n11.     private function render_link () { // <----- Name of method/function, camelCase or snake_case\r\n12.     // implementation\r\n13.     return '';\r\n14.     }\r\n15.   }\r\n\t\r\n\r\n   5. Let\u2019s talk about more naming conventions in PHP. Following are the conventions that have been accepted by the Laravel Community.\r\n      1. Controller:\r\n         1. Name should be in singular form.\r\n         2. Should use PascalCase.\r\nShould Do\r\n\tShouldn't Do\r\n\tCustomerController.php\r\n\tCustomersController.php\r\n\t\r\n\r\n      2. Route:\r\n         1. Route Url:\r\n            1. URL should be in plural form.\r\n            2. Can use kebab-case if there are two words in a single part for Best Practice.\r\nShould Do\r\n\tShouldn't Do\r\n\t/customers/25\r\n\tcustomer/25\r\n\t/customers/password-reset\r\n\t/customers/password_reset\r\n\t\u201c\r\n\t/customers/passwordReset\r\n\t\r\n\r\n         2. Route Name:\r\n            1. Should use snake_case with dot notation.\r\n            2. Better to use the same name as in the URL.\r\nShould Do\r\n\tShouldn't Do\r\n\t->('customers.view')\r\n\t->('customers-view')\r\n\t\u201c\r\n\t->('customers_view')\r\n\t->('customers.password_reset')\r\n\t->('customers.password.reset')\r\n\t\u201c\r\n\t->('customers.password-reset')\r\n\t\u201c\r\n\t->('customer-password-reset')\r\n\t\r\n\r\n      3. Database Related:\r\n         1. Migration:\r\n            1. Should use the name as what you want to do with snake_case.", "mimetype": "text/plain", "start_char_idx": 9391, "end_char_idx": 13347, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "edf13373-1d20-41e4-99f5-c09e12b49d40": {"__data__": {"id_": "edf13373-1d20-41e4-99f5-c09e12b49d40", "embedding": null, "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\php.txt", "file_name": "php.txt", "file_type": "text/plain", "file_size": 42456, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c8c3353a-e93e-4fd8-b4d4-bca4ab611ecb", "node_type": "4", "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\php.txt", "file_name": "php.txt", "file_type": "text/plain", "file_size": 42456, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "hash": "5963acde83bef40d98389ad406c63c8f8eadc4be4b1906da6718d341b51b28d7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6b1464ab-ca70-46ad-a6c6-7c189ade3f0f", "node_type": "1", "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\php.txt", "file_name": "php.txt", "file_type": "text/plain", "file_size": 42456, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "hash": "7454b5052db26b21c2e7792aa929390a96bd56c48e9f1ac617fd1c43bfc4709d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "86b0db69-6d73-410d-8b7c-539acba74609", "node_type": "1", "metadata": {}, "hash": "8df770dbc55ff21ee522f5c446fbd8b69ead199394328c73d12120d63a9bedc7", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "2. Can use kebab-case if there are two words in a single part for Best Practice.\r\nShould Do\r\n\tShouldn't Do\r\n\t/customers/25\r\n\tcustomer/25\r\n\t/customers/password-reset\r\n\t/customers/password_reset\r\n\t\u201c\r\n\t/customers/passwordReset\r\n\t\r\n\r\n         2. Route Name:\r\n            1. Should use snake_case with dot notation.\r\n            2. Better to use the same name as in the URL.\r\nShould Do\r\n\tShouldn't Do\r\n\t->('customers.view')\r\n\t->('customers-view')\r\n\t\u201c\r\n\t->('customers_view')\r\n\t->('customers.password_reset')\r\n\t->('customers.password.reset')\r\n\t\u201c\r\n\t->('customers.password-reset')\r\n\t\u201c\r\n\t->('customer-password-reset')\r\n\t\r\n\r\n      3. Database Related:\r\n         1. Migration:\r\n            1. Should use the name as what you want to do with snake_case.\r\nShould Do\r\n\tShouldn't Do\r\n\t2021_03_19_033513_create_customers_table.php\r\n\t2021_03_19_033513_customers.php\r\n\t2021_03_19_033513_add_image_id_to_customers_table.php\r\n\t2021_03_19_033513_add_image_id_customers.php\r\n\t2021_03_19_033513_drop_image_id_from_customers_table.php\r\n\t2021_03_19_033513_remove_image_id_customers.php\r\n\t \r\n         2. Table:\r\n            1. Table name must be in plural form.\r\n            2. Should use snake_case.\r\nShould Do\r\n\tShouldn't Do\r\n\tcustomers\r\n\tcustomer\r\n\tcart_items\r\n\tcartItems, CartItems, Cart_item\r\n\t\r\n\r\n         3. Pivot Table:\r\n            1. Pivot table names must be in singular form.\r\n            2. Should use snake_case.\r\n            3. The names should be in alphabetical order.\r\nShould Do\r\n\tShouldn't Do\r\n\tcourse_student\r\n\tstudent_courses, students_courses, course_students\r\n\t \r\n         4. Table Columns:\r\n            1. Should use snake_case.\r\n            2. Should not use table names with column names.\r\n            3. Readable names can use for better practice.\r\nShould Do\r\n\tShouldn't Do\r\n\tfirst_name\r\n\tuser_first_name, FirstName\r\n\t \r\n         5. Foreign Key:\r\n            1. Should use snake_case.\r\n            2. Should use singular table name with id prefix.\r\nShould Do\r\n\tShouldn't Do\r\n\tcourse_id\r\n\tcourseId, id, courses_id, id_course\r\n\t \r\n         6. Primary Key:\r\n            1. Only use the name as id.\r\nShould Do\r\n\tShouldn't Do\r\n\tid\r\n\tcustom_name_id\r\n\t \r\n         7. Model:\r\n            1. Model name must be in singular form.\r\n            2. Should use PascalCase.\r\n            3. The model name must be a singular form or table name.\r\nShould Do\r\n\tShouldn't Do\r\n\tCustomer\r\n\tCustomers, customer\r\n\t\r\n\r\n         8. Model Single relations [Has One, Belongs To]:\r\n            1. Method name must be in singular form.\r\n            2. Should Use camelCase.\r\nShould Do\r\n\tShouldn't Do\r\n\tstudentCourse\r\n\tStudentCourse, student_course, studentCourses\r\n\t\r\n\r\n         9. Model all other relations and methods [Has Many, Other]:\r\n            1. Method name must be in singular form.\r\n            2. Should Use camelCase.\r\nShould Do\r\n\tShouldn't Do\r\n\tcartItems\r\n\tCartItem, cart_item, cartItem\r\n\t \r\n         10. Functions:\r\n            1. Should Use camelCase.\r\nShould Do\r\n\tShouldn't Do\r\n\tshow_route\r\n\tshowRoute, ShowRoute\r\n\t\r\n\r\n         11. Methods in Resources Controller:\r\n            1. Should Use camelCase.\r\n            2. Must use singles words related to action.\r\nShould Do\r\n\tShouldn't Do\r\n\tstore\r\n\tsaveCustomer\r\n\tshow\r\n\tviewCustomer\r\n\tdestroy\r\n\tdeleteCustomer\r\n\tindex\r\n\tallCustomersPage\r\n\t         12. Variable Types:\r\n            1. Type of variables should be used in camelCase.\r\n            2. Must use readable words which describe value.\r\n            3. For JavaScript/jQuery variables should be proper let, var, or const.\r\nShould Do\r\n\tShouldn't Do\r\n\t$customerMessages\r\n\t$CustomerMessages, $customer_messages, $c_messages, $c_m\r\n\t________________\r\n\r\n\r\n\r\n\r\nCodeStyle\r\n\t\r\n\r\n1. Commenting:\r\n   1. Add proper comments in the code.\r\n   2. The comments should be meaningful.\r\n   3.", "mimetype": "text/plain", "start_char_idx": 12607, "end_char_idx": 16373, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "86b0db69-6d73-410d-8b7c-539acba74609": {"__data__": {"id_": "86b0db69-6d73-410d-8b7c-539acba74609", "embedding": null, "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\php.txt", "file_name": "php.txt", "file_type": "text/plain", "file_size": 42456, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c8c3353a-e93e-4fd8-b4d4-bca4ab611ecb", "node_type": "4", "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\php.txt", "file_name": "php.txt", "file_type": "text/plain", "file_size": 42456, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "hash": "5963acde83bef40d98389ad406c63c8f8eadc4be4b1906da6718d341b51b28d7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "edf13373-1d20-41e4-99f5-c09e12b49d40", "node_type": "1", "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\php.txt", "file_name": "php.txt", "file_type": "text/plain", "file_size": 42456, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "hash": "a184b24026b0188adf02e51eff71473b89189ab368c5a5bb9717cfd233f8bb55", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ed3c9c36-f45e-4196-8d38-32b20fb5928a", "node_type": "1", "metadata": {}, "hash": "8ba6cff450b3801e24970a41e4a84afd572fba3d7e34d956306fae4fdc00dcb6", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Methods in Resources Controller:\r\n            1. Should Use camelCase.\r\n            2. Must use singles words related to action.\r\nShould Do\r\n\tShouldn't Do\r\n\tstore\r\n\tsaveCustomer\r\n\tshow\r\n\tviewCustomer\r\n\tdestroy\r\n\tdeleteCustomer\r\n\tindex\r\n\tallCustomersPage\r\n\t         12. Variable Types:\r\n            1. Type of variables should be used in camelCase.\r\n            2. Must use readable words which describe value.\r\n            3. For JavaScript/jQuery variables should be proper let, var, or const.\r\nShould Do\r\n\tShouldn't Do\r\n\t$customerMessages\r\n\t$CustomerMessages, $customer_messages, $c_messages, $c_m\r\n\t________________\r\n\r\n\r\n\r\n\r\nCodeStyle\r\n\t\r\n\r\n1. Commenting:\r\n   1. Add proper comments in the code.\r\n   2. The comments should be meaningful.\r\n   3. Avoid unnecessary and obvious comments.\r\n   4. Comments should be brief, and relevant.\r\n   5. Bad Commenting Examples:\r\n 1. <?php\r\n2.  \r\n3. /**\r\n4. * positiveNumbersLength\r\n5. *\r\n6. * @param  mixed $request\r\n7. * @return void\r\n8. */\r\n9. function positiveNumbersLength($data) {\r\n10.    // If the array's length is 0            <---- This is obvious\r\n11.    if(!count($data)  == 0) {\r\n12.        return 0;\r\n13.    }\r\n14.    $positiveLength = 0;\r\n15.    // Loop for all numbers in the array     <---- This is obvious\r\n16.    for($i=0; $i < $count($data); $i++) {\r\n17.        if($data[0] > 0) {\r\n18.            $positiveLength++;\r\n19.        }\r\n20.    }\r\n21.    return $positiveLength;\r\n22. }\r\n\t   6. Good Commenting Examples:\r\n      1. Initial function definition\r\n 1. /**\r\n2. * Returns the length of positive numbers from a given array @data passed as param\r\n3. * Author: Developer Name\r\n4. * Date: 23 Jan, 2023\r\n5. */\r\n6. function positiveNumbersLength($data) {\r\n7.    $positiveLength = 0;\r\n8.    for($i=0; $i < $count($data); $i++) {\r\n9.        if($data[0] > 0) {\r\n10.            $positiveLength++;\r\n11.        }\r\n12.    }\r\n13.    return $positiveLength;\r\n14. }\r\n\t\r\n\r\n      2. Comments after update 1\r\n 1. /**\r\n2. * Returns the length of positive numbers from a given array @data passed as param\r\n3. * Author: Developer Name\r\n4. * Date: 23 Jan, 2023\r\n5. * Update 1 (24 Jan, 2023): Check the length of array before the loop, and return 0 if the array is empty.\r\n6. */\r\n7.  \r\n8. function positiveNumbersLength($data) {\r\n9.  if(!count($data)  == 0) {\r\n10.        return 0;\r\n11.    }\r\n12.    $positiveLength = 0;\r\n13.    for($i=0; $i < $count($data); $i++) {\r\n14.        if($data[0] > 0) {\r\n15.            $positiveLength++;\r\n16.        }\r\n17.    }\r\n18.    return $positiveLength;\r\n19. } \r\n\t\r\n\r\n      3. Comments after update 2:\r\n 1. <?php\r\n2.  \r\n3. /**\r\n4. * Returns the length of positive numbers from a given array @data passed as param\r\n5. * Author: Developer Name\r\n6. * Date: 23 Jan, 2023\r\n7. * Update 1 (24 Jan, 2023): Check the length of array before the loop, and return 0 if the array is empty.\r\n8. * Update 2 (24 Jan, 2023): Assign default value to the param, an empty array, in case the argument is not passed.\r\n9. */\r\n10.  \r\n11. function positiveNumbersLength($data) {\r\n12.  if(!count($data)  == 0) {\r\n13.        return 0;\r\n14.    }\r\n15.    $positiveLength = 0;\r\n16.    for($i=0; $i < $count($data); $i++) {\r\n17.        if($data[0] > 0) {\r\n18.            $positiveLength++;\r\n19.        }\r\n20.    }", "mimetype": "text/plain", "start_char_idx": 15626, "end_char_idx": 18879, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ed3c9c36-f45e-4196-8d38-32b20fb5928a": {"__data__": {"id_": "ed3c9c36-f45e-4196-8d38-32b20fb5928a", "embedding": null, "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\php.txt", "file_name": "php.txt", "file_type": "text/plain", "file_size": 42456, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c8c3353a-e93e-4fd8-b4d4-bca4ab611ecb", "node_type": "4", "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\php.txt", "file_name": "php.txt", "file_type": "text/plain", "file_size": 42456, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "hash": "5963acde83bef40d98389ad406c63c8f8eadc4be4b1906da6718d341b51b28d7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "86b0db69-6d73-410d-8b7c-539acba74609", "node_type": "1", "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\php.txt", "file_name": "php.txt", "file_type": "text/plain", "file_size": 42456, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "hash": "186afb2478da15ffa3fa4479946475cc34a5f2c3c821ac88aa84a1203958efdc", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "97e9dc4d-0313-42ff-b112-9132ce32363d", "node_type": "1", "metadata": {}, "hash": "99cf98592aa37f3b60511a479d27497d2d7750922a02cb75abb036c7ac58ef1e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "* Author: Developer Name\r\n6. * Date: 23 Jan, 2023\r\n7. * Update 1 (24 Jan, 2023): Check the length of array before the loop, and return 0 if the array is empty.\r\n8. * Update 2 (24 Jan, 2023): Assign default value to the param, an empty array, in case the argument is not passed.\r\n9. */\r\n10.  \r\n11. function positiveNumbersLength($data) {\r\n12.  if(!count($data)  == 0) {\r\n13.        return 0;\r\n14.    }\r\n15.    $positiveLength = 0;\r\n16.    for($i=0; $i < $count($data); $i++) {\r\n17.        if($data[0] > 0) {\r\n18.            $positiveLength++;\r\n19.        }\r\n20.    }\r\n21.    return $positiveLength;\r\n22. }\r\n\t\r\n\r\n      4. Comments after update 3: \r\n 1. <?php\r\n2.  \r\n3. /**\r\n4. * Returns the length of positive numbers from a given array @data passed as param\r\n5. * Author: Developer Name\r\n6. * Date: 23 Jan, 2023\r\n7. * Update 1 (24 Jan, 2023): Check the length of array before the loop, and return 0 if the array is empty.\r\n8. * Update 2 (24 Jan, 2023): Assign default value to the param, an empty array, in case the argument is not passed.\r\n9. * Update 3 (24 Jan, 2023): Modified the function to find the positive numbers count in the first half of the array.\r\n10. */\r\n11. function positiveNumbersLength($data)\r\n12. {\r\n13.    if (!count($data)  == 0) {\r\n14.        return 0;\r\n15.    }\r\n16.    $positiveLength = 0;\r\n17.    // Looping through the first half, because we need to find the positive numbers in the 1st half of the array.\r\n18.    for ($i = 0; $i < $count($data); $i++) {\r\n19.        if ($data[0] > 0) {\r\n20.            $positiveLength++;\r\n21.        }\r\n22.    }\r\n23.    return $positiveLength;\r\n24. }\r\n\t\r\n\r\n1. No Commented Out Code:\r\n   1. Code that is disabled or excluded from execution in the app should be removed.\r\n   2. Leaving commented-out code in source code is bad practice, as it takes up space, causes confusion, and leads to maintenance issues if it's not removed. Therefore, the commented-out code should be removed from the project.\r\n\r\n\r\n2. Switches for Conditional Rendering:\r\n   1. While working with conditional rendering, specifically on the frontend side, we often see the rendering of components in the ternary conditions in the same render, which makes code look very complex to see and understand. In cases like these, we should use switch statements to render condition-based components, which makes code look easy to understand.\r\n________________\r\n\r\n\r\n\r\n\r\n\r\n\r\nJavascript ES6/7\r\n\t1. Variables:\r\n   1. In JS, we can define variables using var, let, or const.\r\n   2. If the variable\u2019s value is not going to change, it is necessary to use it as const, otherwise, use it as let.\r\n   3. Avoid var:\r\n      1. Use var if and only if it is really necessary.\r\n\r\n\r\n1. Destructive Properties:\r\n   1. We frequently work with objects and arrays to perform different actions based on the data stored in these. And often we need to extract properties from objects and assign them to new variables.\r\n   2. Destructuring is a very useful feature to extract properties from objects and assign them to variables.\r\n   3. We should use destructive properties instead of old methods.\r\n   4. Please see some examples below for better explanations.\r\n// We need to extract some properties from the object and need to set it in a variable.\r\nconst student = {\r\n name: \"User 1\",\r\n grade: \"A\",\r\n id: 1,\r\n section: \"A\",\r\n};\r\n\r\n\r\n// One way is to access the properties one by one and assign them in the variable.\r\nconst section = student.section;\r\nconst name = student.name;\r\nconst id = student.id;\r\nconst grade = student.grade;\r\n\r\n\r\n// Object destructuring makes it possible to get required properties and assign them to variables in one line.\r\nconst { section, name, id, grade } = student;\r\n\r\n\r\n// We need to extract some properties from the object and need to set it in a variable.", "mimetype": "text/plain", "start_char_idx": 18314, "end_char_idx": 22100, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "97e9dc4d-0313-42ff-b112-9132ce32363d": {"__data__": {"id_": "97e9dc4d-0313-42ff-b112-9132ce32363d", "embedding": null, "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\php.txt", "file_name": "php.txt", "file_type": "text/plain", "file_size": 42456, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c8c3353a-e93e-4fd8-b4d4-bca4ab611ecb", "node_type": "4", "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\php.txt", "file_name": "php.txt", "file_type": "text/plain", "file_size": 42456, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "hash": "5963acde83bef40d98389ad406c63c8f8eadc4be4b1906da6718d341b51b28d7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ed3c9c36-f45e-4196-8d38-32b20fb5928a", "node_type": "1", "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\php.txt", "file_name": "php.txt", "file_type": "text/plain", "file_size": 42456, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "hash": "d325fba22805e52d7679afd010a5cbaedabc01e9ba2d7469cd0a8ce68a7b1879", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b7679a35-f3f4-49a9-85cc-524ee3428a2c", "node_type": "1", "metadata": {}, "hash": "b898a22b6859a27299910347a07841ca2959164f5cbb5f8d229a416412412cb9", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "2. Destructuring is a very useful feature to extract properties from objects and assign them to variables.\r\n   3. We should use destructive properties instead of old methods.\r\n   4. Please see some examples below for better explanations.\r\n// We need to extract some properties from the object and need to set it in a variable.\r\nconst student = {\r\n name: \"User 1\",\r\n grade: \"A\",\r\n id: 1,\r\n section: \"A\",\r\n};\r\n\r\n\r\n// One way is to access the properties one by one and assign them in the variable.\r\nconst section = student.section;\r\nconst name = student.name;\r\nconst id = student.id;\r\nconst grade = student.grade;\r\n\r\n\r\n// Object destructuring makes it possible to get required properties and assign them to variables in one line.\r\nconst { section, name, id, grade } = student;\r\n\r\n\r\n// We need to extract some properties from the object and need to set it in a variable.\r\nconst student = {\r\n name: \"User 1\",\r\n grade: \"A\",\r\n id: 1,\r\n section: \"A\",\r\n};\r\n\r\n\r\n// One way is to access the properties one by one and assign them in the variable.\r\nconst section = student.section;\r\nconst name = student.name;\r\nconst id = student.id;\r\nconst grade = student.grade;\r\n\r\n\r\n// Object destructuring makes it possible to get required properties and assign them to variables in one line.\r\nconst { section, name, id, grade } = student;\r\n\r\n\r\n   5. You may go through this link to discover Destructive Properties in detail:\r\n      1. Destructuring assignment - JavaScript | MDN\r\n      2. How to Use Object Destructuring in JavaScript\r\n\r\n\r\n2. Arrow Functions:\r\n   1. It is preferred to use arrow functions because of some important reasons:\r\n      1. Arrow functions reduce the size of the code. \r\n      2. Make code more structured and readable.\r\n      3. The return statement and functional braces are optional for single-line functions.\r\n\r\n\r\n3. Template Literals:\r\n   1. There are many cases when we need to use a string in our project. We should use template strings because it makes the code more readable.\r\n   2. It makes it easy to concat strings and variables and provides a clear view of the code.\r\n   3. Examples:\r\n      1. Without string literals:\r\nconst strLiteral = () => {\r\n const str2 = \"This is a string 2 concatenated to be with string 1\";\r\n return \"This is a string 1\" + str2;\r\n};\r\n\r\n\r\n      2. With string literals:\r\nconst strLiteral = () => {\r\n const str2 = `This is a string 2 concatenated to be with string 1`;\r\n return `This is a string 1 ${str2}`;\r\n};\r\n\r\n\r\n4. Promises and async/await:\r\n   1. Use promises or async/await along with handled rejection.\r\n________________\r\n\r\n\r\n\r\n\r\nPHP - Laravel\r\n\t1. Use of Route Model Binding: \r\n   1. Instead of using the find() method to retrieve data from the database, use route model binding to automatically retrieve data by injecting the model instance into the controller method.\r\n\r\n\r\n2. Use Eloquent ORM:\r\n   1. Use Eloquent, Laravel's built-in Object-Relational Mapping (ORM) system, to interact with the database, instead of writing raw SQL queries.\r\n\r\n\r\n3. Follow PSR Standards: \r\n   1. Laravel follows the PHP Standards Recommendation (PSR) standards. Following PSR standards can make your code more consistent and readable.\r\n\r\n\r\n4. Use Blade Templating Engine: \r\n   1. Use Blade, Laravel's built-in templating engine, to create views and templates for your application.\r\n\r\n\r\n5. Use Dependency Injection: \r\n   1. Use dependency injection to manage the dependencies of your classes and make your code more maintainable.\r\n\r\n\r\n6. Use Service Providers: \r\n   1. Use service providers to register and bootstrap the different components of your application, such as services, controllers, and models.\r\n\r\n\r\n7. Use Middleware: \r\n   1. Use middleware to manage HTTP requests/responses and to protect your routes.\r\n\r\n\r\n8. Use Queues: \r\n   1. Laravel supports queue workers and messages for background tasks, use them for long-running tasks that can be processed in the background.\r\n\r\n\r\n9. Proper HTTP Methods: \r\n   1. In Laravel, routes are used to handle different types of requests to the server, such as GET, POST, PUT, DELETE, etc. Each route is associated with a specific HTTP method, and it\u2019s important to ensure that the correct method is being used for each route.\r\n   2.", "mimetype": "text/plain", "start_char_idx": 21234, "end_char_idx": 25446, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b7679a35-f3f4-49a9-85cc-524ee3428a2c": {"__data__": {"id_": "b7679a35-f3f4-49a9-85cc-524ee3428a2c", "embedding": null, "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\php.txt", "file_name": "php.txt", "file_type": "text/plain", "file_size": 42456, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c8c3353a-e93e-4fd8-b4d4-bca4ab611ecb", "node_type": "4", "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\php.txt", "file_name": "php.txt", "file_type": "text/plain", "file_size": 42456, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "hash": "5963acde83bef40d98389ad406c63c8f8eadc4be4b1906da6718d341b51b28d7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "97e9dc4d-0313-42ff-b112-9132ce32363d", "node_type": "1", "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\php.txt", "file_name": "php.txt", "file_type": "text/plain", "file_size": 42456, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "hash": "692f268102e1a4908d75245e826df4518f2c70a238100aeccb5df34d93ffd46c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9bdb4247-805c-464a-87a8-d39d4dfc7761", "node_type": "1", "metadata": {}, "hash": "ab687479c70e7391ec51f9fc41dc602dc7f42e8ef0aeef3417c34a91173255de", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Use dependency injection to manage the dependencies of your classes and make your code more maintainable.\r\n\r\n\r\n6. Use Service Providers: \r\n   1. Use service providers to register and bootstrap the different components of your application, such as services, controllers, and models.\r\n\r\n\r\n7. Use Middleware: \r\n   1. Use middleware to manage HTTP requests/responses and to protect your routes.\r\n\r\n\r\n8. Use Queues: \r\n   1. Laravel supports queue workers and messages for background tasks, use them for long-running tasks that can be processed in the background.\r\n\r\n\r\n9. Proper HTTP Methods: \r\n   1. In Laravel, routes are used to handle different types of requests to the server, such as GET, POST, PUT, DELETE, etc. Each route is associated with a specific HTTP method, and it\u2019s important to ensure that the correct method is being used for each route.\r\n   2. For example, a route that is used to retrieve data from the server should be associated with the GET method, while a route that is used to create new data should be associated with the POST method.\r\n   3. Using the wrong HTTP method for a route can lead to unexpected behavior and security issues. For example, if a route associated with the GET method is used to delete data, it could be possible for an attacker to craft a malicious request that could delete data from the server without proper authorization.\r\n\r\n\r\n10.  Input Validation:\r\n   1. Input validation is the process of checking that the data received by the server is valid and meets certain criteria before it is processed. This is an important step in ensuring the security and stability of the application, as well as preventing malicious actors from injecting unwanted or harmful data.\r\n   2. It\u2019s also important to check for the presence of required fields, for example, if a form requires a name, email, and password fields, it\u2019s important to check that these fields are present and not empty in the request body.\r\n   3. You must use input validation to check that the required fields are present.\r\n________________\r\n\r\n\r\nESLint\r\n\t   1. Application Console Warnings:\r\n   1. The consoles of the applications should not have any errors or warnings. When we start a react-based application, it shows warnings and errors in the console. Most of the time, the warnings are ignored, but these should not be ignored as these can help a lot in optimizing the applications.\r\n   2. This should not only be restricted to the terminal console but also the browser\u2019s console.\r\n\r\n\r\n   1. Logs:\r\n   1. All the logs added to the code for debugging purposes should be removed before committing/pushing the code.\r\n   2. Sometimes there can be scenarios where we need to debug use cases on the live site and have to push the logs. Those logs should be removed after the error is tracked and fixed.\r\n   3. Bad Practice Logs:\r\n   1. We often see these kinds of logs in the live application, which is a bad practice and should be removed before pushing the code.\r\n  \r\n\r\n  \r\n\r\n(Application Logs)\r\n________________\r\n\r\n\r\nCode Documentation\r\n\t   1. Developer Docs. (dev-instructions.md):\r\n   1. Continuing with the point of Consistent and Meaningful Naming, we can write all the instructions in a file.\r\n   2. The purpose of this file is to keep all the developers working on a project on board for the naming convention and project structure-related things.\r\n   3. Team leads will be responsible for creating this file, and all the developers will follow the instructions.\r\n   4. This file should be well-documented and must include instructions for developers like naming convention schemes and other coding techniques being used in the project.\r\n   5. Sample dev-instructions.md file:\r\n# Introduction\r\n\r\n\r\nThis document serves as the complete definition of the application's coding standards for source code in JavaScript.\r\n\r\n\r\n# Collection/model names:\r\n\r\n\r\nCollection/model names must be singular and initial capital.\r\n\r\n\r\n# Variable or function names\r\n\r\n\r\nAll variable or function names must be short and camel case.\r\n\r\n\r\n# Folder or file names\r\n\r\n\r\nAll folder or file names must be all lowercase, short, and may include underscores (\\_) or dashes (-), but no additional punctuation.\r\n\r\n\r\n# Imports\r\n\r\n\r\n## Import paths\r\n\r\n\r\nES module files must use the import statement to import other ES module files.\r\n\r\n\r\n# Use destructive properties\r\n\r\n\r\nRef:\r\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\r\nhttps://dmitripavlutin.com/javascript-object-destructuring/\r\n\r\n\r\n# Use arrow functions\r\n\r\n\r\n# Use template literals\r\n\r\n\r\n# Use promises or async/await along with handled rejection\r\n\r\n\r\n# Coding standards ref.", "mimetype": "text/plain", "start_char_idx": 24590, "end_char_idx": 29254, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "9bdb4247-805c-464a-87a8-d39d4dfc7761": {"__data__": {"id_": "9bdb4247-805c-464a-87a8-d39d4dfc7761", "embedding": null, "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\php.txt", "file_name": "php.txt", "file_type": "text/plain", "file_size": 42456, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c8c3353a-e93e-4fd8-b4d4-bca4ab611ecb", "node_type": "4", "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\php.txt", "file_name": "php.txt", "file_type": "text/plain", "file_size": 42456, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "hash": "5963acde83bef40d98389ad406c63c8f8eadc4be4b1906da6718d341b51b28d7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b7679a35-f3f4-49a9-85cc-524ee3428a2c", "node_type": "1", "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\php.txt", "file_name": "php.txt", "file_type": "text/plain", "file_size": 42456, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "hash": "023f75a8d754a58703f743730266c93faeef8db9c777876df9586b986903d976", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ce83b58d-97cd-433d-bd7f-c2564d158fe5", "node_type": "1", "metadata": {}, "hash": "633b5b385df42222ec808a58d757ee0f15fa307379d28ef374022118daf5630f", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "5. Sample dev-instructions.md file:\r\n# Introduction\r\n\r\n\r\nThis document serves as the complete definition of the application's coding standards for source code in JavaScript.\r\n\r\n\r\n# Collection/model names:\r\n\r\n\r\nCollection/model names must be singular and initial capital.\r\n\r\n\r\n# Variable or function names\r\n\r\n\r\nAll variable or function names must be short and camel case.\r\n\r\n\r\n# Folder or file names\r\n\r\n\r\nAll folder or file names must be all lowercase, short, and may include underscores (\\_) or dashes (-), but no additional punctuation.\r\n\r\n\r\n# Imports\r\n\r\n\r\n## Import paths\r\n\r\n\r\nES module files must use the import statement to import other ES module files.\r\n\r\n\r\n# Use destructive properties\r\n\r\n\r\nRef:\r\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\r\nhttps://dmitripavlutin.com/javascript-object-destructuring/\r\n\r\n\r\n# Use arrow functions\r\n\r\n\r\n# Use template literals\r\n\r\n\r\n# Use promises or async/await along with handled rejection\r\n\r\n\r\n# Coding standards ref.\r\n\r\n\r\nMUST READ THIS DOCUMENT: https://docs.google.com/document/d/16oTbh6MAV8YcZFUEi75syZf6mfRDBIjwIcp4Ro2T-Oo/edit\r\n\r\n\r\n# Super/private admin\r\n\r\n\r\n## How to make a super/private admin\r\n\r\n\r\nRun the following URL in browser and register a super/private admin in database:\r\n\r\n\r\nAPP_BASE_URL/v1/admin/staff/private-admin\r\n________________\r\n\r\n\r\n\r\n\r\nSecurity\r\n\t\r\n\r\n\r\n\r\n   1. SQL Injection Prevention:\r\n   1. Most of the frameworks themselves handle it but if you are writing custom queries you have to consider this prevention.\r\n   2. Use prepared statements or parameterized queries to prevent SQL injection attacks.\r\n   3. Example:\r\n$conn->prepare(\"INSERT INTO person (name, email) VALUES (?, ?)\");\r\n\t\r\n\r\n   2. Avoid using ids in URLs:\r\n   1. Encode your ids before passing as a query parameter into the URL. \r\n   2. Example:\r\necho '<a href=\"mylink?q=', encode($fruitID), '\">'; \r\n\t\r\n\r\n   3. Securely Upload Files:\r\n   1. Use proper validations while uploading files to the server.\r\n   2. Validate file type and size. Make sure to only allow that file type which is required, Ensure that uploaded files cannot be executed on the server. Set appropriate permissions on the uploaded files to prevent them from being treated as executable scripts.\r\n   3. Use a Secure File Storage Location no one will be able to access the full folder of storage on his browser and disable direct access to the folders.\r\n   4. Use Secure Plugins, Themes, and Extensions:\r\n   1. Please Choose Reputable Sources, Read Reviews and Ratings before selecting a theme, plugin or extension.\r\n\r\n\r\n   5. Use Tokens, IP-based white listings, and rate limiting:\r\n   1. Use Tokens, IP-based white listings, and rate limiting while creating service APIs and encrypting Secure Data.\r\n________________\r\n\r\n\r\n\r\n\r\nWeb Optimization\r\n\t   1. Minify and Compress HTML, CSS, and JavaScript:\r\nMinifying removes unnecessary white spaces, and comments, and reduces code size. Additionally, enable compression using techniques like GZIP to reduce file sizes and improve loading times.\r\n\r\n\r\n   2. Use CSS and JavaScript Bundling:\r\nInstead of including multiple CSS and JavaScript files, bundle them into a single file each. This reduces the number of HTTP requests, leading to faster loading times.\r\n\r\n   3. Optimize Images:\r\nCompress and resize images to reduce their file sizes without compromising quality. You can use tools like ImageOptim or TinyPNG to achieve this. \r\n\r\n\r\n   4. Implement Caching:\r\nUtilize browser caching by setting proper cache headers to enable caching of static resources such as CSS, JavaScript, and images.\r\n\r\n\r\n   5. Optimize Database Queries:\r\nOptimize your SQL queries to improve the performance of database operations. Use indexes on frequently accessed columns, avoid unnecessary queries or nested queries, and utilize query optimization techniques like joins and proper table indexing.\r\n\r\n\r\n   6. Implement HTTP/2:\r\nUpgrade your server and website to use HTTP/2 protocol. HTTP/2 offers several performance benefits over its predecessor, including multiplexing, server push, and header compression. These features reduce latency, enable parallel loading of assets, and improve overall page load times.\r\n\r\n\r\n   7. Use Server-Side Caching:\r\nImplement server-side caching mechanisms like Memcached or Redis to cache dynamic content and reduce the load on your PHP and database servers.\r\n________________\r\n\r\n\r\nOther\r\n\t   1. Try-catch Statements:\r\n   1. In Laravel, the try-catch block is used for error handling and exception management. Here's an example of how it can be used:\r\n 1. try {\r\n2.     // Code that may throw an exception\r\n3.", "mimetype": "text/plain", "start_char_idx": 28241, "end_char_idx": 32868, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ce83b58d-97cd-433d-bd7f-c2564d158fe5": {"__data__": {"id_": "ce83b58d-97cd-433d-bd7f-c2564d158fe5", "embedding": null, "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\php.txt", "file_name": "php.txt", "file_type": "text/plain", "file_size": 42456, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c8c3353a-e93e-4fd8-b4d4-bca4ab611ecb", "node_type": "4", "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\php.txt", "file_name": "php.txt", "file_type": "text/plain", "file_size": 42456, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "hash": "5963acde83bef40d98389ad406c63c8f8eadc4be4b1906da6718d341b51b28d7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9bdb4247-805c-464a-87a8-d39d4dfc7761", "node_type": "1", "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\php.txt", "file_name": "php.txt", "file_type": "text/plain", "file_size": 42456, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "hash": "327b389bd9b74610f0b6a5561f98bdfdc538c81a89ee1e6b439fa032ff7d7f4b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f601d1ab-c873-481c-953d-2c57bc113115", "node_type": "1", "metadata": {}, "hash": "b5a45f48a2ebf9f9476a4a76235fd95cc88c22ef61d41077fcc5b8e78b0a8af6", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Use indexes on frequently accessed columns, avoid unnecessary queries or nested queries, and utilize query optimization techniques like joins and proper table indexing.\r\n\r\n\r\n   6. Implement HTTP/2:\r\nUpgrade your server and website to use HTTP/2 protocol. HTTP/2 offers several performance benefits over its predecessor, including multiplexing, server push, and header compression. These features reduce latency, enable parallel loading of assets, and improve overall page load times.\r\n\r\n\r\n   7. Use Server-Side Caching:\r\nImplement server-side caching mechanisms like Memcached or Redis to cache dynamic content and reduce the load on your PHP and database servers.\r\n________________\r\n\r\n\r\nOther\r\n\t   1. Try-catch Statements:\r\n   1. In Laravel, the try-catch block is used for error handling and exception management. Here's an example of how it can be used:\r\n 1. try {\r\n2.     // Code that may throw an exception\r\n3.     // For example, database queries, API calls, or other operations\r\n4.  \r\n5.     // If an exception occurs, it will be caught and handled\r\n6. } catch (\\Exception $e) {\r\n7.     // Exception handling code\r\n8.     // You can log the error, display a user-friendly message, or take appropriate actions\r\n9.  \r\n10.     // Optionally, you can rethrow the exception to propagate it further\r\n11.     // throw $e;\r\n12. }\r\n\t\r\n\r\n   2. Inside the try block, you write the code that might throw an exception. If an exception occurs, it is caught by the catch block. You can specify the specific exception class you want to catch, such as \\InvalidArgumentException, or use the more general \\Exception class to catch any type of exception.\r\n   3. Within the catch block, you can handle the exception by logging it, displaying a user-friendly error message, or performing any necessary actions. You can also rethrow the exception by using the throw statement if you want to propagate it further up the call stack.\r\n   4. By using try-catch blocks, you can gracefully handle exceptions and ensure that your application continues to run smoothly even in the presence of errors.\r\n\r\n\r\n   1. Error & Exception Handling:\r\n   1. In any application, there will be situations where something goes wrong, such as an external API call returning an error, a database query failing, or input validation failing. It\u2019s important to properly handle these errors to ensure that the application remains stable and the user is informed of the problem.\r\n   2. Handle exceptions carefully.\r\n   3. In case of exceptions, return appropriate error messages to the user along with the error so that it can be fixed or corrected later.\r\n   4. Quite often web developers don't care enough about errors. If something goes wrong, you often see default Laravel texts like \"Whoops, something went wrong\" or, even worse, the exception code, which is not helpful at all to the visitor. So, here is a step-by-step guide to how to handle errors in an elegant way and present proper error information to the visitor.\r\n   5. As a side note: this article will also show an example of creating your own Service with Dependency Injection and handling exceptions thrown by the service.\r\n   6. When you start a new Laravel project, error and exception handling is already configured for you. The App\\Exceptions\\Handler class is where all exceptions thrown by your application are logged and then rendered to the user. \r\n   7. Let's get out of the ideal world. We're not checking for user existence, we're only doing this in Controller:\r\n1. $user = User::find($request->input('user_id'));\r\n\t\r\n\r\n   8. And if a user is not found, we will see this:\r\n  \r\n\r\n \r\n   9. Or, of course, we can set the .env file with APP_DEBUG=false and then the browser will just show blank Whoops, looks like something went wrong. But that still doesn't give any valuable information to our visitors.\r\n \r\n   10. Another quick fix we can make is using User::findOrFail() instead of just find() then if a user is not found, Laravel would show 404 page with text \"Sorry, the page you are looking for could not be found.\" but this is a default 404 page for the whole project, so not massively helpful to the user, is it?\r\n   11. So we need to catch the errors, process them and redirect back to the form with an actual understandable error message. \r\n   12. We need to know the exception type and class name that it would return. In the case of findOrFail() it would throw an Eloquent exception ModelNotFoundException, so we need to do this: \r\n   1.", "mimetype": "text/plain", "start_char_idx": 31953, "end_char_idx": 36432, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f601d1ab-c873-481c-953d-2c57bc113115": {"__data__": {"id_": "f601d1ab-c873-481c-953d-2c57bc113115", "embedding": null, "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\php.txt", "file_name": "php.txt", "file_type": "text/plain", "file_size": 42456, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c8c3353a-e93e-4fd8-b4d4-bca4ab611ecb", "node_type": "4", "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\php.txt", "file_name": "php.txt", "file_type": "text/plain", "file_size": 42456, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "hash": "5963acde83bef40d98389ad406c63c8f8eadc4be4b1906da6718d341b51b28d7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ce83b58d-97cd-433d-bd7f-c2564d158fe5", "node_type": "1", "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\php.txt", "file_name": "php.txt", "file_type": "text/plain", "file_size": 42456, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "hash": "49d60c868c2cd32f8af53f33eb99394d5a0687794507bb69c6530166d107d3b4", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "28cb155e-0f77-4f1e-a5ef-edcd289678b2", "node_type": "1", "metadata": {}, "hash": "f8c4b043184c59dc5136fb1dc24afa221556a01e2c618075a808f545f8fc79c3", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "But that still doesn't give any valuable information to our visitors.\r\n \r\n   10. Another quick fix we can make is using User::findOrFail() instead of just find() then if a user is not found, Laravel would show 404 page with text \"Sorry, the page you are looking for could not be found.\" but this is a default 404 page for the whole project, so not massively helpful to the user, is it?\r\n   11. So we need to catch the errors, process them and redirect back to the form with an actual understandable error message. \r\n   12. We need to know the exception type and class name that it would return. In the case of findOrFail() it would throw an Eloquent exception ModelNotFoundException, so we need to do this: \r\n   1. Creating Our Own Exception Class:\r\n   1. When your service throws its own exception related to that particular error, there could be multiple exception classes depending on the error. A good example of such architecture is the Stripe library, its usage looks like this: \r\n 1. try {\r\n2.   // Use Stripe's library to make requests...\r\n3. } catch(\\Stripe\\Error\\Card $e) {\r\n4.   // Since it's a decline, \\Stripe\\Error\\Card will be caught\r\n5.   $body = $e->getJsonBody();\r\n6.   $err  = $body['error'];\r\n7.  \r\n8.   print('Status is:' . $e->getHttpStatus() . \"\\n\");\r\n9.   print('Type is:' . $err['type'] . \"\\n\");\r\n10.   print('Code is:' . $err['code'] . \"\\n\");\r\n11.   // param is '' in this case\r\n12.   print('Param is:' . $err['param'] . \"\\n\");\r\n13.   print('Message is:' . $err['message'] . \"\\n\");\r\n14. } catch (\\Stripe\\Error\\RateLimit $e) {\r\n15.   // Too many requests made to the API too quickly\r\n16. } catch (\\Stripe\\Error\\InvalidRequest $e) {\r\n17.   // Invalid parameters were supplied to Stripe's API\r\n18. } catch (\\Stripe\\Error\\Authentication $e) {\r\n19.   // Authentication with Stripe's API failed\r\n20.   // (maybe you changed API keys recently)\r\n21. } catch (\\Stripe\\Error\\ApiConnection $e) {\r\n22.   // Network communication with Stripe failed\r\n23. } catch (\\Stripe\\Error\\Base $e) {\r\n24.   // Display a very generic error to the user, and maybe send\r\n25.   // yourself an email\r\n26. } catch (Exception $e) {\r\n27.   // Something else happened, completely unrelated to Stripe\r\n28. }\r\n\r\n\t   2. Try this, I have used it in my project (app/Exceptions/Handler.php)\r\n 1. public function render($request, Exception $exception)\r\n2. {\r\n3.     if ($request->wantsJson()) {   //add Accept: application/json in request\r\n4.         return $this->handleApiException($request, $exception);\r\n5.     } else {\r\n6.         $retval = parent::render($request, $exception);\r\n7.     }\r\n8.  \r\n9.     return $retval;\r\n\t \r\n 1. private function handleApiException($request, Exception $exception)\r\n2. {\r\n3.     $exception = $this->prepareException($exception);\r\n4.  \r\n5.     if ($exception instanceof \\Illuminate\\Http\\Exception\\HttpResponseException) {\r\n6.         $exception = $exception->getResponse();\r\n7.     }\r\n8.  \r\n9.     if ($exception instanceof \\Illuminate\\Auth\\AuthenticationException) {\r\n10.         $exception = $this->unauthenticated($request, $exception);\r\n11.     }\r\n12.  \r\n13.     if ($exception instanceof \\Illuminate\\Validation\\ValidationException) {\r\n14.         $exception = $this->convertValidationExceptionToResponse($exception, $request);\r\n15.     }\r\n16.  \r\n17.     return $this->customApiResponse($exception);\r\n18. }\r\n\t\r\n\r\n   3. Now Handle Api exception\r\n1. private function handleApiException($request, Exception $exception)\r\n2. {\r\n3.     $exception = $this->prepareException($exception);\r\n4.  \r\n5.     if ($exception instanceof \\Illuminate\\Http\\Exception\\HttpResponseException) {\r\n6.         $exception = $exception->getResponse();\r\n7.     }\r\n8.  \r\n9.     if ($exception instanceof \\Illuminate\\Auth\\AuthenticationException) {\r\n10.         $exception = $this->unauthenticated($request, $exception);\r\n11.     }\r\n12.", "mimetype": "text/plain", "start_char_idx": 35718, "end_char_idx": 39547, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "28cb155e-0f77-4f1e-a5ef-edcd289678b2": {"__data__": {"id_": "28cb155e-0f77-4f1e-a5ef-edcd289678b2", "embedding": null, "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\php.txt", "file_name": "php.txt", "file_type": "text/plain", "file_size": 42456, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c8c3353a-e93e-4fd8-b4d4-bca4ab611ecb", "node_type": "4", "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\php.txt", "file_name": "php.txt", "file_type": "text/plain", "file_size": 42456, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "hash": "5963acde83bef40d98389ad406c63c8f8eadc4be4b1906da6718d341b51b28d7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f601d1ab-c873-481c-953d-2c57bc113115", "node_type": "1", "metadata": {"file_path": "E:\\rag_app\\guidline-docs\\php.txt", "file_name": "php.txt", "file_type": "text/plain", "file_size": 42456, "creation_date": "2025-07-31", "last_modified_date": "2025-07-31"}, "hash": "d6a2a7fbe8f06fedba25130124b5f14b933b5aa1d8c429a5fc6930232d8b2515", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "$exception = $this->unauthenticated($request, $exception);\r\n11.     }\r\n12.  \r\n13.     if ($exception instanceof \\Illuminate\\Validation\\ValidationException) {\r\n14.         $exception = $this->convertValidationExceptionToResponse($exception, $request);\r\n15.     }\r\n16.  \r\n17.     return $this->customApiResponse($exception);\r\n18. }\r\n\t\r\n\r\n   3. Now Handle Api exception\r\n1. private function handleApiException($request, Exception $exception)\r\n2. {\r\n3.     $exception = $this->prepareException($exception);\r\n4.  \r\n5.     if ($exception instanceof \\Illuminate\\Http\\Exception\\HttpResponseException) {\r\n6.         $exception = $exception->getResponse();\r\n7.     }\r\n8.  \r\n9.     if ($exception instanceof \\Illuminate\\Auth\\AuthenticationException) {\r\n10.         $exception = $this->unauthenticated($request, $exception);\r\n11.     }\r\n12.  \r\n13.     if ($exception instanceof \\Illuminate\\Validation\\ValidationException) {\r\n14.         $exception = $this->convertValidationExceptionToResponse($exception, $request);\r\n15.     }\r\n16.  \r\n17.     return $this->customApiResponse($exception);\r\n18. }\r\n\t\r\n\r\n   4. After that custom Api handler response\r\n 1. private function customApiResponse($exception)\r\n2. {\r\n3.     if (method_exists($exception, 'getStatusCode')) {\r\n4.         $statusCode = $exception->getStatusCode();\r\n5.     } else {\r\n6.         $statusCode = 500;\r\n7.     }\r\n8.  \r\n9.     $response = [];\r\n10.  \r\n11.     switch ($statusCode) {\r\n12.         case 401:\r\n13.             $response['message'] = 'Unauthorized';\r\n14.             break;\r\n15.         case 403:\r\n16.             $response['message'] = 'Forbidden';\r\n17.             break;\r\n18.         case 404:\r\n19.             $response['message'] = 'Not Found';\r\n20.             break;\r\n21.         case 405:\r\n22.             $response['message'] = 'Method Not Allowed';\r\n23.             break;\r\n24.         case 422:\r\n25.             $response['message'] = $exception->original['message'];\r\n26.             $response['errors'] = $exception->original['errors'];\r\n27.             break;\r\n28.         default:\r\n29.             $response['message'] = ($statusCode == 500) ? 'Whoops looks like something went wrong' : $exception->getMessage();\r\n30.             break;\r\n31.     }\r\n32.  \r\n33.     if (config('app.debug')) {\r\n34.         $response['trace'] = $exception->getTrace();\r\n35.         $response['code'] = $exception->getCode();\r\n36.     }\r\n37.  \r\n38.     $response['status'] = $statusCode;\r\n39.  \r\n40.     return response()->json($response, $statusCode);\r\n41. }\r\n\t\r\n\r\n   5. Note: Always add Accept: application/json in your API or json request.\r\n\r\n\r\n   2. Time / Space Complexity:\r\n   1. Writing optimized code is the most important thing for any Website / Application. Reducing the time and space complexity will make the application more optimized. \r\n   2. On a very basic level, writing more loops increases the time complexity.\r\n   3. Writing more lines of code increases space complexity.\r\n   4. We should try to reduce the time and space complexity wherever possible.\r\n\r\n\r\n   3. Git Necessities:\r\n   1. We should configure and use Git properly with our project. Required actions are listed in the ArhamSoft official document Git Standards, Instructions & Guidelines - V1\r\n________________\r\nConclusion:\r\nIn summary, adhering to the above PHP coding standards and guidelines ensures the development of high-quality, maintainable, and efficient applications. By following these best practices, we create a solid foundation for successful PHP projects. Emphasizing clean code and efficient testing leads to improved collaboration and a seamless development process, resulting in robust and reliable applications for our users. \r\n\r\n\r\nThank You!", "mimetype": "text/plain", "start_char_idx": 38719, "end_char_idx": 42418, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}}}